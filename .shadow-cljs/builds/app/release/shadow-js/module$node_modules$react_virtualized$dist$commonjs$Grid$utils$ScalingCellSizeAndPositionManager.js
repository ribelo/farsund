["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-virtualized/dist/commonjs/Grid/utils/ScalingCellSizeAndPositionManager.js"],"~:js","shadow$provide.module$node_modules$react_virtualized$dist$commonjs$Grid$utils$ScalingCellSizeAndPositionManager=function(b,e,a,f,c,m){function d(a){return a&&a.__esModule?a:{default:a}}Object.defineProperty(c,\"__esModule\",{value:!0});b=a(\"module$node_modules$babel_runtime$helpers$objectWithoutProperties\");var k=d(b);b=a(\"module$node_modules$babel_runtime$helpers$classCallCheck\");var l=d(b);b=a(\"module$node_modules$babel_runtime$helpers$createClass\");var h=d(b);b=a(\"module$node_modules$react_virtualized$dist$commonjs$Grid$utils$CellSizeAndPositionManager\");\nvar p=d(b),r=a(\"module$node_modules$react_virtualized$dist$commonjs$Grid$utils$maxElementSize\");a(\"module$node_modules$react_virtualized$dist$commonjs$Grid$types\");a=function(){function a(b){var c=b.maxScrollSize;c=void 0===c?(0,r.getMaxElementSize)():c;b=(0,k.default)(b,[\"maxScrollSize\"]);(0,l.default)(this,a);this._cellSizeAndPositionManager=new p.default(b);this._maxScrollSize=c}(0,h.default)(a,[{key:\"areOffsetsAdjusted\",value:function(){return this._cellSizeAndPositionManager.getTotalSize()>this._maxScrollSize}},\n{key:\"configure\",value:function(a){this._cellSizeAndPositionManager.configure(a)}},{key:\"getCellCount\",value:function(){return this._cellSizeAndPositionManager.getCellCount()}},{key:\"getEstimatedCellSize\",value:function(){return this._cellSizeAndPositionManager.getEstimatedCellSize()}},{key:\"getLastMeasuredIndex\",value:function(){return this._cellSizeAndPositionManager.getLastMeasuredIndex()}},{key:\"getOffsetAdjustment\",value:function(a){var b=a.containerSize,c=a.offset;a=this._cellSizeAndPositionManager.getTotalSize();\nvar d=this.getTotalSize();b=this._getOffsetPercentage({containerSize:b,offset:c,totalSize:d});return Math.round(b*(d-a))}},{key:\"getSizeAndPositionOfCell\",value:function(a){return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(a)}},{key:\"getSizeAndPositionOfLastMeasuredCell\",value:function(){return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell()}},{key:\"getTotalSize\",value:function(){return Math.min(this._maxScrollSize,this._cellSizeAndPositionManager.getTotalSize())}},\n{key:\"getUpdatedOffsetForIndex\",value:function(a){var b=a.align,c=void 0===b?\"auto\":b;b=a.containerSize;var d=a.currentOffset;a=a.targetIndex;d=this._safeOffsetToOffset({containerSize:b,offset:d});a=this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({align:c,containerSize:b,currentOffset:d,targetIndex:a});return this._offsetToSafeOffset({containerSize:b,offset:a})}},{key:\"getVisibleCellRange\",value:function(a){var b=a.containerSize;a=a.offset;a=this._safeOffsetToOffset({containerSize:b,offset:a});\nreturn this._cellSizeAndPositionManager.getVisibleCellRange({containerSize:b,offset:a})}},{key:\"resetCell\",value:function(a){this._cellSizeAndPositionManager.resetCell(a)}},{key:\"_getOffsetPercentage\",value:function(a){var b=a.containerSize,c=a.offset;a=a.totalSize;return a<=b?0:c/(a-b)}},{key:\"_offsetToSafeOffset\",value:function(a){var b=a.containerSize,c=a.offset,d=this._cellSizeAndPositionManager.getTotalSize();a=this.getTotalSize();if(d===a)return c;c=this._getOffsetPercentage({containerSize:b,\noffset:c,totalSize:d});return Math.round(c*(a-b))}},{key:\"_safeOffsetToOffset\",value:function(a){var b=a.containerSize,c=a.offset;a=this._cellSizeAndPositionManager.getTotalSize();var d=this.getTotalSize();if(a===d)return c;c=this._getOffsetPercentage({containerSize:b,offset:c,totalSize:d});return Math.round(c*(a-b))}}]);return a}();c.default=a}","~:source","shadow$provide[\"module$node_modules$react_virtualized$dist$commonjs$Grid$utils$ScalingCellSizeAndPositionManager\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\n\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _CellSizeAndPositionManager = require('./CellSizeAndPositionManager');\n\nvar _CellSizeAndPositionManager2 = _interopRequireDefault(_CellSizeAndPositionManager);\n\nvar _maxElementSize = require('./maxElementSize.js');\n\nvar _types = require('../types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.\n */\n\n\n/**\n * Browsers have scroll offset limitations (eg Chrome stops scrolling at ~33.5M pixels where as Edge tops out at ~1.5M pixels).\n * After a certain position, the browser won't allow the user to scroll further (even via JavaScript scroll offset adjustments).\n * This util picks a lower ceiling for max size and artificially adjusts positions within to make it transparent for users.\n */\n\nvar ScalingCellSizeAndPositionManager = function () {\n  function ScalingCellSizeAndPositionManager(_ref) {\n    var _ref$maxScrollSize = _ref.maxScrollSize,\n        maxScrollSize = _ref$maxScrollSize === undefined ? (0, _maxElementSize.getMaxElementSize)() : _ref$maxScrollSize,\n        params = (0, _objectWithoutProperties3.default)(_ref, ['maxScrollSize']);\n    (0, _classCallCheck3.default)(this, ScalingCellSizeAndPositionManager);\n\n    // Favor composition over inheritance to simplify IE10 support\n    this._cellSizeAndPositionManager = new _CellSizeAndPositionManager2.default(params);\n    this._maxScrollSize = maxScrollSize;\n  }\n\n  (0, _createClass3.default)(ScalingCellSizeAndPositionManager, [{\n    key: 'areOffsetsAdjusted',\n    value: function areOffsetsAdjusted() {\n      return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;\n    }\n  }, {\n    key: 'configure',\n    value: function configure(params) {\n      this._cellSizeAndPositionManager.configure(params);\n    }\n  }, {\n    key: 'getCellCount',\n    value: function getCellCount() {\n      return this._cellSizeAndPositionManager.getCellCount();\n    }\n  }, {\n    key: 'getEstimatedCellSize',\n    value: function getEstimatedCellSize() {\n      return this._cellSizeAndPositionManager.getEstimatedCellSize();\n    }\n  }, {\n    key: 'getLastMeasuredIndex',\n    value: function getLastMeasuredIndex() {\n      return this._cellSizeAndPositionManager.getLastMeasuredIndex();\n    }\n\n    /**\n     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.\n     * The offset passed to this function is scaled (safe) as well.\n     */\n\n  }, {\n    key: 'getOffsetAdjustment',\n    value: function getOffsetAdjustment(_ref2) {\n      var containerSize = _ref2.containerSize,\n          offset = _ref2.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n      var safeTotalSize = this.getTotalSize();\n      var offsetPercentage = this._getOffsetPercentage({\n        containerSize: containerSize,\n        offset: offset,\n        totalSize: safeTotalSize\n      });\n\n      return Math.round(offsetPercentage * (safeTotalSize - totalSize));\n    }\n  }, {\n    key: 'getSizeAndPositionOfCell',\n    value: function getSizeAndPositionOfCell(index) {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);\n    }\n  }, {\n    key: 'getSizeAndPositionOfLastMeasuredCell',\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();\n    }\n\n    /** See CellSizeAndPositionManager#getTotalSize */\n\n  }, {\n    key: 'getTotalSize',\n    value: function getTotalSize() {\n      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());\n    }\n\n    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */\n\n  }, {\n    key: 'getUpdatedOffsetForIndex',\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === undefined ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n\n      currentOffset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: currentOffset\n      });\n\n      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: align,\n        containerSize: containerSize,\n        currentOffset: currentOffset,\n        targetIndex: targetIndex\n      });\n\n      return this._offsetToSafeOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n\n    /** See CellSizeAndPositionManager#getVisibleCellRange */\n\n  }, {\n    key: 'getVisibleCellRange',\n    value: function getVisibleCellRange(_ref4) {\n      var containerSize = _ref4.containerSize,\n          offset = _ref4.offset;\n\n      offset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n\n      return this._cellSizeAndPositionManager.getVisibleCellRange({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n  }, {\n    key: 'resetCell',\n    value: function resetCell(index) {\n      this._cellSizeAndPositionManager.resetCell(index);\n    }\n  }, {\n    key: '_getOffsetPercentage',\n    value: function _getOffsetPercentage(_ref5) {\n      var containerSize = _ref5.containerSize,\n          offset = _ref5.offset,\n          totalSize = _ref5.totalSize;\n\n      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);\n    }\n  }, {\n    key: '_offsetToSafeOffset',\n    value: function _offsetToSafeOffset(_ref6) {\n      var containerSize = _ref6.containerSize,\n          offset = _ref6.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: totalSize\n        });\n\n        return Math.round(offsetPercentage * (safeTotalSize - containerSize));\n      }\n    }\n  }, {\n    key: '_safeOffsetToOffset',\n    value: function _safeOffsetToOffset(_ref7) {\n      var containerSize = _ref7.containerSize,\n          offset = _ref7.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: safeTotalSize\n        });\n\n        return Math.round(offsetPercentage * (totalSize - containerSize));\n      }\n    }\n  }]);\n  return ScalingCellSizeAndPositionManager;\n}();\n\nexports.default = ScalingCellSizeAndPositionManager;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react_virtualized$dist$commonjs$Grid$types","~$module$node_modules$react_virtualized$dist$commonjs$Grid$utils$maxElementSize","~$shadow.js","~$module$node_modules$react_virtualized$dist$commonjs$Grid$utils$CellSizeAndPositionManager","~$module$node_modules$babel_runtime$helpers$objectWithoutProperties","~$module$node_modules$babel_runtime$helpers$classCallCheck","~$module$node_modules$babel_runtime$helpers$createClass"]],"~:properties",["^5",["align","targetIndex","offset","_cellSizeAndPositionManager","key","__esModule","_maxScrollSize","containerSize","value","currentOffset","default","totalSize"]],"~:compiled-at",1537815743249,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_virtualized$dist$commonjs$Grid$utils$ScalingCellSizeAndPositionManager.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/react-virtualized/dist/commonjs/Grid/utils/ScalingCellSizeAndPositionManager.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_virtualized$dist$commonjs$Grid$utils$ScalingCellSizeAndPositionManager\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n'use strict';\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');\\n\\nvar _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);\\n\\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\\n\\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\\n\\nvar _createClass2 = require('babel-runtime/helpers/createClass');\\n\\nvar _createClass3 = _interopRequireDefault(_createClass2);\\n\\nvar _CellSizeAndPositionManager = require('./CellSizeAndPositionManager');\\n\\nvar _CellSizeAndPositionManager2 = _interopRequireDefault(_CellSizeAndPositionManager);\\n\\nvar _maxElementSize = require('./maxElementSize.js');\\n\\nvar _types = require('../types');\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\n/**\\n * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.\\n */\\n\\n\\n/**\\n * Browsers have scroll offset limitations (eg Chrome stops scrolling at ~33.5M pixels where as Edge tops out at ~1.5M pixels).\\n * After a certain position, the browser won't allow the user to scroll further (even via JavaScript scroll offset adjustments).\\n * This util picks a lower ceiling for max size and artificially adjusts positions within to make it transparent for users.\\n */\\n\\nvar ScalingCellSizeAndPositionManager = function () {\\n  function ScalingCellSizeAndPositionManager(_ref) {\\n    var _ref$maxScrollSize = _ref.maxScrollSize,\\n        maxScrollSize = _ref$maxScrollSize === undefined ? (0, _maxElementSize.getMaxElementSize)() : _ref$maxScrollSize,\\n        params = (0, _objectWithoutProperties3.default)(_ref, ['maxScrollSize']);\\n    (0, _classCallCheck3.default)(this, ScalingCellSizeAndPositionManager);\\n\\n    // Favor composition over inheritance to simplify IE10 support\\n    this._cellSizeAndPositionManager = new _CellSizeAndPositionManager2.default(params);\\n    this._maxScrollSize = maxScrollSize;\\n  }\\n\\n  (0, _createClass3.default)(ScalingCellSizeAndPositionManager, [{\\n    key: 'areOffsetsAdjusted',\\n    value: function areOffsetsAdjusted() {\\n      return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;\\n    }\\n  }, {\\n    key: 'configure',\\n    value: function configure(params) {\\n      this._cellSizeAndPositionManager.configure(params);\\n    }\\n  }, {\\n    key: 'getCellCount',\\n    value: function getCellCount() {\\n      return this._cellSizeAndPositionManager.getCellCount();\\n    }\\n  }, {\\n    key: 'getEstimatedCellSize',\\n    value: function getEstimatedCellSize() {\\n      return this._cellSizeAndPositionManager.getEstimatedCellSize();\\n    }\\n  }, {\\n    key: 'getLastMeasuredIndex',\\n    value: function getLastMeasuredIndex() {\\n      return this._cellSizeAndPositionManager.getLastMeasuredIndex();\\n    }\\n\\n    /**\\n     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.\\n     * The offset passed to this function is scaled (safe) as well.\\n     */\\n\\n  }, {\\n    key: 'getOffsetAdjustment',\\n    value: function getOffsetAdjustment(_ref2) {\\n      var containerSize = _ref2.containerSize,\\n          offset = _ref2.offset;\\n\\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\\n      var safeTotalSize = this.getTotalSize();\\n      var offsetPercentage = this._getOffsetPercentage({\\n        containerSize: containerSize,\\n        offset: offset,\\n        totalSize: safeTotalSize\\n      });\\n\\n      return Math.round(offsetPercentage * (safeTotalSize - totalSize));\\n    }\\n  }, {\\n    key: 'getSizeAndPositionOfCell',\\n    value: function getSizeAndPositionOfCell(index) {\\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);\\n    }\\n  }, {\\n    key: 'getSizeAndPositionOfLastMeasuredCell',\\n    value: function getSizeAndPositionOfLastMeasuredCell() {\\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();\\n    }\\n\\n    /** See CellSizeAndPositionManager#getTotalSize */\\n\\n  }, {\\n    key: 'getTotalSize',\\n    value: function getTotalSize() {\\n      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());\\n    }\\n\\n    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */\\n\\n  }, {\\n    key: 'getUpdatedOffsetForIndex',\\n    value: function getUpdatedOffsetForIndex(_ref3) {\\n      var _ref3$align = _ref3.align,\\n          align = _ref3$align === undefined ? 'auto' : _ref3$align,\\n          containerSize = _ref3.containerSize,\\n          currentOffset = _ref3.currentOffset,\\n          targetIndex = _ref3.targetIndex;\\n\\n      currentOffset = this._safeOffsetToOffset({\\n        containerSize: containerSize,\\n        offset: currentOffset\\n      });\\n\\n      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({\\n        align: align,\\n        containerSize: containerSize,\\n        currentOffset: currentOffset,\\n        targetIndex: targetIndex\\n      });\\n\\n      return this._offsetToSafeOffset({\\n        containerSize: containerSize,\\n        offset: offset\\n      });\\n    }\\n\\n    /** See CellSizeAndPositionManager#getVisibleCellRange */\\n\\n  }, {\\n    key: 'getVisibleCellRange',\\n    value: function getVisibleCellRange(_ref4) {\\n      var containerSize = _ref4.containerSize,\\n          offset = _ref4.offset;\\n\\n      offset = this._safeOffsetToOffset({\\n        containerSize: containerSize,\\n        offset: offset\\n      });\\n\\n      return this._cellSizeAndPositionManager.getVisibleCellRange({\\n        containerSize: containerSize,\\n        offset: offset\\n      });\\n    }\\n  }, {\\n    key: 'resetCell',\\n    value: function resetCell(index) {\\n      this._cellSizeAndPositionManager.resetCell(index);\\n    }\\n  }, {\\n    key: '_getOffsetPercentage',\\n    value: function _getOffsetPercentage(_ref5) {\\n      var containerSize = _ref5.containerSize,\\n          offset = _ref5.offset,\\n          totalSize = _ref5.totalSize;\\n\\n      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);\\n    }\\n  }, {\\n    key: '_offsetToSafeOffset',\\n    value: function _offsetToSafeOffset(_ref6) {\\n      var containerSize = _ref6.containerSize,\\n          offset = _ref6.offset;\\n\\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\\n      var safeTotalSize = this.getTotalSize();\\n\\n      if (totalSize === safeTotalSize) {\\n        return offset;\\n      } else {\\n        var offsetPercentage = this._getOffsetPercentage({\\n          containerSize: containerSize,\\n          offset: offset,\\n          totalSize: totalSize\\n        });\\n\\n        return Math.round(offsetPercentage * (safeTotalSize - containerSize));\\n      }\\n    }\\n  }, {\\n    key: '_safeOffsetToOffset',\\n    value: function _safeOffsetToOffset(_ref7) {\\n      var containerSize = _ref7.containerSize,\\n          offset = _ref7.offset;\\n\\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\\n      var safeTotalSize = this.getTotalSize();\\n\\n      if (totalSize === safeTotalSize) {\\n        return offset;\\n      } else {\\n        var offsetPercentage = this._getOffsetPercentage({\\n          containerSize: containerSize,\\n          offset: offset,\\n          totalSize: safeTotalSize\\n        });\\n\\n        return Math.round(offsetPercentage * (totalSize - containerSize));\\n      }\\n    }\\n  }]);\\n  return ScalingCellSizeAndPositionManager;\\n}();\\n\\nexports.default = ScalingCellSizeAndPositionManager;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"default\",\"Object\",\"defineProperty\",\"value\",\"_objectWithoutProperties2\",\"_objectWithoutProperties3\",\"_classCallCheck2\",\"_classCallCheck3\",\"_createClass2\",\"_createClass3\",\"_CellSizeAndPositionManager\",\"_CellSizeAndPositionManager2\",\"_maxElementSize\",\"ScalingCellSizeAndPositionManager\",\"_ref\",\"_ref$maxScrollSize\",\"maxScrollSize\",\"undefined\",\"getMaxElementSize\",\"params\",\"_cellSizeAndPositionManager\",\"_maxScrollSize\",\"key\",\"areOffsetsAdjusted\",\"getTotalSize\",\"configure\",\"getCellCount\",\"getEstimatedCellSize\",\"getLastMeasuredIndex\",\"getOffsetAdjustment\",\"_ref2\",\"containerSize\",\"offset\",\"totalSize\",\"safeTotalSize\",\"offsetPercentage\",\"_getOffsetPercentage\",\"Math\",\"round\",\"getSizeAndPositionOfCell\",\"index\",\"getSizeAndPositionOfLastMeasuredCell\",\"min\",\"getUpdatedOffsetForIndex\",\"_ref3\",\"_ref3$align\",\"align\",\"currentOffset\",\"targetIndex\",\"_safeOffsetToOffset\",\"_offsetToSafeOffset\",\"getVisibleCellRange\",\"_ref4\",\"resetCell\",\"_ref5\",\"_ref6\",\"_ref7\"]\n}\n"]