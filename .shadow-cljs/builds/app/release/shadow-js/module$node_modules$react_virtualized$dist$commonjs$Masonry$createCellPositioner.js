["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-virtualized/dist/commonjs/Masonry/createCellPositioner.js"],"~:js","shadow$provide.module$node_modules$react_virtualized$dist$commonjs$Masonry$createCellPositioner=function(b,e,a,f,c,m){Object.defineProperty(c,\"__esModule\",{value:!0});c.default=function(a){function b(a){for(var b=0,c=1;c<g.length;c++)g[c]<g[b]&&(b=c);c=b*(f+m);var e=g[b]||0;g[b]=e+d.getHeight(a)+m;return{left:c,top:e}}function c(){g=[];for(var a=0;a<e;a++)g[a]=0}var d=a.cellMeasurerCache,e=a.columnCount,f=a.columnWidth;a=a.spacer;var m=void 0===a?0:a,g=void 0;c();b.reset=function(a){e=a.columnCount;\nf=a.columnWidth;m=a.spacer;c()};return b};a(\"module$node_modules$react_virtualized$dist$commonjs$Masonry$Masonry\")}","~:source","shadow$provide[\"module$node_modules$react_virtualized$dist$commonjs$Masonry$createCellPositioner\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createCellPositioner;\n\nvar _Masonry = require('./Masonry');\n\nfunction createCellPositioner(_ref) {\n  var cellMeasurerCache = _ref.cellMeasurerCache,\n      columnCount = _ref.columnCount,\n      columnWidth = _ref.columnWidth,\n      _ref$spacer = _ref.spacer,\n      spacer = _ref$spacer === undefined ? 0 : _ref$spacer;\n\n  var columnHeights = void 0;\n\n  initOrResetDerivedValues();\n\n  function cellPositioner(index) {\n    // Find the shortest column and use it.\n    var columnIndex = 0;\n    for (var i = 1; i < columnHeights.length; i++) {\n      if (columnHeights[i] < columnHeights[columnIndex]) {\n        columnIndex = i;\n      }\n    }\n\n    var left = columnIndex * (columnWidth + spacer);\n    var top = columnHeights[columnIndex] || 0;\n\n    columnHeights[columnIndex] = top + cellMeasurerCache.getHeight(index) + spacer;\n\n    return {\n      left: left,\n      top: top\n    };\n  }\n\n  function initOrResetDerivedValues() {\n    // Track the height of each column.\n    // Layout algorithm below always inserts into the shortest column.\n    columnHeights = [];\n    for (var i = 0; i < columnCount; i++) {\n      columnHeights[i] = 0;\n    }\n  }\n\n  function reset(params) {\n    columnCount = params.columnCount;\n    columnWidth = params.columnWidth;\n    spacer = params.spacer;\n\n    initOrResetDerivedValues();\n  }\n\n  cellPositioner.reset = reset;\n\n  return cellPositioner;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$react_virtualized$dist$commonjs$Masonry$Masonry"]],"~:properties",["^5",["top","__esModule","reset","value","default","left"]],"~:compiled-at",1537815743281,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_virtualized$dist$commonjs$Masonry$createCellPositioner.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,iFAAA,CAAqG,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAwBC,CAAxB,CAA+BC,CAA/B,CAAuCC,CAAvC,CAAqD,CAGlKC,MAAAC,eAAA,CAAsBH,CAAtB,CAA+B,YAA/B,CAA6C,CAC3CI,MAAO,CAAA,CADoC,CAA7C,CAGAJ,EAAAK,QAAA,CAIAC,QAA6B,CAACC,CAAD,CAAO,CAWlCC,QAASA,EAAc,CAACC,CAAD,CAAQ,CAG7B,IADA,IAAIC,EAAc,CAAlB,CACSC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBC,CAAAC,OAApB,CAA0CF,CAAA,EAA1C,CACMC,CAAA,CAAcD,CAAd,CAAJ,CAAuBC,CAAA,CAAcF,CAAd,CAAvB,GACEA,CADF,CACgBC,CADhB,CAKEG,EAAAA,CAAOJ,CAAPI,EAAsBC,CAAtBD,CAAoCE,CAApCF,CACJ,KAAIG,EAAML,CAAA,CAAcF,CAAd,CAANO,EAAoC,CAExCL,EAAA,CAAcF,CAAd,CAAA,CAA6BO,CAA7B,CAAmCC,CAAAC,UAAA,CAA4BV,CAA5B,CAAnC,CAAwEO,CAExE,OAAO,CACLF,KAAMA,CADD,CAELG,IAAKA,CAFA,CAdsB,CAoB/BG,QAASA,EAAwB,EAAG,CAGlCR,CAAA,CAAgB,EAChB,KAAK,IAAID,EAAI,CAAb,CAAgBA,CAAhB,CAAoBU,CAApB,CAAiCV,CAAA,EAAjC,CACEC,CAAA,CAAcD,CAAd,CAAA,CAAmB,CALa,CA/BF,IAC9BO,EAAoBX,CAAAW,kBADU,CAE9BG,EAAcd,CAAAc,YAFgB,CAG9BN,EAAcR,CAAAQ,YACdO,EAAAA,CAAcf,CAAAS,OAHlB,KAIIA,EAAyBO,IAAAA,EAAhB,GAAAD,CAAA,CAA4B,CAA5B,CAAgCA,CAJ7C,CAMIV,EAAgB,IAAK,EAEzBQ,EAAA,EAuCAZ,EAAAgB,MAAA,CARAA,QAAc,CAACC,CAAD,CAAS,CACrBJ,CAAA,CAAcI,CAAAJ,YACdN;CAAA,CAAcU,CAAAV,YACdC,EAAA,CAASS,CAAAT,OAETI,EAAA,EALqB,CAUvB,OAAOZ,EAlD2B,CAFrBV,EAAA,CAAQ,qEAAR,CARmJ;\",\n\"sources\":[\"node_modules/react-virtualized/dist/commonjs/Masonry/createCellPositioner.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_virtualized$dist$commonjs$Masonry$createCellPositioner\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n'use strict';\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = createCellPositioner;\\n\\nvar _Masonry = require('./Masonry');\\n\\nfunction createCellPositioner(_ref) {\\n  var cellMeasurerCache = _ref.cellMeasurerCache,\\n      columnCount = _ref.columnCount,\\n      columnWidth = _ref.columnWidth,\\n      _ref$spacer = _ref.spacer,\\n      spacer = _ref$spacer === undefined ? 0 : _ref$spacer;\\n\\n  var columnHeights = void 0;\\n\\n  initOrResetDerivedValues();\\n\\n  function cellPositioner(index) {\\n    // Find the shortest column and use it.\\n    var columnIndex = 0;\\n    for (var i = 1; i < columnHeights.length; i++) {\\n      if (columnHeights[i] < columnHeights[columnIndex]) {\\n        columnIndex = i;\\n      }\\n    }\\n\\n    var left = columnIndex * (columnWidth + spacer);\\n    var top = columnHeights[columnIndex] || 0;\\n\\n    columnHeights[columnIndex] = top + cellMeasurerCache.getHeight(index) + spacer;\\n\\n    return {\\n      left: left,\\n      top: top\\n    };\\n  }\\n\\n  function initOrResetDerivedValues() {\\n    // Track the height of each column.\\n    // Layout algorithm below always inserts into the shortest column.\\n    columnHeights = [];\\n    for (var i = 0; i < columnCount; i++) {\\n      columnHeights[i] = 0;\\n    }\\n  }\\n\\n  function reset(params) {\\n    columnCount = params.columnCount;\\n    columnWidth = params.columnWidth;\\n    spacer = params.spacer;\\n\\n    initOrResetDerivedValues();\\n  }\\n\\n  cellPositioner.reset = reset;\\n\\n  return cellPositioner;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"Object\",\"defineProperty\",\"value\",\"default\",\"createCellPositioner\",\"_ref\",\"cellPositioner\",\"index\",\"columnIndex\",\"i\",\"columnHeights\",\"length\",\"left\",\"columnWidth\",\"spacer\",\"top\",\"cellMeasurerCache\",\"getHeight\",\"initOrResetDerivedValues\",\"columnCount\",\"_ref$spacer\",\"undefined\",\"reset\",\"params\"]\n}\n"]