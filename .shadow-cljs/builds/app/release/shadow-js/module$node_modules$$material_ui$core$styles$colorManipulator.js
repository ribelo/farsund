["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@material-ui/core/styles/colorManipulator.js"],"~:js","shadow$provide.module$node_modules$$material_ui$core$styles$colorManipulator=function(b,d,a,e,c,g){function f(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:0,c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:1;void 0;return a<b?b:a>c?c:a}function l(a){a=a.substr(1);var b=new RegExp(\".{1,\".concat(a.length/3,\"}\"),\"g\");(a=a.match(b))&&1===a[0].length&&(a=a.map(function(a){return a+a}));return a?\"rgb(\".concat(a.map(function(a){return parseInt(a,16)}).join(\", \"),\")\"):\"\"}function k(a){if(\"#\"===\na.charAt(0))return k(l(a));var b=a.indexOf(\"(\"),c=a.substring(0,b);a=a.substring(b+1,a.length-1).split(\",\");a=a.map(function(a){return parseFloat(a)});return{type:c,values:a}}function p(a){var b=a.type,c=a.values;-1!==b.indexOf(\"rgb\")&&(c=c.map(function(a,b){return 3>b?parseInt(a,10):a}));-1!==b.indexOf(\"hsl\")&&(c[1]=\"\".concat(c[1],\"%\"),c[2]=\"\".concat(c[2],\"%\"));return\"\".concat(a.type,\"(\").concat(c.join(\", \"),\")\")}function m(a){a=k(a);return-1!==a.type.indexOf(\"rgb\")?(a=a.values.map(function(a){a/=\n255;return.03928>=a?a/12.92:Math.pow((a+.055)/1.055,2.4)}),Number((.2126*a[0]+.7152*a[1]+.0722*a[2]).toFixed(3))):a.values[2]/100}function r(a,b){void 0;if(!a)return a;a=k(a);b=f(b);if(-1!==a.type.indexOf(\"hsl\"))a.values[2]*=1-b;else if(-1!==a.type.indexOf(\"rgb\"))for(var c=0;3>c;c+=1)a.values[c]*=1-b;return p(a)}function n(a,b){void 0;if(!a)return a;a=k(a);b=f(b);if(-1!==a.type.indexOf(\"hsl\"))a.values[2]+=(100-a.values[2])*b;else if(-1!==a.type.indexOf(\"rgb\"))for(var c=0;3>c;c+=1)a.values[c]+=(255-\na.values[c])*b;return p(a)}b=a(\"module$node_modules$$babel$runtime$helpers$interopRequireDefault\");Object.defineProperty(c,\"__esModule\",{value:!0});c.convertHexToRGB=l;c.rgbToHex=function(a){if(0===a.indexOf(\"#\"))return a;a=k(a).values;a=a.map(function(a){a=a.toString(16);return 1===a.length?\"0\".concat(a):a});return\"#\".concat(a.join(\"\"))};c.decomposeColor=k;c.recomposeColor=p;c.getContrastRatio=function(a,b){a=m(a);b=m(b);return(Math.max(a,b)+.05)/(Math.min(a,b)+.05)};c.getLuminance=m;c.emphasize=\nfunction(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:.15;return.5<m(a)?r(a,b):n(a,b)};c.fade=function(a,b){void 0;if(!a)return a;a=k(a);b=f(b);if(\"rgb\"===a.type||\"hsl\"===a.type)a.type+=\"a\";a.values[3]=b;return p(a)};c.darken=r;c.lighten=n;b(a(\"module$node_modules$warning$browser\"))}","~:source","shadow$provide[\"module$node_modules$$material_ui$core$styles$colorManipulator\"] = function(global,process,require,module,exports,shadow$shims) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertHexToRGB = convertHexToRGB;\nexports.rgbToHex = rgbToHex;\nexports.decomposeColor = decomposeColor;\nexports.recomposeColor = recomposeColor;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.emphasize = emphasize;\nexports.fade = fade;\nexports.darken = darken;\nexports.lighten = lighten;\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\n/* eslint-disable no-use-before-define */\n\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(value >= min && value <= max, \"Material-UI: the value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\")) : void 0;\n\n  if (value < min) {\n    return min;\n  }\n\n  if (value > max) {\n    return max;\n  }\n\n  return value;\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nfunction convertHexToRGB(color) {\n  color = color.substr(1);\n  var re = new RegExp(\".{1,\".concat(color.length / 3, \"}\"), 'g');\n  var colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(function (n) {\n      return n + n;\n    });\n  }\n\n  return colors ? \"rgb(\".concat(colors.map(function (n) {\n    return parseInt(n, 16);\n  }).join(', '), \")\") : '';\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n *\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\n\nfunction rgbToHex(color) {\n  // Pass hex straight through\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  function intToHex(c) {\n    var hex = c.toString(16);\n    return hex.length === 1 ? \"0\".concat(hex) : hex;\n  }\n\n  var _decomposeColor = decomposeColor(color),\n      values = _decomposeColor.values;\n\n  values = values.map(function (n) {\n    return intToHex(n);\n  });\n  return \"#\".concat(values.join(''));\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\n\nfunction decomposeColor(color) {\n  if (color.charAt(0) === '#') {\n    return decomposeColor(convertHexToRGB(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n  var values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n      throw new Error([\"Material-UI: unsupported `\".concat(color, \"` color.\"), 'We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().'].join('\\n'));\n    }\n  }\n\n  return {\n    type: type,\n    values: values\n  };\n}\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\n\nfunction recomposeColor(color) {\n  var type = color.type;\n  var values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map(function (n, i) {\n      return i < 3 ? parseInt(n, 10) : n;\n    });\n  }\n\n  if (type.indexOf('hsl') !== -1) {\n    values[1] = \"\".concat(values[1], \"%\");\n    values[2] = \"\".concat(values[2], \"%\");\n  }\n\n  return \"\".concat(color.type, \"(\").concat(values.join(', '), \")\");\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\n\nfunction getContrastRatio(foreground, background) {\n  var lumA = getLuminance(foreground);\n  var lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\n\nfunction getLuminance(color) {\n  var decomposedColor = decomposeColor(color);\n\n  if (decomposedColor.type.indexOf('rgb') !== -1) {\n    var rgb = decomposedColor.values.map(function (val) {\n      val /= 255; // normalized\n\n      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n    }); // Truncate at 3 digits\n\n    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n  } // else if (decomposedColor.type.indexOf('hsl') !== -1)\n\n\n  return decomposedColor.values[2] / 100;\n}\n/**\n * Darken or lighten a colour, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction emphasize(color) {\n  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction fade(color, value) {\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(color, \"Material-UI: missing color argument in fade(\".concat(color, \", \").concat(value, \").\")) : void 0;\n  if (!color) return color;\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  color.values[3] = value;\n  return recomposeColor(color);\n}\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction darken(color, coefficient) {\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(color, \"Material-UI: missing color argument in darken(\".concat(color, \", \").concat(coefficient, \").\")) : void 0;\n  if (!color) return color;\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction lighten(color, coefficient) {\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(color, \"Material-UI: missing color argument in lighten(\".concat(color, \", \").concat(coefficient, \").\")) : void 0;\n  if (!color) return color;\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$babel$runtime$helpers$interopRequireDefault","~$shadow.js","~$module$node_modules$warning$browser"]],"~:properties",["^5",["recomposeColor","values","emphasize","darken","lighten","fade","__esModule","decomposeColor","value","getLuminance","rgbToHex","type","getContrastRatio","convertHexToRGB"]],"~:compiled-at",1540237495324,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$material_ui$core$styles$colorManipulator.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@material-ui/core/styles/colorManipulator.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$material_ui$core$styles$colorManipulator\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime/helpers/interopRequireDefault\\\");\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.convertHexToRGB = convertHexToRGB;\\nexports.rgbToHex = rgbToHex;\\nexports.decomposeColor = decomposeColor;\\nexports.recomposeColor = recomposeColor;\\nexports.getContrastRatio = getContrastRatio;\\nexports.getLuminance = getLuminance;\\nexports.emphasize = emphasize;\\nexports.fade = fade;\\nexports.darken = darken;\\nexports.lighten = lighten;\\n\\nvar _warning = _interopRequireDefault(require(\\\"warning\\\"));\\n\\n/* eslint-disable no-use-before-define */\\n\\n/**\\n * Returns a number whose value is limited to the given range.\\n *\\n * @param {number} value The value to be clamped\\n * @param {number} min The lower boundary of the output range\\n * @param {number} max The upper boundary of the output range\\n * @returns {number} A number in the range [min, max]\\n */\\nfunction clamp(value) {\\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\\n  process.env.NODE_ENV !== \\\"production\\\" ? (0, _warning.default)(value >= min && value <= max, \\\"Material-UI: the value provided \\\".concat(value, \\\" is out of range [\\\").concat(min, \\\", \\\").concat(max, \\\"].\\\")) : void 0;\\n\\n  if (value < min) {\\n    return min;\\n  }\\n\\n  if (value > max) {\\n    return max;\\n  }\\n\\n  return value;\\n}\\n/**\\n * Converts a color from CSS hex format to CSS rgb format.\\n *\\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\\n * @returns {string} A CSS rgb color string\\n */\\n\\n\\nfunction convertHexToRGB(color) {\\n  color = color.substr(1);\\n  var re = new RegExp(\\\".{1,\\\".concat(color.length / 3, \\\"}\\\"), 'g');\\n  var colors = color.match(re);\\n\\n  if (colors && colors[0].length === 1) {\\n    colors = colors.map(function (n) {\\n      return n + n;\\n    });\\n  }\\n\\n  return colors ? \\\"rgb(\\\".concat(colors.map(function (n) {\\n    return parseInt(n, 16);\\n  }).join(', '), \\\")\\\") : '';\\n}\\n/**\\n * Converts a color from CSS rgb format to CSS hex format.\\n *\\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\\n */\\n\\n\\nfunction rgbToHex(color) {\\n  // Pass hex straight through\\n  if (color.indexOf('#') === 0) {\\n    return color;\\n  }\\n\\n  function intToHex(c) {\\n    var hex = c.toString(16);\\n    return hex.length === 1 ? \\\"0\\\".concat(hex) : hex;\\n  }\\n\\n  var _decomposeColor = decomposeColor(color),\\n      values = _decomposeColor.values;\\n\\n  values = values.map(function (n) {\\n    return intToHex(n);\\n  });\\n  return \\\"#\\\".concat(values.join(''));\\n}\\n/**\\n * Returns an object with the type and values of a color.\\n *\\n * Note: Does not support rgb % values.\\n *\\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\\n * @returns {object} - A MUI color object: {type: string, values: number[]}\\n */\\n\\n\\nfunction decomposeColor(color) {\\n  if (color.charAt(0) === '#') {\\n    return decomposeColor(convertHexToRGB(color));\\n  }\\n\\n  var marker = color.indexOf('(');\\n  var type = color.substring(0, marker);\\n  var values = color.substring(marker + 1, color.length - 1).split(',');\\n  values = values.map(function (value) {\\n    return parseFloat(value);\\n  });\\n\\n  if (process.env.NODE_ENV !== 'production') {\\n    if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\\n      throw new Error([\\\"Material-UI: unsupported `\\\".concat(color, \\\"` color.\\\"), 'We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().'].join('\\\\n'));\\n    }\\n  }\\n\\n  return {\\n    type: type,\\n    values: values\\n  };\\n}\\n/**\\n * Converts a color object with type and values to a string.\\n *\\n * @param {object} color - Decomposed color\\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\\n * @returns {string} A CSS color string\\n */\\n\\n\\nfunction recomposeColor(color) {\\n  var type = color.type;\\n  var values = color.values;\\n\\n  if (type.indexOf('rgb') !== -1) {\\n    // Only convert the first 3 values to int (i.e. not alpha)\\n    values = values.map(function (n, i) {\\n      return i < 3 ? parseInt(n, 10) : n;\\n    });\\n  }\\n\\n  if (type.indexOf('hsl') !== -1) {\\n    values[1] = \\\"\\\".concat(values[1], \\\"%\\\");\\n    values[2] = \\\"\\\".concat(values[2], \\\"%\\\");\\n  }\\n\\n  return \\\"\\\".concat(color.type, \\\"(\\\").concat(values.join(', '), \\\")\\\");\\n}\\n/**\\n * Calculates the contrast ratio between two colors.\\n *\\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\\n *\\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\\n * @returns {number} A contrast ratio value in the range 0 - 21.\\n */\\n\\n\\nfunction getContrastRatio(foreground, background) {\\n  var lumA = getLuminance(foreground);\\n  var lumB = getLuminance(background);\\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\\n}\\n/**\\n * The relative brightness of any point in a color space,\\n * normalized to 0 for darkest black and 1 for lightest white.\\n *\\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\\n *\\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\\n * @returns {number} The relative brightness of the color in the range 0 - 1\\n */\\n\\n\\nfunction getLuminance(color) {\\n  var decomposedColor = decomposeColor(color);\\n\\n  if (decomposedColor.type.indexOf('rgb') !== -1) {\\n    var rgb = decomposedColor.values.map(function (val) {\\n      val /= 255; // normalized\\n\\n      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\\n    }); // Truncate at 3 digits\\n\\n    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\\n  } // else if (decomposedColor.type.indexOf('hsl') !== -1)\\n\\n\\n  return decomposedColor.values[2] / 100;\\n}\\n/**\\n * Darken or lighten a colour, depending on its luminance.\\n * Light colors are darkened, dark colors are lightened.\\n *\\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\\n * @returns {string} A CSS color string. Hex input values are returned as rgb\\n */\\n\\n\\nfunction emphasize(color) {\\n  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\\n}\\n/**\\n * Set the absolute transparency of a color.\\n * Any existing alpha values are overwritten.\\n *\\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\\n * @param {number} value - value to set the alpha channel to in the range 0 -1\\n * @returns {string} A CSS color string. Hex input values are returned as rgb\\n */\\n\\n\\nfunction fade(color, value) {\\n  process.env.NODE_ENV !== \\\"production\\\" ? (0, _warning.default)(color, \\\"Material-UI: missing color argument in fade(\\\".concat(color, \\\", \\\").concat(value, \\\").\\\")) : void 0;\\n  if (!color) return color;\\n  color = decomposeColor(color);\\n  value = clamp(value);\\n\\n  if (color.type === 'rgb' || color.type === 'hsl') {\\n    color.type += 'a';\\n  }\\n\\n  color.values[3] = value;\\n  return recomposeColor(color);\\n}\\n/**\\n * Darkens a color.\\n *\\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\\n * @param {number} coefficient - multiplier in the range 0 - 1\\n * @returns {string} A CSS color string. Hex input values are returned as rgb\\n */\\n\\n\\nfunction darken(color, coefficient) {\\n  process.env.NODE_ENV !== \\\"production\\\" ? (0, _warning.default)(color, \\\"Material-UI: missing color argument in darken(\\\".concat(color, \\\", \\\").concat(coefficient, \\\").\\\")) : void 0;\\n  if (!color) return color;\\n  color = decomposeColor(color);\\n  coefficient = clamp(coefficient);\\n\\n  if (color.type.indexOf('hsl') !== -1) {\\n    color.values[2] *= 1 - coefficient;\\n  } else if (color.type.indexOf('rgb') !== -1) {\\n    for (var i = 0; i < 3; i += 1) {\\n      color.values[i] *= 1 - coefficient;\\n    }\\n  }\\n\\n  return recomposeColor(color);\\n}\\n/**\\n * Lightens a color.\\n *\\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\\n * @param {number} coefficient - multiplier in the range 0 - 1\\n * @returns {string} A CSS color string. Hex input values are returned as rgb\\n */\\n\\n\\nfunction lighten(color, coefficient) {\\n  process.env.NODE_ENV !== \\\"production\\\" ? (0, _warning.default)(color, \\\"Material-UI: missing color argument in lighten(\\\".concat(color, \\\", \\\").concat(coefficient, \\\").\\\")) : void 0;\\n  if (!color) return color;\\n  color = decomposeColor(color);\\n  coefficient = clamp(coefficient);\\n\\n  if (color.type.indexOf('hsl') !== -1) {\\n    color.values[2] += (100 - color.values[2]) * coefficient;\\n  } else if (color.type.indexOf('rgb') !== -1) {\\n    for (var i = 0; i < 3; i += 1) {\\n      color.values[i] += (255 - color.values[i]) * coefficient;\\n    }\\n  }\\n\\n  return recomposeColor(color);\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"clamp\",\"value\",\"min\",\"arguments\",\"length\",\"undefined\",\"max\",\"convertHexToRGB\",\"color\",\"substr\",\"re\",\"RegExp\",\"concat\",\"colors\",\"match\",\"map\",\"n\",\"parseInt\",\"join\",\"decomposeColor\",\"charAt\",\"marker\",\"indexOf\",\"type\",\"substring\",\"values\",\"split\",\"parseFloat\",\"recomposeColor\",\"i\",\"getLuminance\",\"decomposedColor\",\"rgb\",\"val\",\"Math\",\"pow\",\"Number\",\"toFixed\",\"darken\",\"coefficient\",\"lighten\",\"_interopRequireDefault\",\"Object\",\"defineProperty\",\"rgbToHex\",\"_decomposeColor\",\"hex\",\"toString\",\"getContrastRatio\",\"foreground\",\"background\",\"lumA\",\"lumB\",\"emphasize\",\"fade\"]\n}\n"]