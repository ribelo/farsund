["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-virtualized/dist/commonjs/Collection/SectionManager.js"],"~:js","shadow$provide.module$node_modules$react_virtualized$dist$commonjs$Collection$SectionManager=function(b,e,a,f,c,m){function d(a){return a&&a.__esModule?a:{default:a}}Object.defineProperty(c,\"__esModule\",{value:!0});b=a(\"module$node_modules$babel_runtime$core_js$object$keys\");var k=d(b);b=a(\"module$node_modules$babel_runtime$helpers$classCallCheck\");var l=d(b);b=a(\"module$node_modules$babel_runtime$helpers$createClass\");var h=d(b);b=a(\"module$node_modules$react_virtualized$dist$commonjs$Collection$Section\");\nvar p=d(b);a(\"module$node_modules$react_virtualized$dist$commonjs$Collection$types\");a=function(){function a(){var b=0<arguments.length&&void 0!==arguments[0]?arguments[0]:100;(0,l.default)(this,a);this._sectionSize=b;this._cellMetadata=[];this._sections={}}(0,h.default)(a,[{key:\"getCellIndices\",value:function(a){var b={};this.getSections({height:a.height,width:a.width,x:a.x,y:a.y}).forEach(function(a){return a.getCellIndices().forEach(function(a){b[a]=a})});return(0,k.default)(b).map(function(a){return b[a]})}},\n{key:\"getCellMetadata\",value:function(a){return this._cellMetadata[a.index]}},{key:\"getSections\",value:function(a){var b=a.x,c=a.y,d=Math.floor((b+a.width-1)/this._sectionSize),e=Math.floor(c/this._sectionSize);a=Math.floor((c+a.height-1)/this._sectionSize);c=[];for(b=Math.floor(b/this._sectionSize);b<=d;b++)for(var f=e;f<=a;f++){var h=b+\".\"+f;this._sections[h]||(this._sections[h]=new p.default({height:this._sectionSize,width:this._sectionSize,x:b*this._sectionSize,y:f*this._sectionSize}));c.push(this._sections[h])}return c}},\n{key:\"getTotalSectionCount\",value:function(){return(0,k.default)(this._sections).length}},{key:\"toString\",value:function(){var a=this;return(0,k.default)(this._sections).map(function(b){return a._sections[b].toString()})}},{key:\"registerCell\",value:function(a){var b=a.cellMetadatum,c=a.index;this._cellMetadata[c]=b;this.getSections(b).forEach(function(a){return a.addCellIndex({index:c})})}}]);return a}();c.default=a}","~:source","shadow$provide[\"module$node_modules$react_virtualized$dist$commonjs$Collection$SectionManager\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _Section = require('./Section');\n\nvar _Section2 = _interopRequireDefault(_Section);\n\nvar _types = require('./types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SECTION_SIZE = 100; /**\n                         * Window Sections are used to group nearby cells.\n                         * This enables us to more quickly determine which cells to display in a given region of the Window.\n                         * \n                         */\n\n/**\n * Contains 0 to many Sections.\n * Grows (and adds Sections) dynamically as cells are registered.\n * Automatically adds cells to the appropriate Section(s).\n */\nvar SectionManager = function () {\n  function SectionManager() {\n    var sectionSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SECTION_SIZE;\n    (0, _classCallCheck3.default)(this, SectionManager);\n\n    this._sectionSize = sectionSize;\n\n    this._cellMetadata = [];\n    this._sections = {};\n  }\n\n  /**\n   * Gets all cell indices contained in the specified region.\n   * A region may encompass 1 or more Sections.\n   */\n\n\n  (0, _createClass3.default)(SectionManager, [{\n    key: 'getCellIndices',\n    value: function getCellIndices(_ref) {\n      var height = _ref.height,\n          width = _ref.width,\n          x = _ref.x,\n          y = _ref.y;\n\n      var indices = {};\n\n      this.getSections({ height: height, width: width, x: x, y: y }).forEach(function (section) {\n        return section.getCellIndices().forEach(function (index) {\n          indices[index] = index;\n        });\n      });\n\n      // Object keys are strings; this function returns numbers\n      return (0, _keys2.default)(indices).map(function (index) {\n        return indices[index];\n      });\n    }\n\n    /** Get size and position information for the cell specified. */\n\n  }, {\n    key: 'getCellMetadata',\n    value: function getCellMetadata(_ref2) {\n      var index = _ref2.index;\n\n      return this._cellMetadata[index];\n    }\n\n    /** Get all Sections overlapping the specified region. */\n\n  }, {\n    key: 'getSections',\n    value: function getSections(_ref3) {\n      var height = _ref3.height,\n          width = _ref3.width,\n          x = _ref3.x,\n          y = _ref3.y;\n\n      var sectionXStart = Math.floor(x / this._sectionSize);\n      var sectionXStop = Math.floor((x + width - 1) / this._sectionSize);\n      var sectionYStart = Math.floor(y / this._sectionSize);\n      var sectionYStop = Math.floor((y + height - 1) / this._sectionSize);\n\n      var sections = [];\n\n      for (var sectionX = sectionXStart; sectionX <= sectionXStop; sectionX++) {\n        for (var sectionY = sectionYStart; sectionY <= sectionYStop; sectionY++) {\n          var key = sectionX + '.' + sectionY;\n\n          if (!this._sections[key]) {\n            this._sections[key] = new _Section2.default({\n              height: this._sectionSize,\n              width: this._sectionSize,\n              x: sectionX * this._sectionSize,\n              y: sectionY * this._sectionSize\n            });\n          }\n\n          sections.push(this._sections[key]);\n        }\n      }\n\n      return sections;\n    }\n\n    /** Total number of Sections based on the currently registered cells. */\n\n  }, {\n    key: 'getTotalSectionCount',\n    value: function getTotalSectionCount() {\n      return (0, _keys2.default)(this._sections).length;\n    }\n\n    /** Intended for debugger/test purposes only */\n\n  }, {\n    key: 'toString',\n    value: function toString() {\n      var _this = this;\n\n      return (0, _keys2.default)(this._sections).map(function (index) {\n        return _this._sections[index].toString();\n      });\n    }\n\n    /** Adds a cell to the appropriate Sections and registers it metadata for later retrievable. */\n\n  }, {\n    key: 'registerCell',\n    value: function registerCell(_ref4) {\n      var cellMetadatum = _ref4.cellMetadatum,\n          index = _ref4.index;\n\n      this._cellMetadata[index] = cellMetadatum;\n\n      this.getSections(cellMetadatum).forEach(function (section) {\n        return section.addCellIndex({ index: index });\n      });\n    }\n  }]);\n  return SectionManager;\n}();\n\nexports.default = SectionManager;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react_virtualized$dist$commonjs$Collection$types","~$module$node_modules$react_virtualized$dist$commonjs$Collection$Section","~$shadow.js","~$module$node_modules$babel_runtime$core_js$object$keys","~$module$node_modules$babel_runtime$helpers$classCallCheck","~$module$node_modules$babel_runtime$helpers$createClass"]],"~:properties",["^5",["width","index","height","_cellMetadata","_sections","key","x","__esModule","value","y","_sectionSize","default"]],"~:compiled-at",1537815743271,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_virtualized$dist$commonjs$Collection$SectionManager.js\",\n\"lineCount\":4,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/react-virtualized/dist/commonjs/Collection/SectionManager.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_virtualized$dist$commonjs$Collection$SectionManager\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n'use strict';\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _keys = require('babel-runtime/core-js/object/keys');\\n\\nvar _keys2 = _interopRequireDefault(_keys);\\n\\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\\n\\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\\n\\nvar _createClass2 = require('babel-runtime/helpers/createClass');\\n\\nvar _createClass3 = _interopRequireDefault(_createClass2);\\n\\nvar _Section = require('./Section');\\n\\nvar _Section2 = _interopRequireDefault(_Section);\\n\\nvar _types = require('./types');\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar SECTION_SIZE = 100; /**\\n                         * Window Sections are used to group nearby cells.\\n                         * This enables us to more quickly determine which cells to display in a given region of the Window.\\n                         * \\n                         */\\n\\n/**\\n * Contains 0 to many Sections.\\n * Grows (and adds Sections) dynamically as cells are registered.\\n * Automatically adds cells to the appropriate Section(s).\\n */\\nvar SectionManager = function () {\\n  function SectionManager() {\\n    var sectionSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SECTION_SIZE;\\n    (0, _classCallCheck3.default)(this, SectionManager);\\n\\n    this._sectionSize = sectionSize;\\n\\n    this._cellMetadata = [];\\n    this._sections = {};\\n  }\\n\\n  /**\\n   * Gets all cell indices contained in the specified region.\\n   * A region may encompass 1 or more Sections.\\n   */\\n\\n\\n  (0, _createClass3.default)(SectionManager, [{\\n    key: 'getCellIndices',\\n    value: function getCellIndices(_ref) {\\n      var height = _ref.height,\\n          width = _ref.width,\\n          x = _ref.x,\\n          y = _ref.y;\\n\\n      var indices = {};\\n\\n      this.getSections({ height: height, width: width, x: x, y: y }).forEach(function (section) {\\n        return section.getCellIndices().forEach(function (index) {\\n          indices[index] = index;\\n        });\\n      });\\n\\n      // Object keys are strings; this function returns numbers\\n      return (0, _keys2.default)(indices).map(function (index) {\\n        return indices[index];\\n      });\\n    }\\n\\n    /** Get size and position information for the cell specified. */\\n\\n  }, {\\n    key: 'getCellMetadata',\\n    value: function getCellMetadata(_ref2) {\\n      var index = _ref2.index;\\n\\n      return this._cellMetadata[index];\\n    }\\n\\n    /** Get all Sections overlapping the specified region. */\\n\\n  }, {\\n    key: 'getSections',\\n    value: function getSections(_ref3) {\\n      var height = _ref3.height,\\n          width = _ref3.width,\\n          x = _ref3.x,\\n          y = _ref3.y;\\n\\n      var sectionXStart = Math.floor(x / this._sectionSize);\\n      var sectionXStop = Math.floor((x + width - 1) / this._sectionSize);\\n      var sectionYStart = Math.floor(y / this._sectionSize);\\n      var sectionYStop = Math.floor((y + height - 1) / this._sectionSize);\\n\\n      var sections = [];\\n\\n      for (var sectionX = sectionXStart; sectionX <= sectionXStop; sectionX++) {\\n        for (var sectionY = sectionYStart; sectionY <= sectionYStop; sectionY++) {\\n          var key = sectionX + '.' + sectionY;\\n\\n          if (!this._sections[key]) {\\n            this._sections[key] = new _Section2.default({\\n              height: this._sectionSize,\\n              width: this._sectionSize,\\n              x: sectionX * this._sectionSize,\\n              y: sectionY * this._sectionSize\\n            });\\n          }\\n\\n          sections.push(this._sections[key]);\\n        }\\n      }\\n\\n      return sections;\\n    }\\n\\n    /** Total number of Sections based on the currently registered cells. */\\n\\n  }, {\\n    key: 'getTotalSectionCount',\\n    value: function getTotalSectionCount() {\\n      return (0, _keys2.default)(this._sections).length;\\n    }\\n\\n    /** Intended for debugger/test purposes only */\\n\\n  }, {\\n    key: 'toString',\\n    value: function toString() {\\n      var _this = this;\\n\\n      return (0, _keys2.default)(this._sections).map(function (index) {\\n        return _this._sections[index].toString();\\n      });\\n    }\\n\\n    /** Adds a cell to the appropriate Sections and registers it metadata for later retrievable. */\\n\\n  }, {\\n    key: 'registerCell',\\n    value: function registerCell(_ref4) {\\n      var cellMetadatum = _ref4.cellMetadatum,\\n          index = _ref4.index;\\n\\n      this._cellMetadata[index] = cellMetadatum;\\n\\n      this.getSections(cellMetadatum).forEach(function (section) {\\n        return section.addCellIndex({ index: index });\\n      });\\n    }\\n  }]);\\n  return SectionManager;\\n}();\\n\\nexports.default = SectionManager;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"default\",\"Object\",\"defineProperty\",\"value\",\"_keys\",\"_keys2\",\"_classCallCheck2\",\"_classCallCheck3\",\"_createClass2\",\"_createClass3\",\"_Section\",\"_Section2\",\"SectionManager\",\"sectionSize\",\"arguments\",\"length\",\"undefined\",\"SECTION_SIZE\",\"_sectionSize\",\"_cellMetadata\",\"_sections\",\"key\",\"getCellIndices\",\"_ref\",\"indices\",\"getSections\",\"height\",\"width\",\"x\",\"y\",\"forEach\",\"section\",\"index\",\"map\",\"getCellMetadata\",\"_ref2\",\"_ref3\",\"sectionXStop\",\"Math\",\"floor\",\"sectionYStart\",\"sectionYStop\",\"sections\",\"sectionX\",\"sectionXStart\",\"sectionY\",\"push\",\"getTotalSectionCount\",\"toString\",\"_this\",\"registerCell\",\"_ref4\",\"cellMetadatum\",\"addCellIndex\"]\n}\n"]