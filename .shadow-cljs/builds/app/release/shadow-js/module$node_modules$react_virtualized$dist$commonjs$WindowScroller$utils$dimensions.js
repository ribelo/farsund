["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-virtualized/dist/commonjs/WindowScroller/utils/dimensions.js"],"~:js","shadow$provide.module$node_modules$react_virtualized$dist$commonjs$WindowScroller$utils$dimensions=function(b,e,a,f,c,m){function d(a){return a===window&&document.documentElement?{top:\"scrollY\"in window?window.scrollY:document.documentElement.scrollTop,left:\"scrollX\"in window?window.scrollX:document.documentElement.scrollLeft}:{top:a.scrollTop,left:a.scrollLeft}}Object.defineProperty(c,\"__esModule\",{value:!0});c.getDimensions=function(a,b){return a?a===window?(b=window,a=b.innerHeight,b=b.innerWidth,\n{height:\"number\"===typeof a?a:0,width:\"number\"===typeof b?b:0}):a.getBoundingClientRect():{height:b.serverHeight,width:b.serverWidth}};c.getPositionOffset=function(a,b){if(b===window&&document.documentElement){var c=document.documentElement;a=a.getBoundingClientRect();c=c.getBoundingClientRect();return{top:a.top-c.top,left:a.left-c.left}}c=d(b);a=a.getBoundingClientRect();b=b.getBoundingClientRect();return{top:a.top+c.top-b.top,left:a.left+c.left-b.left}};c.getScrollOffset=d}","~:source","shadow$provide[\"module$node_modules$react_virtualized$dist$commonjs$WindowScroller$utils$dimensions\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDimensions = getDimensions;\nexports.getPositionOffset = getPositionOffset;\nexports.getScrollOffset = getScrollOffset;\n\n\n/**\n * Gets the dimensions of the element, accounting for API differences between\n * `window` and other DOM elements.\n */\n\nvar isWindow = function isWindow(element) {\n  return element === window;\n};\n\n// TODO Move this into WindowScroller and import from there\n\n\nvar getBoundingBox = function getBoundingBox(element) {\n  return element.getBoundingClientRect();\n};\n\nfunction getDimensions(scrollElement, props) {\n  if (!scrollElement) {\n    return {\n      height: props.serverHeight,\n      width: props.serverWidth\n    };\n  } else if (isWindow(scrollElement)) {\n    var _window = window,\n        innerHeight = _window.innerHeight,\n        innerWidth = _window.innerWidth;\n\n    return {\n      height: typeof innerHeight === 'number' ? innerHeight : 0,\n      width: typeof innerWidth === 'number' ? innerWidth : 0\n    };\n  } else {\n    return getBoundingBox(scrollElement);\n  }\n}\n\n/**\n * Gets the vertical and horizontal position of an element within its scroll container.\n * Elements that have been “scrolled past” return negative values.\n * Handles edge-case where a user is navigating back (history) from an already-scrolled page.\n * In this case the body’s top or left position will be a negative number and this element’s top or left will be increased (by that amount).\n */\nfunction getPositionOffset(element, container) {\n  if (isWindow(container) && document.documentElement) {\n    var containerElement = document.documentElement;\n    var elementRect = getBoundingBox(element);\n    var containerRect = getBoundingBox(containerElement);\n    return {\n      top: elementRect.top - containerRect.top,\n      left: elementRect.left - containerRect.left\n    };\n  } else {\n    var scrollOffset = getScrollOffset(container);\n    var _elementRect = getBoundingBox(element);\n    var _containerRect = getBoundingBox(container);\n    return {\n      top: _elementRect.top + scrollOffset.top - _containerRect.top,\n      left: _elementRect.left + scrollOffset.left - _containerRect.left\n    };\n  }\n}\n\n/**\n * Gets the vertical and horizontal scroll amount of the element, accounting for IE compatibility\n * and API differences between `window` and other DOM elements.\n */\nfunction getScrollOffset(element) {\n  if (isWindow(element) && document.documentElement) {\n    return {\n      top: 'scrollY' in window ? window.scrollY : document.documentElement.scrollTop,\n      left: 'scrollX' in window ? window.scrollX : document.documentElement.scrollLeft\n    };\n  } else {\n    return {\n      top: element.scrollTop,\n      left: element.scrollLeft\n    };\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["getScrollOffset","width","top","getDimensions","height","__esModule","value","getPositionOffset","left"]],"~:compiled-at",1537815743292,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_virtualized$dist$commonjs$WindowScroller$utils$dimensions.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,oFAAA,CAAwG,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAwBC,CAAxB,CAA+BC,CAA/B,CAAuCC,CAAvC,CAAqD,CA6ErKC,QAASA,EAAe,CAACC,CAAD,CAAU,CAChC,MAAaA,EAAb,GA7DmBC,MA6DnB,EAAyBC,QAAAC,gBAAzB,CACS,CACLC,IAAK,SAAA,EAAaH,OAAb,CAAsBA,MAAAI,QAAtB,CAAuCH,QAAAC,gBAAAG,UADvC,CAELC,KAAM,SAAA,EAAaN,OAAb,CAAsBA,MAAAO,QAAtB,CAAuCN,QAAAC,gBAAAM,WAFxC,CADT,CAMS,CACLL,IAAKJ,CAAAM,UADA,CAELC,KAAMP,CAAAS,WAFD,CAPuB,CA1ElCC,MAAAC,eAAA,CAAsBd,CAAtB,CAA+B,YAA/B,CAA6C,CAC3Ce,MAAO,CAAA,CADoC,CAA7C,CAGAf,EAAAgB,cAAA,CAqBAA,QAAsB,CAACC,CAAD,CAAgBC,CAAhB,CAAuB,CAC3C,MAAKD,EAAL,CAKoBA,CAAb,GAhBYb,MAgBZ,EACDe,CAIG,CAJOf,MAIP,CAHHgB,CAGG,CAHWD,CAAAC,YAGX,CAFHC,CAEG,CAFUF,CAAAE,WAEV;AAAA,CACLC,OAA+B,QAAvB,GAAA,MAAOF,EAAP,CAAkCA,CAAlC,CAAgD,CADnD,CAELG,MAA6B,QAAtB,GAAA,MAAOF,EAAP,CAAiCA,CAAjC,CAA8C,CAFhD,CALF,EAUiBJ,CAnBjBO,sBAAA,EAIP,CACS,CACLF,OAAQJ,CAAAO,aADH,CAELF,MAAOL,CAAAQ,YAFF,CAFkC,CApB7C1B,EAAA2B,kBAAA,CA8CAA,QAA0B,CAACxB,CAAD,CAAUyB,CAAV,CAAqB,CAC7C,GAAaA,CAAb,GArCmBxB,MAqCnB,EAA2BC,QAAAC,gBAA3B,CAAqD,CACnD,IAAIuB,EAAmBxB,QAAAC,gBACnBwB,EAAAA,CAA6B3B,CAhC5BqB,sBAAA,EAiCDO,EAAAA,CAA+BF,CAjC9BL,sBAAA,EAkCL,OAAO,CACLjB,IAAKuB,CAAAvB,IAALA,CAAuBwB,CAAAxB,IADlB,CAELG,KAAMoB,CAAApB,KAANA,CAAyBqB,CAAArB,KAFpB,CAJ4C,CAS/CsB,CAAAA,CAAe9B,CAAA,CAAgB0B,CAAhB,CACfK,EAAAA,CAA8B9B,CAxC7BqB,sBAAA,EAyCDU,EAAAA,CAAgCN,CAzC/BJ,sBAAA,EA0CL,OAAO,CACLjB,IAAK0B,CAAA1B,IAALA,CAAwByB,CAAAzB,IAAxBA,CAA2C2B,CAAA3B,IADtC,CAELG,KAAMuB,CAAAvB,KAANA,CAA0BsB,CAAAtB,KAA1BA,CAA8CwB,CAAAxB,KAFzC,CAboC,CA7C/CV,EAAAE,gBAAA,CAA0BA,CAR2I;\",\n\"sources\":[\"node_modules/react-virtualized/dist/commonjs/WindowScroller/utils/dimensions.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_virtualized$dist$commonjs$WindowScroller$utils$dimensions\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n'use strict';\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.getDimensions = getDimensions;\\nexports.getPositionOffset = getPositionOffset;\\nexports.getScrollOffset = getScrollOffset;\\n\\n\\n/**\\n * Gets the dimensions of the element, accounting for API differences between\\n * `window` and other DOM elements.\\n */\\n\\nvar isWindow = function isWindow(element) {\\n  return element === window;\\n};\\n\\n// TODO Move this into WindowScroller and import from there\\n\\n\\nvar getBoundingBox = function getBoundingBox(element) {\\n  return element.getBoundingClientRect();\\n};\\n\\nfunction getDimensions(scrollElement, props) {\\n  if (!scrollElement) {\\n    return {\\n      height: props.serverHeight,\\n      width: props.serverWidth\\n    };\\n  } else if (isWindow(scrollElement)) {\\n    var _window = window,\\n        innerHeight = _window.innerHeight,\\n        innerWidth = _window.innerWidth;\\n\\n    return {\\n      height: typeof innerHeight === 'number' ? innerHeight : 0,\\n      width: typeof innerWidth === 'number' ? innerWidth : 0\\n    };\\n  } else {\\n    return getBoundingBox(scrollElement);\\n  }\\n}\\n\\n/**\\n * Gets the vertical and horizontal position of an element within its scroll container.\\n * Elements that have been \\u201cscrolled past\\u201d return negative values.\\n * Handles edge-case where a user is navigating back (history) from an already-scrolled page.\\n * In this case the body\\u2019s top or left position will be a negative number and this element\\u2019s top or left will be increased (by that amount).\\n */\\nfunction getPositionOffset(element, container) {\\n  if (isWindow(container) && document.documentElement) {\\n    var containerElement = document.documentElement;\\n    var elementRect = getBoundingBox(element);\\n    var containerRect = getBoundingBox(containerElement);\\n    return {\\n      top: elementRect.top - containerRect.top,\\n      left: elementRect.left - containerRect.left\\n    };\\n  } else {\\n    var scrollOffset = getScrollOffset(container);\\n    var _elementRect = getBoundingBox(element);\\n    var _containerRect = getBoundingBox(container);\\n    return {\\n      top: _elementRect.top + scrollOffset.top - _containerRect.top,\\n      left: _elementRect.left + scrollOffset.left - _containerRect.left\\n    };\\n  }\\n}\\n\\n/**\\n * Gets the vertical and horizontal scroll amount of the element, accounting for IE compatibility\\n * and API differences between `window` and other DOM elements.\\n */\\nfunction getScrollOffset(element) {\\n  if (isWindow(element) && document.documentElement) {\\n    return {\\n      top: 'scrollY' in window ? window.scrollY : document.documentElement.scrollTop,\\n      left: 'scrollX' in window ? window.scrollX : document.documentElement.scrollLeft\\n    };\\n  } else {\\n    return {\\n      top: element.scrollTop,\\n      left: element.scrollLeft\\n    };\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"getScrollOffset\",\"element\",\"window\",\"document\",\"documentElement\",\"top\",\"scrollY\",\"scrollTop\",\"left\",\"scrollX\",\"scrollLeft\",\"Object\",\"defineProperty\",\"value\",\"getDimensions\",\"scrollElement\",\"props\",\"_window\",\"innerHeight\",\"innerWidth\",\"height\",\"width\",\"getBoundingClientRect\",\"serverHeight\",\"serverWidth\",\"getPositionOffset\",\"container\",\"containerElement\",\"elementRect\",\"containerRect\",\"scrollOffset\",\"_elementRect\",\"_containerRect\"]\n}\n"]