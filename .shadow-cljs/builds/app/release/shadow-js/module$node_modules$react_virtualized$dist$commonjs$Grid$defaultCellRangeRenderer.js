["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-virtualized/dist/commonjs/Grid/defaultCellRangeRenderer.js"],"~:js","shadow$provide.module$node_modules$react_virtualized$dist$commonjs$Grid$defaultCellRangeRenderer=function(b,e,a,f,c,m){Object.defineProperty(c,\"__esModule\",{value:!0});c.default=function(a){var b=a.cellCache,c=a.cellRenderer,d=a.columnSizeAndPositionManager,e=a.columnStartIndex,f=a.columnStopIndex,m=a.deferredMeasurementCache,g=a.horizontalOffsetAdjustment,n=a.isScrolling,v=a.isScrollingOptOut,y=a.parent,w=a.rowSizeAndPositionManager,x=a.rowStartIndex,u=a.rowStopIndex,t=a.styleCache,z=a.verticalOffsetAdjustment,\nA=a.visibleColumnIndices;a=a.visibleRowIndices;var B=[],E=d.areOffsetsAdjusted()||w.areOffsetsAdjusted();for(E=!n&&!E;x<=u;x++)for(var D=w.getSizeAndPositionOfCell(x),F=e;F<=f;F++){var C=d.getSizeAndPositionOfCell(F),L=F>=A.start&&F<=A.stop&&x>=a.start&&x<=a.stop,G=x+\"-\"+F;E&&t[G]?C=t[G]:m&&!m.has(x,F)?C={height:\"auto\",left:0,position:\"absolute\",top:0,width:\"auto\"}:(C={height:D.size,left:C.offset+g,position:\"absolute\",top:D.offset+z,width:C.size},t[G]=C);L={columnIndex:F,isScrolling:n,isVisible:L,\nkey:G,parent:y,rowIndex:x,style:C};!v&&!n||g||z?G=c(L):(b[G]||(b[G]=c(L)),G=b[G]);null!=G&&!1!==G&&B.push(G)}return B};a(\"module$node_modules$react_virtualized$dist$commonjs$Grid$types\")}","~:source","shadow$provide[\"module$node_modules$react_virtualized$dist$commonjs$Grid$defaultCellRangeRenderer\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = defaultCellRangeRenderer;\n\nvar _types = require('./types');\n\n/**\n * Default implementation of cellRangeRenderer used by Grid.\n * This renderer supports cell-caching while the user is scrolling.\n */\n\nfunction defaultCellRangeRenderer(_ref) {\n  var cellCache = _ref.cellCache,\n      cellRenderer = _ref.cellRenderer,\n      columnSizeAndPositionManager = _ref.columnSizeAndPositionManager,\n      columnStartIndex = _ref.columnStartIndex,\n      columnStopIndex = _ref.columnStopIndex,\n      deferredMeasurementCache = _ref.deferredMeasurementCache,\n      horizontalOffsetAdjustment = _ref.horizontalOffsetAdjustment,\n      isScrolling = _ref.isScrolling,\n      isScrollingOptOut = _ref.isScrollingOptOut,\n      parent = _ref.parent,\n      rowSizeAndPositionManager = _ref.rowSizeAndPositionManager,\n      rowStartIndex = _ref.rowStartIndex,\n      rowStopIndex = _ref.rowStopIndex,\n      styleCache = _ref.styleCache,\n      verticalOffsetAdjustment = _ref.verticalOffsetAdjustment,\n      visibleColumnIndices = _ref.visibleColumnIndices,\n      visibleRowIndices = _ref.visibleRowIndices;\n\n  var renderedCells = [];\n\n  // Browsers have native size limits for elements (eg Chrome 33M pixels, IE 1.5M pixes).\n  // User cannot scroll beyond these size limitations.\n  // In order to work around this, ScalingCellSizeAndPositionManager compresses offsets.\n  // We should never cache styles for compressed offsets though as this can lead to bugs.\n  // See issue #576 for more.\n  var areOffsetsAdjusted = columnSizeAndPositionManager.areOffsetsAdjusted() || rowSizeAndPositionManager.areOffsetsAdjusted();\n\n  var canCacheStyle = !isScrolling && !areOffsetsAdjusted;\n\n  for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\n    var rowDatum = rowSizeAndPositionManager.getSizeAndPositionOfCell(rowIndex);\n\n    for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\n      var columnDatum = columnSizeAndPositionManager.getSizeAndPositionOfCell(columnIndex);\n      var isVisible = columnIndex >= visibleColumnIndices.start && columnIndex <= visibleColumnIndices.stop && rowIndex >= visibleRowIndices.start && rowIndex <= visibleRowIndices.stop;\n      var key = rowIndex + '-' + columnIndex;\n      var style = void 0;\n\n      // Cache style objects so shallow-compare doesn't re-render unnecessarily.\n      if (canCacheStyle && styleCache[key]) {\n        style = styleCache[key];\n      } else {\n        // In deferred mode, cells will be initially rendered before we know their size.\n        // Don't interfere with CellMeasurer's measurements by setting an invalid size.\n        if (deferredMeasurementCache && !deferredMeasurementCache.has(rowIndex, columnIndex)) {\n          // Position not-yet-measured cells at top/left 0,0,\n          // And give them width/height of 'auto' so they can grow larger than the parent Grid if necessary.\n          // Positioning them further to the right/bottom influences their measured size.\n          style = {\n            height: 'auto',\n            left: 0,\n            position: 'absolute',\n            top: 0,\n            width: 'auto'\n          };\n        } else {\n          style = {\n            height: rowDatum.size,\n            left: columnDatum.offset + horizontalOffsetAdjustment,\n            position: 'absolute',\n            top: rowDatum.offset + verticalOffsetAdjustment,\n            width: columnDatum.size\n          };\n\n          styleCache[key] = style;\n        }\n      }\n\n      var cellRendererParams = {\n        columnIndex: columnIndex,\n        isScrolling: isScrolling,\n        isVisible: isVisible,\n        key: key,\n        parent: parent,\n        rowIndex: rowIndex,\n        style: style\n      };\n\n      var renderedCell = void 0;\n\n      // Avoid re-creating cells while scrolling.\n      // This can lead to the same cell being created many times and can cause performance issues for \"heavy\" cells.\n      // If a scroll is in progress- cache and reuse cells.\n      // This cache will be thrown away once scrolling completes.\n      // However if we are scaling scroll positions and sizes, we should also avoid caching.\n      // This is because the offset changes slightly as scroll position changes and caching leads to stale values.\n      // For more info refer to issue #395\n      //\n      // If isScrollingOptOut is specified, we always cache cells.\n      // For more info refer to issue #1028\n      if ((isScrollingOptOut || isScrolling) && !horizontalOffsetAdjustment && !verticalOffsetAdjustment) {\n        if (!cellCache[key]) {\n          cellCache[key] = cellRenderer(cellRendererParams);\n        }\n\n        renderedCell = cellCache[key];\n\n        // If the user is no longer scrolling, don't cache cells.\n        // This makes dynamic cell content difficult for users and would also lead to a heavier memory footprint.\n      } else {\n        renderedCell = cellRenderer(cellRendererParams);\n      }\n\n      if (renderedCell == null || renderedCell === false) {\n        continue;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        warnAboutMissingStyle(parent, renderedCell);\n      }\n\n      renderedCells.push(renderedCell);\n    }\n  }\n\n  return renderedCells;\n}\n\nfunction warnAboutMissingStyle(parent, renderedCell) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (renderedCell) {\n      // If the direct child is a CellMeasurer, then we should check its child\n      // See issue #611\n      if (renderedCell.type && renderedCell.type.__internalCellMeasurerFlag) {\n        renderedCell = renderedCell.props.children;\n      }\n\n      if (renderedCell && renderedCell.props && renderedCell.props.style === undefined && parent.__warnedAboutMissingStyle !== true) {\n        parent.__warnedAboutMissingStyle = true;\n\n        console.warn('Rendered cell should include style property for positioning.');\n      }\n    }\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react_virtualized$dist$commonjs$Grid$types","~$shadow.js"]],"~:properties",["^5",["columnIndex","width","top","height","key","parent","__esModule","isScrolling","position","style","value","isVisible","rowIndex","default","left"]],"~:compiled-at",1537815743251,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_virtualized$dist$commonjs$Grid$defaultCellRangeRenderer.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/react-virtualized/dist/commonjs/Grid/defaultCellRangeRenderer.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_virtualized$dist$commonjs$Grid$defaultCellRangeRenderer\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n'use strict';\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = defaultCellRangeRenderer;\\n\\nvar _types = require('./types');\\n\\n/**\\n * Default implementation of cellRangeRenderer used by Grid.\\n * This renderer supports cell-caching while the user is scrolling.\\n */\\n\\nfunction defaultCellRangeRenderer(_ref) {\\n  var cellCache = _ref.cellCache,\\n      cellRenderer = _ref.cellRenderer,\\n      columnSizeAndPositionManager = _ref.columnSizeAndPositionManager,\\n      columnStartIndex = _ref.columnStartIndex,\\n      columnStopIndex = _ref.columnStopIndex,\\n      deferredMeasurementCache = _ref.deferredMeasurementCache,\\n      horizontalOffsetAdjustment = _ref.horizontalOffsetAdjustment,\\n      isScrolling = _ref.isScrolling,\\n      isScrollingOptOut = _ref.isScrollingOptOut,\\n      parent = _ref.parent,\\n      rowSizeAndPositionManager = _ref.rowSizeAndPositionManager,\\n      rowStartIndex = _ref.rowStartIndex,\\n      rowStopIndex = _ref.rowStopIndex,\\n      styleCache = _ref.styleCache,\\n      verticalOffsetAdjustment = _ref.verticalOffsetAdjustment,\\n      visibleColumnIndices = _ref.visibleColumnIndices,\\n      visibleRowIndices = _ref.visibleRowIndices;\\n\\n  var renderedCells = [];\\n\\n  // Browsers have native size limits for elements (eg Chrome 33M pixels, IE 1.5M pixes).\\n  // User cannot scroll beyond these size limitations.\\n  // In order to work around this, ScalingCellSizeAndPositionManager compresses offsets.\\n  // We should never cache styles for compressed offsets though as this can lead to bugs.\\n  // See issue #576 for more.\\n  var areOffsetsAdjusted = columnSizeAndPositionManager.areOffsetsAdjusted() || rowSizeAndPositionManager.areOffsetsAdjusted();\\n\\n  var canCacheStyle = !isScrolling && !areOffsetsAdjusted;\\n\\n  for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\\n    var rowDatum = rowSizeAndPositionManager.getSizeAndPositionOfCell(rowIndex);\\n\\n    for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\\n      var columnDatum = columnSizeAndPositionManager.getSizeAndPositionOfCell(columnIndex);\\n      var isVisible = columnIndex >= visibleColumnIndices.start && columnIndex <= visibleColumnIndices.stop && rowIndex >= visibleRowIndices.start && rowIndex <= visibleRowIndices.stop;\\n      var key = rowIndex + '-' + columnIndex;\\n      var style = void 0;\\n\\n      // Cache style objects so shallow-compare doesn't re-render unnecessarily.\\n      if (canCacheStyle && styleCache[key]) {\\n        style = styleCache[key];\\n      } else {\\n        // In deferred mode, cells will be initially rendered before we know their size.\\n        // Don't interfere with CellMeasurer's measurements by setting an invalid size.\\n        if (deferredMeasurementCache && !deferredMeasurementCache.has(rowIndex, columnIndex)) {\\n          // Position not-yet-measured cells at top/left 0,0,\\n          // And give them width/height of 'auto' so they can grow larger than the parent Grid if necessary.\\n          // Positioning them further to the right/bottom influences their measured size.\\n          style = {\\n            height: 'auto',\\n            left: 0,\\n            position: 'absolute',\\n            top: 0,\\n            width: 'auto'\\n          };\\n        } else {\\n          style = {\\n            height: rowDatum.size,\\n            left: columnDatum.offset + horizontalOffsetAdjustment,\\n            position: 'absolute',\\n            top: rowDatum.offset + verticalOffsetAdjustment,\\n            width: columnDatum.size\\n          };\\n\\n          styleCache[key] = style;\\n        }\\n      }\\n\\n      var cellRendererParams = {\\n        columnIndex: columnIndex,\\n        isScrolling: isScrolling,\\n        isVisible: isVisible,\\n        key: key,\\n        parent: parent,\\n        rowIndex: rowIndex,\\n        style: style\\n      };\\n\\n      var renderedCell = void 0;\\n\\n      // Avoid re-creating cells while scrolling.\\n      // This can lead to the same cell being created many times and can cause performance issues for \\\"heavy\\\" cells.\\n      // If a scroll is in progress- cache and reuse cells.\\n      // This cache will be thrown away once scrolling completes.\\n      // However if we are scaling scroll positions and sizes, we should also avoid caching.\\n      // This is because the offset changes slightly as scroll position changes and caching leads to stale values.\\n      // For more info refer to issue #395\\n      //\\n      // If isScrollingOptOut is specified, we always cache cells.\\n      // For more info refer to issue #1028\\n      if ((isScrollingOptOut || isScrolling) && !horizontalOffsetAdjustment && !verticalOffsetAdjustment) {\\n        if (!cellCache[key]) {\\n          cellCache[key] = cellRenderer(cellRendererParams);\\n        }\\n\\n        renderedCell = cellCache[key];\\n\\n        // If the user is no longer scrolling, don't cache cells.\\n        // This makes dynamic cell content difficult for users and would also lead to a heavier memory footprint.\\n      } else {\\n        renderedCell = cellRenderer(cellRendererParams);\\n      }\\n\\n      if (renderedCell == null || renderedCell === false) {\\n        continue;\\n      }\\n\\n      if (process.env.NODE_ENV !== 'production') {\\n        warnAboutMissingStyle(parent, renderedCell);\\n      }\\n\\n      renderedCells.push(renderedCell);\\n    }\\n  }\\n\\n  return renderedCells;\\n}\\n\\nfunction warnAboutMissingStyle(parent, renderedCell) {\\n  if (process.env.NODE_ENV !== 'production') {\\n    if (renderedCell) {\\n      // If the direct child is a CellMeasurer, then we should check its child\\n      // See issue #611\\n      if (renderedCell.type && renderedCell.type.__internalCellMeasurerFlag) {\\n        renderedCell = renderedCell.props.children;\\n      }\\n\\n      if (renderedCell && renderedCell.props && renderedCell.props.style === undefined && parent.__warnedAboutMissingStyle !== true) {\\n        parent.__warnedAboutMissingStyle = true;\\n\\n        console.warn('Rendered cell should include style property for positioning.');\\n      }\\n    }\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"Object\",\"defineProperty\",\"value\",\"default\",\"defaultCellRangeRenderer\",\"_ref\",\"cellCache\",\"cellRenderer\",\"columnSizeAndPositionManager\",\"columnStartIndex\",\"columnStopIndex\",\"deferredMeasurementCache\",\"horizontalOffsetAdjustment\",\"isScrolling\",\"isScrollingOptOut\",\"parent\",\"rowSizeAndPositionManager\",\"rowStartIndex\",\"rowStopIndex\",\"styleCache\",\"verticalOffsetAdjustment\",\"visibleColumnIndices\",\"visibleRowIndices\",\"renderedCells\",\"areOffsetsAdjusted\",\"canCacheStyle\",\"rowIndex\",\"rowDatum\",\"getSizeAndPositionOfCell\",\"columnIndex\",\"columnDatum\",\"isVisible\",\"start\",\"stop\",\"key\",\"style\",\"has\",\"height\",\"left\",\"position\",\"top\",\"width\",\"size\",\"offset\",\"cellRendererParams\",\"renderedCell\",\"push\"]\n}\n"]