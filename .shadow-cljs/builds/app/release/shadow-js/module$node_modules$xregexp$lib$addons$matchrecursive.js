["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/xregexp/lib/addons/matchrecursive.js"],"~:js","shadow$provide.module$node_modules$xregexp$lib$addons$matchrecursive=function(b,e,a,f,c,m){Object.defineProperty(c,\"__esModule\",{value:!0});c.default=void 0;c.default=function(a){function b(a,b,c,d){return{name:a,value:b,start:c,end:d}}a.matchRecursive=function(c,d,e,f,k){f=f||\"\";k=k||{};var g=-1!==f.indexOf(\"g\"),h=-1!==f.indexOf(\"y\"),l=f.replace(/y/g,\"\"),q=k.escapeChar;k=k.valueNames;var p=[],m=0,r=0,t=0,z=0;d=a(d,l);e=a(e,l);if(q){if(1<q.length)throw Error(\"Cannot use more than one escape character\");\nq=a.escape(q);var A=new RegExp(\"(?:\".concat(q,\"[\\\\S\\\\s]|(?:(?!\").concat(a.union([d,e],\"\",{conjunction:\"or\"}).source,\")[^\").concat(q,\"])+)+\"),f.replace(/[^imu]+/g,\"\"))}for(;;){q&&(t+=(a.exec(c,A,t,\"sticky\")||[\"\"])[0].length);f=a.exec(c,d,t);l=a.exec(c,e,t);f&&l&&(f.index<=l.index?l=null:f=null);if(f||l)r=(f||l).index,t=r+(f||l)[0].length;else if(!m)break;if(h&&!m&&r>z)break;if(f){if(!m){var B=r;var E=t}++m}else if(l&&m){if(!--m&&(k?(k[0]&&B>z&&p.push(b(k[0],c.slice(z,B),z,B)),k[1]&&p.push(b(k[1],c.slice(B,\nE),B,E)),k[2]&&p.push(b(k[2],c.slice(E,r),E,r)),k[3]&&p.push(b(k[3],c.slice(r,t),r,t))):p.push(c.slice(E,r)),z=t,!g))break}else throw Error(\"Unbalanced delimiter found in string\");r===t&&++t}g&&!h&&k&&k[0]&&c.length>z&&p.push(b(k[0],c.slice(z),z,c.length));return p}};f.exports=c[\"default\"]}","~:source","shadow$provide[\"module$node_modules$xregexp$lib$addons$matchrecursive\"] = function(global,process,require,module,exports,shadow$shims) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*!\n * XRegExp.matchRecursive 4.2.0\n * <xregexp.com>\n * Steven Levithan (c) 2009-present MIT License\n */\nvar _default = function _default(XRegExp) {\n  /**\n   * Returns a match detail object composed of the provided values.\n   *\n   * @private\n   */\n  function row(name, value, start, end) {\n    return {\n      name: name,\n      value: value,\n      start: start,\n      end: end\n    };\n  }\n  /**\n   * Returns an array of match strings between outermost left and right delimiters, or an array of\n   * objects with detailed match parts and position data. An error is thrown if delimiters are\n   * unbalanced within the data.\n   *\n   * @memberOf XRegExp\n   * @param {String} str String to search.\n   * @param {String} left Left delimiter as an XRegExp pattern.\n   * @param {String} right Right delimiter as an XRegExp pattern.\n   * @param {String} [flags] Any native or XRegExp flags, used for the left and right delimiters.\n   * @param {Object} [options] Lets you specify `valueNames` and `escapeChar` options.\n   * @returns {Array} Array of matches, or an empty array.\n   * @example\n   *\n   * // Basic usage\n   * let str = '(t((e))s)t()(ing)';\n   * XRegExp.matchRecursive(str, '\\\\(', '\\\\)', 'g');\n   * // -> ['t((e))s', '', 'ing']\n   *\n   * // Extended information mode with valueNames\n   * str = 'Here is <div> <div>an</div></div> example';\n   * XRegExp.matchRecursive(str, '<div\\\\s*>', '</div>', 'gi', {\n   *   valueNames: ['between', 'left', 'match', 'right']\n   * });\n   * // -> [\n   * // {name: 'between', value: 'Here is ',       start: 0,  end: 8},\n   * // {name: 'left',    value: '<div>',          start: 8,  end: 13},\n   * // {name: 'match',   value: ' <div>an</div>', start: 13, end: 27},\n   * // {name: 'right',   value: '</div>',         start: 27, end: 33},\n   * // {name: 'between', value: ' example',       start: 33, end: 41}\n   * // ]\n   *\n   * // Omitting unneeded parts with null valueNames, and using escapeChar\n   * str = '...{1}.\\\\{{function(x,y){return {y:x}}}';\n   * XRegExp.matchRecursive(str, '{', '}', 'g', {\n   *   valueNames: ['literal', null, 'value', null],\n   *   escapeChar: '\\\\'\n   * });\n   * // -> [\n   * // {name: 'literal', value: '...',  start: 0, end: 3},\n   * // {name: 'value',   value: '1',    start: 4, end: 5},\n   * // {name: 'literal', value: '.\\\\{', start: 6, end: 9},\n   * // {name: 'value',   value: 'function(x,y){return {y:x}}', start: 10, end: 37}\n   * // ]\n   *\n   * // Sticky mode via flag y\n   * str = '<1><<<2>>><3>4<5>';\n   * XRegExp.matchRecursive(str, '<', '>', 'gy');\n   * // -> ['1', '<<2>>', '3']\n   */\n\n\n  XRegExp.matchRecursive = function (str, left, right, flags, options) {\n    flags = flags || '';\n    options = options || {};\n    var global = flags.indexOf('g') !== -1;\n    var sticky = flags.indexOf('y') !== -1; // Flag `y` is controlled internally\n\n    var basicFlags = flags.replace(/y/g, '');\n    var _options = options,\n        escapeChar = _options.escapeChar;\n    var vN = options.valueNames;\n    var output = [];\n    var openTokens = 0;\n    var delimStart = 0;\n    var delimEnd = 0;\n    var lastOuterEnd = 0;\n    var outerStart;\n    var innerStart;\n    var leftMatch;\n    var rightMatch;\n    var esc;\n    left = XRegExp(left, basicFlags);\n    right = XRegExp(right, basicFlags);\n\n    if (escapeChar) {\n      if (escapeChar.length > 1) {\n        throw new Error('Cannot use more than one escape character');\n      }\n\n      escapeChar = XRegExp.escape(escapeChar); // Example of concatenated `esc` regex:\n      // `escapeChar`: '%'\n      // `left`: '<'\n      // `right`: '>'\n      // Regex is: /(?:%[\\S\\s]|(?:(?!<|>)[^%])+)+/\n\n      esc = new RegExp(\"(?:\".concat(escapeChar, \"[\\\\S\\\\s]|(?:(?!\").concat( // Using `XRegExp.union` safely rewrites backreferences in `left` and `right`.\n      // Intentionally not passing `basicFlags` to `XRegExp.union` since any syntax\n      // transformation resulting from those flags was already applied to `left` and\n      // `right` when they were passed through the XRegExp constructor above.\n      XRegExp.union([left, right], '', {\n        conjunction: 'or'\n      }).source, \")[^\").concat(escapeChar, \"])+)+\"), // Flags `gy` not needed here\n      flags.replace(/[^imu]+/g, ''));\n    }\n\n    while (true) {\n      // If using an escape character, advance to the delimiter's next starting position,\n      // skipping any escaped characters in between\n      if (escapeChar) {\n        delimEnd += (XRegExp.exec(str, esc, delimEnd, 'sticky') || [''])[0].length;\n      }\n\n      leftMatch = XRegExp.exec(str, left, delimEnd);\n      rightMatch = XRegExp.exec(str, right, delimEnd); // Keep the leftmost match only\n\n      if (leftMatch && rightMatch) {\n        if (leftMatch.index <= rightMatch.index) {\n          rightMatch = null;\n        } else {\n          leftMatch = null;\n        }\n      } // Paths (LM: leftMatch, RM: rightMatch, OT: openTokens):\n      // LM | RM | OT | Result\n      // 1  | 0  | 1  | loop\n      // 1  | 0  | 0  | loop\n      // 0  | 1  | 1  | loop\n      // 0  | 1  | 0  | throw\n      // 0  | 0  | 1  | throw\n      // 0  | 0  | 0  | break\n      // The paths above don't include the sticky mode special case. The loop ends after the\n      // first completed match if not `global`.\n\n\n      if (leftMatch || rightMatch) {\n        delimStart = (leftMatch || rightMatch).index;\n        delimEnd = delimStart + (leftMatch || rightMatch)[0].length;\n      } else if (!openTokens) {\n        break;\n      }\n\n      if (sticky && !openTokens && delimStart > lastOuterEnd) {\n        break;\n      }\n\n      if (leftMatch) {\n        if (!openTokens) {\n          outerStart = delimStart;\n          innerStart = delimEnd;\n        }\n\n        ++openTokens;\n      } else if (rightMatch && openTokens) {\n        if (! --openTokens) {\n          if (vN) {\n            if (vN[0] && outerStart > lastOuterEnd) {\n              output.push(row(vN[0], str.slice(lastOuterEnd, outerStart), lastOuterEnd, outerStart));\n            }\n\n            if (vN[1]) {\n              output.push(row(vN[1], str.slice(outerStart, innerStart), outerStart, innerStart));\n            }\n\n            if (vN[2]) {\n              output.push(row(vN[2], str.slice(innerStart, delimStart), innerStart, delimStart));\n            }\n\n            if (vN[3]) {\n              output.push(row(vN[3], str.slice(delimStart, delimEnd), delimStart, delimEnd));\n            }\n          } else {\n            output.push(str.slice(innerStart, delimStart));\n          }\n\n          lastOuterEnd = delimEnd;\n\n          if (!global) {\n            break;\n          }\n        }\n      } else {\n        throw new Error('Unbalanced delimiter found in string');\n      } // If the delimiter matched an empty string, avoid an infinite loop\n\n\n      if (delimStart === delimEnd) {\n        ++delimEnd;\n      }\n    }\n\n    if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd) {\n      output.push(row(vN[0], str.slice(lastOuterEnd), lastOuterEnd, str.length));\n    }\n\n    return output;\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["conjunction","matchRecursive","__esModule","name","value","start","default","end"]],"~:compiled-at",1537815743224,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$xregexp$lib$addons$matchrecursive.js\",\n\"lineCount\":3,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/xregexp/lib/addons/matchrecursive.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$xregexp$lib$addons$matchrecursive\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = void 0;\\n\\n/*!\\n * XRegExp.matchRecursive 4.2.0\\n * <xregexp.com>\\n * Steven Levithan (c) 2009-present MIT License\\n */\\nvar _default = function _default(XRegExp) {\\n  /**\\n   * Returns a match detail object composed of the provided values.\\n   *\\n   * @private\\n   */\\n  function row(name, value, start, end) {\\n    return {\\n      name: name,\\n      value: value,\\n      start: start,\\n      end: end\\n    };\\n  }\\n  /**\\n   * Returns an array of match strings between outermost left and right delimiters, or an array of\\n   * objects with detailed match parts and position data. An error is thrown if delimiters are\\n   * unbalanced within the data.\\n   *\\n   * @memberOf XRegExp\\n   * @param {String} str String to search.\\n   * @param {String} left Left delimiter as an XRegExp pattern.\\n   * @param {String} right Right delimiter as an XRegExp pattern.\\n   * @param {String} [flags] Any native or XRegExp flags, used for the left and right delimiters.\\n   * @param {Object} [options] Lets you specify `valueNames` and `escapeChar` options.\\n   * @returns {Array} Array of matches, or an empty array.\\n   * @example\\n   *\\n   * // Basic usage\\n   * let str = '(t((e))s)t()(ing)';\\n   * XRegExp.matchRecursive(str, '\\\\\\\\(', '\\\\\\\\)', 'g');\\n   * // -> ['t((e))s', '', 'ing']\\n   *\\n   * // Extended information mode with valueNames\\n   * str = 'Here is <div> <div>an</div></div> example';\\n   * XRegExp.matchRecursive(str, '<div\\\\\\\\s*>', '</div>', 'gi', {\\n   *   valueNames: ['between', 'left', 'match', 'right']\\n   * });\\n   * // -> [\\n   * // {name: 'between', value: 'Here is ',       start: 0,  end: 8},\\n   * // {name: 'left',    value: '<div>',          start: 8,  end: 13},\\n   * // {name: 'match',   value: ' <div>an</div>', start: 13, end: 27},\\n   * // {name: 'right',   value: '</div>',         start: 27, end: 33},\\n   * // {name: 'between', value: ' example',       start: 33, end: 41}\\n   * // ]\\n   *\\n   * // Omitting unneeded parts with null valueNames, and using escapeChar\\n   * str = '...{1}.\\\\\\\\{{function(x,y){return {y:x}}}';\\n   * XRegExp.matchRecursive(str, '{', '}', 'g', {\\n   *   valueNames: ['literal', null, 'value', null],\\n   *   escapeChar: '\\\\\\\\'\\n   * });\\n   * // -> [\\n   * // {name: 'literal', value: '...',  start: 0, end: 3},\\n   * // {name: 'value',   value: '1',    start: 4, end: 5},\\n   * // {name: 'literal', value: '.\\\\\\\\{', start: 6, end: 9},\\n   * // {name: 'value',   value: 'function(x,y){return {y:x}}', start: 10, end: 37}\\n   * // ]\\n   *\\n   * // Sticky mode via flag y\\n   * str = '<1><<<2>>><3>4<5>';\\n   * XRegExp.matchRecursive(str, '<', '>', 'gy');\\n   * // -> ['1', '<<2>>', '3']\\n   */\\n\\n\\n  XRegExp.matchRecursive = function (str, left, right, flags, options) {\\n    flags = flags || '';\\n    options = options || {};\\n    var global = flags.indexOf('g') !== -1;\\n    var sticky = flags.indexOf('y') !== -1; // Flag `y` is controlled internally\\n\\n    var basicFlags = flags.replace(/y/g, '');\\n    var _options = options,\\n        escapeChar = _options.escapeChar;\\n    var vN = options.valueNames;\\n    var output = [];\\n    var openTokens = 0;\\n    var delimStart = 0;\\n    var delimEnd = 0;\\n    var lastOuterEnd = 0;\\n    var outerStart;\\n    var innerStart;\\n    var leftMatch;\\n    var rightMatch;\\n    var esc;\\n    left = XRegExp(left, basicFlags);\\n    right = XRegExp(right, basicFlags);\\n\\n    if (escapeChar) {\\n      if (escapeChar.length > 1) {\\n        throw new Error('Cannot use more than one escape character');\\n      }\\n\\n      escapeChar = XRegExp.escape(escapeChar); // Example of concatenated `esc` regex:\\n      // `escapeChar`: '%'\\n      // `left`: '<'\\n      // `right`: '>'\\n      // Regex is: /(?:%[\\\\S\\\\s]|(?:(?!<|>)[^%])+)+/\\n\\n      esc = new RegExp(\\\"(?:\\\".concat(escapeChar, \\\"[\\\\\\\\S\\\\\\\\s]|(?:(?!\\\").concat( // Using `XRegExp.union` safely rewrites backreferences in `left` and `right`.\\n      // Intentionally not passing `basicFlags` to `XRegExp.union` since any syntax\\n      // transformation resulting from those flags was already applied to `left` and\\n      // `right` when they were passed through the XRegExp constructor above.\\n      XRegExp.union([left, right], '', {\\n        conjunction: 'or'\\n      }).source, \\\")[^\\\").concat(escapeChar, \\\"])+)+\\\"), // Flags `gy` not needed here\\n      flags.replace(/[^imu]+/g, ''));\\n    }\\n\\n    while (true) {\\n      // If using an escape character, advance to the delimiter's next starting position,\\n      // skipping any escaped characters in between\\n      if (escapeChar) {\\n        delimEnd += (XRegExp.exec(str, esc, delimEnd, 'sticky') || [''])[0].length;\\n      }\\n\\n      leftMatch = XRegExp.exec(str, left, delimEnd);\\n      rightMatch = XRegExp.exec(str, right, delimEnd); // Keep the leftmost match only\\n\\n      if (leftMatch && rightMatch) {\\n        if (leftMatch.index <= rightMatch.index) {\\n          rightMatch = null;\\n        } else {\\n          leftMatch = null;\\n        }\\n      } // Paths (LM: leftMatch, RM: rightMatch, OT: openTokens):\\n      // LM | RM | OT | Result\\n      // 1  | 0  | 1  | loop\\n      // 1  | 0  | 0  | loop\\n      // 0  | 1  | 1  | loop\\n      // 0  | 1  | 0  | throw\\n      // 0  | 0  | 1  | throw\\n      // 0  | 0  | 0  | break\\n      // The paths above don't include the sticky mode special case. The loop ends after the\\n      // first completed match if not `global`.\\n\\n\\n      if (leftMatch || rightMatch) {\\n        delimStart = (leftMatch || rightMatch).index;\\n        delimEnd = delimStart + (leftMatch || rightMatch)[0].length;\\n      } else if (!openTokens) {\\n        break;\\n      }\\n\\n      if (sticky && !openTokens && delimStart > lastOuterEnd) {\\n        break;\\n      }\\n\\n      if (leftMatch) {\\n        if (!openTokens) {\\n          outerStart = delimStart;\\n          innerStart = delimEnd;\\n        }\\n\\n        ++openTokens;\\n      } else if (rightMatch && openTokens) {\\n        if (! --openTokens) {\\n          if (vN) {\\n            if (vN[0] && outerStart > lastOuterEnd) {\\n              output.push(row(vN[0], str.slice(lastOuterEnd, outerStart), lastOuterEnd, outerStart));\\n            }\\n\\n            if (vN[1]) {\\n              output.push(row(vN[1], str.slice(outerStart, innerStart), outerStart, innerStart));\\n            }\\n\\n            if (vN[2]) {\\n              output.push(row(vN[2], str.slice(innerStart, delimStart), innerStart, delimStart));\\n            }\\n\\n            if (vN[3]) {\\n              output.push(row(vN[3], str.slice(delimStart, delimEnd), delimStart, delimEnd));\\n            }\\n          } else {\\n            output.push(str.slice(innerStart, delimStart));\\n          }\\n\\n          lastOuterEnd = delimEnd;\\n\\n          if (!global) {\\n            break;\\n          }\\n        }\\n      } else {\\n        throw new Error('Unbalanced delimiter found in string');\\n      } // If the delimiter matched an empty string, avoid an infinite loop\\n\\n\\n      if (delimStart === delimEnd) {\\n        ++delimEnd;\\n      }\\n    }\\n\\n    if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd) {\\n      output.push(row(vN[0], str.slice(lastOuterEnd), lastOuterEnd, str.length));\\n    }\\n\\n    return output;\\n  };\\n};\\n\\nexports.default = _default;\\nmodule.exports = exports[\\\"default\\\"];\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"Object\",\"defineProperty\",\"value\",\"default\",\"_default\",\"XRegExp\",\"row\",\"name\",\"start\",\"end\",\"matchRecursive\",\"XRegExp.matchRecursive\",\"str\",\"left\",\"right\",\"flags\",\"options\",\"indexOf\",\"sticky\",\"basicFlags\",\"replace\",\"escapeChar\",\"vN\",\"valueNames\",\"output\",\"openTokens\",\"delimStart\",\"delimEnd\",\"lastOuterEnd\",\"length\",\"Error\",\"escape\",\"esc\",\"RegExp\",\"concat\",\"union\",\"conjunction\",\"source\",\"exec\",\"leftMatch\",\"rightMatch\",\"index\",\"outerStart\",\"innerStart\",\"push\",\"slice\"]\n}\n"]