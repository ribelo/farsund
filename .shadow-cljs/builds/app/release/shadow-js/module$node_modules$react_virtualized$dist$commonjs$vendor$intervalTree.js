["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-virtualized/dist/commonjs/vendor/intervalTree.js"],"~:js","shadow$provide.module$node_modules$react_virtualized$dist$commonjs$vendor$intervalTree=function(b,e,a,f,c,m){function d(a,b,c,d,e){this.mid=a;this.left=b;this.right=c;this.leftPoints=d;this.rightPoints=e;this.count=(b?b.count:0)+(c?c.count:0)+d.length}function k(a,b){a.mid=b.mid;a.left=b.left;a.right=b.right;a.leftPoints=b.leftPoints;a.rightPoints=b.rightPoints;a.count=b.count}function l(a,b){b=y(b);a.mid=b.mid;a.left=b.left;a.right=b.right;a.leftPoints=b.leftPoints;a.rightPoints=b.rightPoints;a.count=\nb.count}function h(a,b){var c=a.intervals([]);b=c.indexOf(b);if(0>b)return 0;c.splice(b,1);l(a,c);return 1}function p(a,b,c){for(var d=0;d<a.length&&a[d][0]<=b;++d){var e=c(a[d]);if(e)return e}}function r(a,b,c){for(var d=a.length-1;0<=d&&a[d][1]>=b;--d){var e=c(a[d]);if(e)return e}}function q(a,b){for(var c=0;c<a.length;++c){var d=b(a[c]);if(d)return d}}function g(a,b){return a-b}function n(a,b){var c=a[0]-b[0];return c?c:a[1]-b[1]}function v(a,b){var c=a[1]-b[1];return c?c:a[0]-b[0]}function y(a){if(0===\na.length)return null;for(var b=[],c=0;c<a.length;++c)b.push(a[c][0],a[c][1]);b.sort(g);b=b[b.length>>1];var e=[],f=[],h=[];for(c=0;c<a.length;++c){var k=a[c];k[1]<b?e.push(k):b<k[0]?f.push(k):h.push(k)}a=h.slice();h.sort(n);a.sort(v);return new d(b,y(e),y(f),h,a)}function w(a){this.root=a}Object.defineProperty(c,\"__esModule\",{value:!0});c.default=function(a){return a&&0!==a.length?new w(y(a)):new w(null)};var x=(b=a(\"module$node_modules$react_virtualized$dist$commonjs$vendor$binarySearchBounds\"))&&\nb.__esModule?b:{default:b};b=d.prototype;b.intervals=function(a){a.push.apply(a,this.leftPoints);this.left&&this.left.intervals(a);this.right&&this.right.intervals(a);return a};b.insert=function(a){var b=this.count-this.leftPoints.length;this.count+=1;if(a[1]<this.mid)this.left?4*(this.left.count+1)>3*(b+1)?(b=this.intervals([]),b.push(a),l(this,b)):this.left.insert(a):this.left=y([a]);else if(a[0]>this.mid)this.right?4*(this.right.count+1)>3*(b+1)?(b=this.intervals([]),b.push(a),l(this,b)):this.right.insert(a):\nthis.right=y([a]);else{b=x.default.ge(this.leftPoints,a,n);var c=x.default.ge(this.rightPoints,a,v);this.leftPoints.splice(b,0,a);this.rightPoints.splice(c,0,a)}};b.remove=function(a){var b=this.count-this.leftPoints;if(a[1]<this.mid){if(!this.left)return 0;if(4*(this.right?this.right.count:0)>3*(b-1))return h(this,a);b=this.left.remove(a);if(2===b)return this.left=null,--this.count,1;1===b&&--this.count;return b}if(a[0]>this.mid){if(!this.right)return 0;if(4*(this.left?this.left.count:0)>3*(b-1))return h(this,\na);b=this.right.remove(a);if(2===b)return this.right=null,--this.count,1;1===b&&--this.count;return b}if(1===this.count)return this.leftPoints[0]===a?2:0;if(1===this.leftPoints.length&&this.leftPoints[0]===a){if(this.left&&this.right){a=this;for(var c=this.left;c.right;)a=c,c=c.right;if(a===this)c.right=this.right;else{var d=this.left;b=this.right;a.count-=c.count;a.right=c.left;c.left=d;c.right=b}k(this,c);this.count=(this.left?this.left.count:0)+(this.right?this.right.count:0)+this.leftPoints.length}else this.left?\nk(this,this.left):k(this,this.right);return 1}for(d=x.default.ge(this.leftPoints,a,n);d<this.leftPoints.length&&this.leftPoints[d][0]===a[0];++d)if(this.leftPoints[d]===a)for(--this.count,this.leftPoints.splice(d,1),b=x.default.ge(this.rightPoints,a,v);b<this.rightPoints.length&&this.rightPoints[b][1]===a[1];++b)if(this.rightPoints[b]===a)return this.rightPoints.splice(b,1),1;return 0};b.queryPoint=function(a,b){if(a<this.mid){if(this.left){var c=this.left.queryPoint(a,b);if(c)return c}return p(this.leftPoints,\na,b)}return a>this.mid?this.right&&(c=this.right.queryPoint(a,b))?c:r(this.rightPoints,a,b):q(this.leftPoints,b)};b.queryInterval=function(a,b,c){if(a<this.mid&&this.left){var d=this.left.queryInterval(a,b,c);if(d)return d}return b>this.mid&&this.right&&(d=this.right.queryInterval(a,b,c))?d:b<this.mid?p(this.leftPoints,b,c):a>this.mid?r(this.rightPoints,a,c):q(this.leftPoints,c)};b=w.prototype;b.insert=function(a){this.root?this.root.insert(a):this.root=new d(a[0],null,null,[a],[a])};b.remove=function(a){return this.root?\n(a=this.root.remove(a),2===a&&(this.root=null),0!==a):!1};b.queryPoint=function(a,b){if(this.root)return this.root.queryPoint(a,b)};b.queryInterval=function(a,b,c){if(a<=b&&this.root)return this.root.queryInterval(a,b,c)};Object.defineProperty(b,\"count\",{get:function(){return this.root?this.root.count:0}});Object.defineProperty(b,\"intervals\",{get:function(){return this.root?this.root.intervals([]):[]}})}","~:source","shadow$provide[\"module$node_modules$react_virtualized$dist$commonjs$vendor$intervalTree\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createWrapper;\n\nvar _binarySearchBounds = require('./binarySearchBounds');\n\nvar _binarySearchBounds2 = _interopRequireDefault(_binarySearchBounds);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar NOT_FOUND = 0; /**\n                    * Binary Search Bounds\n                    * https://github.com/mikolalysenko/interval-tree-1d\n                    * Mikola Lysenko\n                    *\n                    * Inlined because of Content Security Policy issue caused by the use of `new Function(...)` syntax in an upstream dependency.\n                    * Issue reported here: https://github.com/mikolalysenko/binary-search-bounds/issues/5\n                    **/\n\nvar SUCCESS = 1;\nvar EMPTY = 2;\n\nfunction IntervalTreeNode(mid, left, right, leftPoints, rightPoints) {\n  this.mid = mid;\n  this.left = left;\n  this.right = right;\n  this.leftPoints = leftPoints;\n  this.rightPoints = rightPoints;\n  this.count = (left ? left.count : 0) + (right ? right.count : 0) + leftPoints.length;\n}\n\nvar proto = IntervalTreeNode.prototype;\n\nfunction copy(a, b) {\n  a.mid = b.mid;\n  a.left = b.left;\n  a.right = b.right;\n  a.leftPoints = b.leftPoints;\n  a.rightPoints = b.rightPoints;\n  a.count = b.count;\n}\n\nfunction rebuild(node, intervals) {\n  var ntree = createIntervalTree(intervals);\n  node.mid = ntree.mid;\n  node.left = ntree.left;\n  node.right = ntree.right;\n  node.leftPoints = ntree.leftPoints;\n  node.rightPoints = ntree.rightPoints;\n  node.count = ntree.count;\n}\n\nfunction rebuildWithInterval(node, interval) {\n  var intervals = node.intervals([]);\n  intervals.push(interval);\n  rebuild(node, intervals);\n}\n\nfunction rebuildWithoutInterval(node, interval) {\n  var intervals = node.intervals([]);\n  var idx = intervals.indexOf(interval);\n  if (idx < 0) {\n    return NOT_FOUND;\n  }\n  intervals.splice(idx, 1);\n  rebuild(node, intervals);\n  return SUCCESS;\n}\n\nproto.intervals = function (result) {\n  result.push.apply(result, this.leftPoints);\n  if (this.left) {\n    this.left.intervals(result);\n  }\n  if (this.right) {\n    this.right.intervals(result);\n  }\n  return result;\n};\n\nproto.insert = function (interval) {\n  var weight = this.count - this.leftPoints.length;\n  this.count += 1;\n  if (interval[1] < this.mid) {\n    if (this.left) {\n      if (4 * (this.left.count + 1) > 3 * (weight + 1)) {\n        rebuildWithInterval(this, interval);\n      } else {\n        this.left.insert(interval);\n      }\n    } else {\n      this.left = createIntervalTree([interval]);\n    }\n  } else if (interval[0] > this.mid) {\n    if (this.right) {\n      if (4 * (this.right.count + 1) > 3 * (weight + 1)) {\n        rebuildWithInterval(this, interval);\n      } else {\n        this.right.insert(interval);\n      }\n    } else {\n      this.right = createIntervalTree([interval]);\n    }\n  } else {\n    var l = _binarySearchBounds2.default.ge(this.leftPoints, interval, compareBegin);\n    var r = _binarySearchBounds2.default.ge(this.rightPoints, interval, compareEnd);\n    this.leftPoints.splice(l, 0, interval);\n    this.rightPoints.splice(r, 0, interval);\n  }\n};\n\nproto.remove = function (interval) {\n  var weight = this.count - this.leftPoints;\n  if (interval[1] < this.mid) {\n    if (!this.left) {\n      return NOT_FOUND;\n    }\n    var rw = this.right ? this.right.count : 0;\n    if (4 * rw > 3 * (weight - 1)) {\n      return rebuildWithoutInterval(this, interval);\n    }\n    var r = this.left.remove(interval);\n    if (r === EMPTY) {\n      this.left = null;\n      this.count -= 1;\n      return SUCCESS;\n    } else if (r === SUCCESS) {\n      this.count -= 1;\n    }\n    return r;\n  } else if (interval[0] > this.mid) {\n    if (!this.right) {\n      return NOT_FOUND;\n    }\n    var lw = this.left ? this.left.count : 0;\n    if (4 * lw > 3 * (weight - 1)) {\n      return rebuildWithoutInterval(this, interval);\n    }\n    var r = this.right.remove(interval);\n    if (r === EMPTY) {\n      this.right = null;\n      this.count -= 1;\n      return SUCCESS;\n    } else if (r === SUCCESS) {\n      this.count -= 1;\n    }\n    return r;\n  } else {\n    if (this.count === 1) {\n      if (this.leftPoints[0] === interval) {\n        return EMPTY;\n      } else {\n        return NOT_FOUND;\n      }\n    }\n    if (this.leftPoints.length === 1 && this.leftPoints[0] === interval) {\n      if (this.left && this.right) {\n        var p = this;\n        var n = this.left;\n        while (n.right) {\n          p = n;\n          n = n.right;\n        }\n        if (p === this) {\n          n.right = this.right;\n        } else {\n          var l = this.left;\n          var r = this.right;\n          p.count -= n.count;\n          p.right = n.left;\n          n.left = l;\n          n.right = r;\n        }\n        copy(this, n);\n        this.count = (this.left ? this.left.count : 0) + (this.right ? this.right.count : 0) + this.leftPoints.length;\n      } else if (this.left) {\n        copy(this, this.left);\n      } else {\n        copy(this, this.right);\n      }\n      return SUCCESS;\n    }\n    for (var l = _binarySearchBounds2.default.ge(this.leftPoints, interval, compareBegin); l < this.leftPoints.length; ++l) {\n      if (this.leftPoints[l][0] !== interval[0]) {\n        break;\n      }\n      if (this.leftPoints[l] === interval) {\n        this.count -= 1;\n        this.leftPoints.splice(l, 1);\n        for (var r = _binarySearchBounds2.default.ge(this.rightPoints, interval, compareEnd); r < this.rightPoints.length; ++r) {\n          if (this.rightPoints[r][1] !== interval[1]) {\n            break;\n          } else if (this.rightPoints[r] === interval) {\n            this.rightPoints.splice(r, 1);\n            return SUCCESS;\n          }\n        }\n      }\n    }\n    return NOT_FOUND;\n  }\n};\n\nfunction reportLeftRange(arr, hi, cb) {\n  for (var i = 0; i < arr.length && arr[i][0] <= hi; ++i) {\n    var r = cb(arr[i]);\n    if (r) {\n      return r;\n    }\n  }\n}\n\nfunction reportRightRange(arr, lo, cb) {\n  for (var i = arr.length - 1; i >= 0 && arr[i][1] >= lo; --i) {\n    var r = cb(arr[i]);\n    if (r) {\n      return r;\n    }\n  }\n}\n\nfunction reportRange(arr, cb) {\n  for (var i = 0; i < arr.length; ++i) {\n    var r = cb(arr[i]);\n    if (r) {\n      return r;\n    }\n  }\n}\n\nproto.queryPoint = function (x, cb) {\n  if (x < this.mid) {\n    if (this.left) {\n      var r = this.left.queryPoint(x, cb);\n      if (r) {\n        return r;\n      }\n    }\n    return reportLeftRange(this.leftPoints, x, cb);\n  } else if (x > this.mid) {\n    if (this.right) {\n      var r = this.right.queryPoint(x, cb);\n      if (r) {\n        return r;\n      }\n    }\n    return reportRightRange(this.rightPoints, x, cb);\n  } else {\n    return reportRange(this.leftPoints, cb);\n  }\n};\n\nproto.queryInterval = function (lo, hi, cb) {\n  if (lo < this.mid && this.left) {\n    var r = this.left.queryInterval(lo, hi, cb);\n    if (r) {\n      return r;\n    }\n  }\n  if (hi > this.mid && this.right) {\n    var r = this.right.queryInterval(lo, hi, cb);\n    if (r) {\n      return r;\n    }\n  }\n  if (hi < this.mid) {\n    return reportLeftRange(this.leftPoints, hi, cb);\n  } else if (lo > this.mid) {\n    return reportRightRange(this.rightPoints, lo, cb);\n  } else {\n    return reportRange(this.leftPoints, cb);\n  }\n};\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\nfunction compareBegin(a, b) {\n  var d = a[0] - b[0];\n  if (d) {\n    return d;\n  }\n  return a[1] - b[1];\n}\n\nfunction compareEnd(a, b) {\n  var d = a[1] - b[1];\n  if (d) {\n    return d;\n  }\n  return a[0] - b[0];\n}\n\nfunction createIntervalTree(intervals) {\n  if (intervals.length === 0) {\n    return null;\n  }\n  var pts = [];\n  for (var i = 0; i < intervals.length; ++i) {\n    pts.push(intervals[i][0], intervals[i][1]);\n  }\n  pts.sort(compareNumbers);\n\n  var mid = pts[pts.length >> 1];\n\n  var leftIntervals = [];\n  var rightIntervals = [];\n  var centerIntervals = [];\n  for (var i = 0; i < intervals.length; ++i) {\n    var s = intervals[i];\n    if (s[1] < mid) {\n      leftIntervals.push(s);\n    } else if (mid < s[0]) {\n      rightIntervals.push(s);\n    } else {\n      centerIntervals.push(s);\n    }\n  }\n\n  //Split center intervals\n  var leftPoints = centerIntervals;\n  var rightPoints = centerIntervals.slice();\n  leftPoints.sort(compareBegin);\n  rightPoints.sort(compareEnd);\n\n  return new IntervalTreeNode(mid, createIntervalTree(leftIntervals), createIntervalTree(rightIntervals), leftPoints, rightPoints);\n}\n\n//User friendly wrapper that makes it possible to support empty trees\nfunction IntervalTree(root) {\n  this.root = root;\n}\n\nvar tproto = IntervalTree.prototype;\n\ntproto.insert = function (interval) {\n  if (this.root) {\n    this.root.insert(interval);\n  } else {\n    this.root = new IntervalTreeNode(interval[0], null, null, [interval], [interval]);\n  }\n};\n\ntproto.remove = function (interval) {\n  if (this.root) {\n    var r = this.root.remove(interval);\n    if (r === EMPTY) {\n      this.root = null;\n    }\n    return r !== NOT_FOUND;\n  }\n  return false;\n};\n\ntproto.queryPoint = function (p, cb) {\n  if (this.root) {\n    return this.root.queryPoint(p, cb);\n  }\n};\n\ntproto.queryInterval = function (lo, hi, cb) {\n  if (lo <= hi && this.root) {\n    return this.root.queryInterval(lo, hi, cb);\n  }\n};\n\nObject.defineProperty(tproto, 'count', {\n  get: function get() {\n    if (this.root) {\n      return this.root.count;\n    }\n    return 0;\n  }\n});\n\nObject.defineProperty(tproto, 'intervals', {\n  get: function get() {\n    if (this.root) {\n      return this.root.intervals([]);\n    }\n    return [];\n  }\n});\n\nfunction createWrapper(intervals) {\n  if (!intervals || intervals.length === 0) {\n    return new IntervalTree(null);\n  }\n  return new IntervalTree(createIntervalTree(intervals));\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js","~$module$node_modules$react_virtualized$dist$commonjs$vendor$binarySearchBounds"]],"~:properties",["^5",["right","__esModule","root","count","intervals","value","queryInterval","remove","leftPoints","insert","queryPoint","mid","get","default","left","rightPoints"]],"~:compiled-at",1537815743279,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_virtualized$dist$commonjs$vendor$intervalTree.js\",\n\"lineCount\":9,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/react-virtualized/dist/commonjs/vendor/intervalTree.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_virtualized$dist$commonjs$vendor$intervalTree\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n'use strict';\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = createWrapper;\\n\\nvar _binarySearchBounds = require('./binarySearchBounds');\\n\\nvar _binarySearchBounds2 = _interopRequireDefault(_binarySearchBounds);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar NOT_FOUND = 0; /**\\n                    * Binary Search Bounds\\n                    * https://github.com/mikolalysenko/interval-tree-1d\\n                    * Mikola Lysenko\\n                    *\\n                    * Inlined because of Content Security Policy issue caused by the use of `new Function(...)` syntax in an upstream dependency.\\n                    * Issue reported here: https://github.com/mikolalysenko/binary-search-bounds/issues/5\\n                    **/\\n\\nvar SUCCESS = 1;\\nvar EMPTY = 2;\\n\\nfunction IntervalTreeNode(mid, left, right, leftPoints, rightPoints) {\\n  this.mid = mid;\\n  this.left = left;\\n  this.right = right;\\n  this.leftPoints = leftPoints;\\n  this.rightPoints = rightPoints;\\n  this.count = (left ? left.count : 0) + (right ? right.count : 0) + leftPoints.length;\\n}\\n\\nvar proto = IntervalTreeNode.prototype;\\n\\nfunction copy(a, b) {\\n  a.mid = b.mid;\\n  a.left = b.left;\\n  a.right = b.right;\\n  a.leftPoints = b.leftPoints;\\n  a.rightPoints = b.rightPoints;\\n  a.count = b.count;\\n}\\n\\nfunction rebuild(node, intervals) {\\n  var ntree = createIntervalTree(intervals);\\n  node.mid = ntree.mid;\\n  node.left = ntree.left;\\n  node.right = ntree.right;\\n  node.leftPoints = ntree.leftPoints;\\n  node.rightPoints = ntree.rightPoints;\\n  node.count = ntree.count;\\n}\\n\\nfunction rebuildWithInterval(node, interval) {\\n  var intervals = node.intervals([]);\\n  intervals.push(interval);\\n  rebuild(node, intervals);\\n}\\n\\nfunction rebuildWithoutInterval(node, interval) {\\n  var intervals = node.intervals([]);\\n  var idx = intervals.indexOf(interval);\\n  if (idx < 0) {\\n    return NOT_FOUND;\\n  }\\n  intervals.splice(idx, 1);\\n  rebuild(node, intervals);\\n  return SUCCESS;\\n}\\n\\nproto.intervals = function (result) {\\n  result.push.apply(result, this.leftPoints);\\n  if (this.left) {\\n    this.left.intervals(result);\\n  }\\n  if (this.right) {\\n    this.right.intervals(result);\\n  }\\n  return result;\\n};\\n\\nproto.insert = function (interval) {\\n  var weight = this.count - this.leftPoints.length;\\n  this.count += 1;\\n  if (interval[1] < this.mid) {\\n    if (this.left) {\\n      if (4 * (this.left.count + 1) > 3 * (weight + 1)) {\\n        rebuildWithInterval(this, interval);\\n      } else {\\n        this.left.insert(interval);\\n      }\\n    } else {\\n      this.left = createIntervalTree([interval]);\\n    }\\n  } else if (interval[0] > this.mid) {\\n    if (this.right) {\\n      if (4 * (this.right.count + 1) > 3 * (weight + 1)) {\\n        rebuildWithInterval(this, interval);\\n      } else {\\n        this.right.insert(interval);\\n      }\\n    } else {\\n      this.right = createIntervalTree([interval]);\\n    }\\n  } else {\\n    var l = _binarySearchBounds2.default.ge(this.leftPoints, interval, compareBegin);\\n    var r = _binarySearchBounds2.default.ge(this.rightPoints, interval, compareEnd);\\n    this.leftPoints.splice(l, 0, interval);\\n    this.rightPoints.splice(r, 0, interval);\\n  }\\n};\\n\\nproto.remove = function (interval) {\\n  var weight = this.count - this.leftPoints;\\n  if (interval[1] < this.mid) {\\n    if (!this.left) {\\n      return NOT_FOUND;\\n    }\\n    var rw = this.right ? this.right.count : 0;\\n    if (4 * rw > 3 * (weight - 1)) {\\n      return rebuildWithoutInterval(this, interval);\\n    }\\n    var r = this.left.remove(interval);\\n    if (r === EMPTY) {\\n      this.left = null;\\n      this.count -= 1;\\n      return SUCCESS;\\n    } else if (r === SUCCESS) {\\n      this.count -= 1;\\n    }\\n    return r;\\n  } else if (interval[0] > this.mid) {\\n    if (!this.right) {\\n      return NOT_FOUND;\\n    }\\n    var lw = this.left ? this.left.count : 0;\\n    if (4 * lw > 3 * (weight - 1)) {\\n      return rebuildWithoutInterval(this, interval);\\n    }\\n    var r = this.right.remove(interval);\\n    if (r === EMPTY) {\\n      this.right = null;\\n      this.count -= 1;\\n      return SUCCESS;\\n    } else if (r === SUCCESS) {\\n      this.count -= 1;\\n    }\\n    return r;\\n  } else {\\n    if (this.count === 1) {\\n      if (this.leftPoints[0] === interval) {\\n        return EMPTY;\\n      } else {\\n        return NOT_FOUND;\\n      }\\n    }\\n    if (this.leftPoints.length === 1 && this.leftPoints[0] === interval) {\\n      if (this.left && this.right) {\\n        var p = this;\\n        var n = this.left;\\n        while (n.right) {\\n          p = n;\\n          n = n.right;\\n        }\\n        if (p === this) {\\n          n.right = this.right;\\n        } else {\\n          var l = this.left;\\n          var r = this.right;\\n          p.count -= n.count;\\n          p.right = n.left;\\n          n.left = l;\\n          n.right = r;\\n        }\\n        copy(this, n);\\n        this.count = (this.left ? this.left.count : 0) + (this.right ? this.right.count : 0) + this.leftPoints.length;\\n      } else if (this.left) {\\n        copy(this, this.left);\\n      } else {\\n        copy(this, this.right);\\n      }\\n      return SUCCESS;\\n    }\\n    for (var l = _binarySearchBounds2.default.ge(this.leftPoints, interval, compareBegin); l < this.leftPoints.length; ++l) {\\n      if (this.leftPoints[l][0] !== interval[0]) {\\n        break;\\n      }\\n      if (this.leftPoints[l] === interval) {\\n        this.count -= 1;\\n        this.leftPoints.splice(l, 1);\\n        for (var r = _binarySearchBounds2.default.ge(this.rightPoints, interval, compareEnd); r < this.rightPoints.length; ++r) {\\n          if (this.rightPoints[r][1] !== interval[1]) {\\n            break;\\n          } else if (this.rightPoints[r] === interval) {\\n            this.rightPoints.splice(r, 1);\\n            return SUCCESS;\\n          }\\n        }\\n      }\\n    }\\n    return NOT_FOUND;\\n  }\\n};\\n\\nfunction reportLeftRange(arr, hi, cb) {\\n  for (var i = 0; i < arr.length && arr[i][0] <= hi; ++i) {\\n    var r = cb(arr[i]);\\n    if (r) {\\n      return r;\\n    }\\n  }\\n}\\n\\nfunction reportRightRange(arr, lo, cb) {\\n  for (var i = arr.length - 1; i >= 0 && arr[i][1] >= lo; --i) {\\n    var r = cb(arr[i]);\\n    if (r) {\\n      return r;\\n    }\\n  }\\n}\\n\\nfunction reportRange(arr, cb) {\\n  for (var i = 0; i < arr.length; ++i) {\\n    var r = cb(arr[i]);\\n    if (r) {\\n      return r;\\n    }\\n  }\\n}\\n\\nproto.queryPoint = function (x, cb) {\\n  if (x < this.mid) {\\n    if (this.left) {\\n      var r = this.left.queryPoint(x, cb);\\n      if (r) {\\n        return r;\\n      }\\n    }\\n    return reportLeftRange(this.leftPoints, x, cb);\\n  } else if (x > this.mid) {\\n    if (this.right) {\\n      var r = this.right.queryPoint(x, cb);\\n      if (r) {\\n        return r;\\n      }\\n    }\\n    return reportRightRange(this.rightPoints, x, cb);\\n  } else {\\n    return reportRange(this.leftPoints, cb);\\n  }\\n};\\n\\nproto.queryInterval = function (lo, hi, cb) {\\n  if (lo < this.mid && this.left) {\\n    var r = this.left.queryInterval(lo, hi, cb);\\n    if (r) {\\n      return r;\\n    }\\n  }\\n  if (hi > this.mid && this.right) {\\n    var r = this.right.queryInterval(lo, hi, cb);\\n    if (r) {\\n      return r;\\n    }\\n  }\\n  if (hi < this.mid) {\\n    return reportLeftRange(this.leftPoints, hi, cb);\\n  } else if (lo > this.mid) {\\n    return reportRightRange(this.rightPoints, lo, cb);\\n  } else {\\n    return reportRange(this.leftPoints, cb);\\n  }\\n};\\n\\nfunction compareNumbers(a, b) {\\n  return a - b;\\n}\\n\\nfunction compareBegin(a, b) {\\n  var d = a[0] - b[0];\\n  if (d) {\\n    return d;\\n  }\\n  return a[1] - b[1];\\n}\\n\\nfunction compareEnd(a, b) {\\n  var d = a[1] - b[1];\\n  if (d) {\\n    return d;\\n  }\\n  return a[0] - b[0];\\n}\\n\\nfunction createIntervalTree(intervals) {\\n  if (intervals.length === 0) {\\n    return null;\\n  }\\n  var pts = [];\\n  for (var i = 0; i < intervals.length; ++i) {\\n    pts.push(intervals[i][0], intervals[i][1]);\\n  }\\n  pts.sort(compareNumbers);\\n\\n  var mid = pts[pts.length >> 1];\\n\\n  var leftIntervals = [];\\n  var rightIntervals = [];\\n  var centerIntervals = [];\\n  for (var i = 0; i < intervals.length; ++i) {\\n    var s = intervals[i];\\n    if (s[1] < mid) {\\n      leftIntervals.push(s);\\n    } else if (mid < s[0]) {\\n      rightIntervals.push(s);\\n    } else {\\n      centerIntervals.push(s);\\n    }\\n  }\\n\\n  //Split center intervals\\n  var leftPoints = centerIntervals;\\n  var rightPoints = centerIntervals.slice();\\n  leftPoints.sort(compareBegin);\\n  rightPoints.sort(compareEnd);\\n\\n  return new IntervalTreeNode(mid, createIntervalTree(leftIntervals), createIntervalTree(rightIntervals), leftPoints, rightPoints);\\n}\\n\\n//User friendly wrapper that makes it possible to support empty trees\\nfunction IntervalTree(root) {\\n  this.root = root;\\n}\\n\\nvar tproto = IntervalTree.prototype;\\n\\ntproto.insert = function (interval) {\\n  if (this.root) {\\n    this.root.insert(interval);\\n  } else {\\n    this.root = new IntervalTreeNode(interval[0], null, null, [interval], [interval]);\\n  }\\n};\\n\\ntproto.remove = function (interval) {\\n  if (this.root) {\\n    var r = this.root.remove(interval);\\n    if (r === EMPTY) {\\n      this.root = null;\\n    }\\n    return r !== NOT_FOUND;\\n  }\\n  return false;\\n};\\n\\ntproto.queryPoint = function (p, cb) {\\n  if (this.root) {\\n    return this.root.queryPoint(p, cb);\\n  }\\n};\\n\\ntproto.queryInterval = function (lo, hi, cb) {\\n  if (lo <= hi && this.root) {\\n    return this.root.queryInterval(lo, hi, cb);\\n  }\\n};\\n\\nObject.defineProperty(tproto, 'count', {\\n  get: function get() {\\n    if (this.root) {\\n      return this.root.count;\\n    }\\n    return 0;\\n  }\\n});\\n\\nObject.defineProperty(tproto, 'intervals', {\\n  get: function get() {\\n    if (this.root) {\\n      return this.root.intervals([]);\\n    }\\n    return [];\\n  }\\n});\\n\\nfunction createWrapper(intervals) {\\n  if (!intervals || intervals.length === 0) {\\n    return new IntervalTree(null);\\n  }\\n  return new IntervalTree(createIntervalTree(intervals));\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"IntervalTreeNode\",\"mid\",\"left\",\"right\",\"leftPoints\",\"rightPoints\",\"count\",\"length\",\"copy\",\"a\",\"b\",\"rebuild\",\"node\",\"intervals\",\"ntree\",\"createIntervalTree\",\"rebuildWithoutInterval\",\"interval\",\"idx\",\"indexOf\",\"NOT_FOUND\",\"splice\",\"SUCCESS\",\"reportLeftRange\",\"arr\",\"hi\",\"cb\",\"i\",\"r\",\"reportRightRange\",\"lo\",\"reportRange\",\"compareNumbers\",\"compareBegin\",\"d\",\"compareEnd\",\"pts\",\"push\",\"sort\",\"leftIntervals\",\"rightIntervals\",\"centerIntervals\",\"s\",\"slice\",\"IntervalTree\",\"root\",\"Object\",\"defineProperty\",\"value\",\"default\",\"createWrapper\",\"_binarySearchBounds2\",\"_binarySearchBounds\",\"__esModule\",\"proto\",\"prototype\",\"proto.intervals\",\"result\",\"apply\",\"insert\",\"proto.insert\",\"weight\",\"l\",\"ge\",\"remove\",\"proto.remove\",\"rw\",\"EMPTY\",\"lw\",\"p\",\"n\",\"queryPoint\",\"proto.queryPoint\",\"x\",\"queryInterval\",\"proto.queryInterval\",\"tproto\",\"tproto.insert\",\"tproto.remove\",\"tproto.queryPoint\",\"tproto.queryInterval\",\"get\"]\n}\n"]