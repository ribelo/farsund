["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/jss-camel-case/lib/index.js"],"~:js","shadow$provide.module$node_modules$jss_camel_case$lib$index=function(b,e,a,f,c,m){function d(a){var b={},c;for(c in a)b[(0,k[\"default\"])(c)]=a[c];a.fallbacks&&(Array.isArray(a.fallbacks)?b.fallbacks=a.fallbacks.map(d):b.fallbacks=d(a.fallbacks));return b}Object.defineProperty(c,\"__esModule\",{value:!0});c[\"default\"]=function(){return{onProcessStyle:function(a){if(Array.isArray(a)){for(var b=0;b<a.length;b++)a[b]=d(a[b]);return a}return d(a)},onChangeValue:function(a,b,c){var d=(0,k[\"default\"])(b);\nif(b===d)return a;c.prop(d,a);return null}}};var k=(b=a(\"module$node_modules$hyphenate_style_name$index\"))&&b.__esModule?b:{\"default\":b}}","~:source","shadow$provide[\"module$node_modules$jss_camel_case$lib$index\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = camelCase;\n\nvar _hyphenateStyleName = require('hyphenate-style-name');\n\nvar _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * Convert camel cased property names to dash separated.\n *\n * @param {Object} style\n * @return {Object}\n */\nfunction convertCase(style) {\n  var converted = {};\n\n  for (var prop in style) {\n    converted[(0, _hyphenateStyleName2['default'])(prop)] = style[prop];\n  }\n\n  if (style.fallbacks) {\n    if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);else converted.fallbacks = convertCase(style.fallbacks);\n  }\n\n  return converted;\n}\n\n/**\n * Allow camel cased property names by converting them back to dasherized.\n *\n * @param {Rule} rule\n */\nfunction camelCase() {\n  function onProcessStyle(style) {\n    if (Array.isArray(style)) {\n      // Handle rules like @font-face, which can have multiple styles in an array\n      for (var index = 0; index < style.length; index++) {\n        style[index] = convertCase(style[index]);\n      }\n      return style;\n    }\n\n    return convertCase(style);\n  }\n\n  function onChangeValue(value, prop, rule) {\n    var hyphenatedProp = (0, _hyphenateStyleName2['default'])(prop);\n\n    // There was no camel case in place\n    if (prop === hyphenatedProp) return value;\n\n    rule.prop(hyphenatedProp, value);\n\n    // Core will ignore that property value we set the proper one above.\n    return null;\n  }\n\n  return { onProcessStyle: onProcessStyle, onChangeValue: onChangeValue };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$hyphenate_style_name$index","~$shadow.js"]],"~:properties",["^5",["__esModule","onProcessStyle","value","onChangeValue","fallbacks","default"]],"~:compiled-at",1537815743041,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$jss_camel_case$lib$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,6CAAA,CAAiE,QAAQ,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAwBC,CAAxB,CAA+BC,CAA/B,CAAuCC,CAAvC,CAAqD,CAoB9HC,QAASA,EAAW,CAACC,CAAD,CAAQ,CAC1B,IAAIC,EAAY,EAAhB,CAESC,CAAT,KAASA,CAAT,GAAiBF,EAAjB,CACEC,CAAA,CAAU,CAAC,CAAA,CAAGE,CAAA,CAAqB,SAArB,CAAJ,EAAqCD,CAArC,CAAV,CAAA,CAAwDF,CAAA,CAAME,CAAN,CAGtDF,EAAAI,UAAJ,GACMC,KAAAC,QAAA,CAAcN,CAAAI,UAAd,CAAJ,CAAoCH,CAAAG,UAApC,CAA0DJ,CAAAI,UAAAG,IAAA,CAAoBR,CAApB,CAA1D,CAAgGE,CAAAG,UAAhG,CAAsHL,CAAA,CAAYC,CAAAI,UAAZ,CADxH,CAIA,OAAOH,EAXmB,CAjB5BO,MAAAC,eAAA,CAAsBZ,CAAtB,CAA+B,YAA/B,CAA6C,CAC3Ca,MAAO,CAAA,CADoC,CAA7C,CAGAb,EAAA,CAAQ,SAAR,CAAA,CAiCAc,QAAkB,EAAG,CAyBnB,MAAO,CAAEC,eAxBTA,QAAuB,CAACZ,CAAD,CAAQ,CAC7B,GAAIK,KAAAC,QAAA,CAAcN,CAAd,CAAJ,CAA0B,CAExB,IAAK,IAAIa,EAAQ,CAAjB,CAAoBA,CAApB,CAA4Bb,CAAAc,OAA5B,CAA0CD,CAAA,EAA1C,CACEb,CAAA,CAAMa,CAAN,CAAA,CAAed,CAAA,CAAYC,CAAA,CAAMa,CAAN,CAAZ,CAEjB,OAAOb,EALiB,CAQ1B,MAAOD,EAAA,CAAYC,CAAZ,CATsB,CAwBxB,CAAkCe,cAZzCA,QAAsB,CAACL,CAAD,CAAQR,CAAR,CAAcc,CAAd,CAAoB,CACxC,IAAIC,EAAiB,CAAC,CAAA,CAAGd,CAAA,CAAqB,SAArB,CAAJ,EAAqCD,CAArC,CAGrB;GAAIA,CAAJ,GAAae,CAAb,CAA6B,MAAOP,EAEpCM,EAAAd,KAAA,CAAUe,CAAV,CAA0BP,CAA1B,CAGA,OAAO,KATiC,CAYnC,CAzBY,CA7BrB,KAAIP,EAE0C,CAJ1Ce,CAI0C,CAJpBvB,CAAA,CAAQ,gDAAR,CAIoB,GAFIuB,CAEGC,WAAP,CAFID,CAEJ,CAA8B,CAAE,UAF5BA,CAE0B,CAZkD;\",\n\"sources\":[\"node_modules/jss-camel-case/lib/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$jss_camel_case$lib$index\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n'use strict';\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports['default'] = camelCase;\\n\\nvar _hyphenateStyleName = require('hyphenate-style-name');\\n\\nvar _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\\n\\n/**\\n * Convert camel cased property names to dash separated.\\n *\\n * @param {Object} style\\n * @return {Object}\\n */\\nfunction convertCase(style) {\\n  var converted = {};\\n\\n  for (var prop in style) {\\n    converted[(0, _hyphenateStyleName2['default'])(prop)] = style[prop];\\n  }\\n\\n  if (style.fallbacks) {\\n    if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);else converted.fallbacks = convertCase(style.fallbacks);\\n  }\\n\\n  return converted;\\n}\\n\\n/**\\n * Allow camel cased property names by converting them back to dasherized.\\n *\\n * @param {Rule} rule\\n */\\nfunction camelCase() {\\n  function onProcessStyle(style) {\\n    if (Array.isArray(style)) {\\n      // Handle rules like @font-face, which can have multiple styles in an array\\n      for (var index = 0; index < style.length; index++) {\\n        style[index] = convertCase(style[index]);\\n      }\\n      return style;\\n    }\\n\\n    return convertCase(style);\\n  }\\n\\n  function onChangeValue(value, prop, rule) {\\n    var hyphenatedProp = (0, _hyphenateStyleName2['default'])(prop);\\n\\n    // There was no camel case in place\\n    if (prop === hyphenatedProp) return value;\\n\\n    rule.prop(hyphenatedProp, value);\\n\\n    // Core will ignore that property value we set the proper one above.\\n    return null;\\n  }\\n\\n  return { onProcessStyle: onProcessStyle, onChangeValue: onChangeValue };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"convertCase\",\"style\",\"converted\",\"prop\",\"_hyphenateStyleName2\",\"fallbacks\",\"Array\",\"isArray\",\"map\",\"Object\",\"defineProperty\",\"value\",\"camelCase\",\"onProcessStyle\",\"index\",\"length\",\"onChangeValue\",\"rule\",\"hyphenatedProp\",\"_hyphenateStyleName\",\"__esModule\"]\n}\n"]