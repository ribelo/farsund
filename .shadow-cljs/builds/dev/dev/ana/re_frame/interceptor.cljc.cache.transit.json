["^ ","~:output",["^ ","~:js","goog.provide('re_frame.interceptor');\ngoog.require('cljs.core');\ngoog.require('re_frame.loggers');\ngoog.require('re_frame.interop');\ngoog.require('re_frame.trace');\ngoog.require('clojure.set');\nre_frame.interceptor.mandatory_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"after\",\"after\",594996914),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),null], null), null);\nre_frame.interceptor.interceptor_QMARK_ = (function re_frame$interceptor$interceptor_QMARK_(m){\nreturn ((cljs.core.map_QMARK_(m)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(re_frame.interceptor.mandatory_interceptor_keys,cljs.core.set(cljs.core.keys(m)))));\n});\n/**\n * Create an interceptor from named arguments\n */\nre_frame.interceptor.__GT_interceptor = (function re_frame$interceptor$__GT_interceptor(var_args){\nvar args__4534__auto__ = [];\nvar len__4531__auto___46820 = arguments.length;\nvar i__4532__auto___46824 = (0);\nwhile(true){\nif((i__4532__auto___46824 < len__4531__auto___46820)){\nargs__4534__auto__.push((arguments[i__4532__auto___46824]));\n\nvar G__46829 = (i__4532__auto___46824 + (1));\ni__4532__auto___46824 = G__46829;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4535__auto__ = ((((0) < args__4534__auto__.length))?(new cljs.core.IndexedSeq(args__4534__auto__.slice((0)),(0),null)):null);\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(argseq__4535__auto__);\n});\n\nre_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic = (function (p__46810){\nvar map__46811 = p__46810;\nvar map__46811__$1 = ((((!((map__46811 == null)))?(((((map__46811.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__46811.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__46811):map__46811);\nvar m = map__46811__$1;\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46811__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46811__$1,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388));\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__46811__$1,new cljs.core.Keyword(null,\"after\",\"after\",594996914));\nif(re_frame.interop.debug_enabled_QMARK_){\nvar temp__5455__auto___46847 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(m)),re_frame.interceptor.mandatory_interceptor_keys));\nif(temp__5455__auto___46847){\nvar unknown_keys_46852 = temp__5455__auto___46847;\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ->interceptor\",m,\"has unknown keys:\",unknown_keys_46852], 0));\n} else {\n}\n} else {\n}\n\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__3949__auto__ = id;\nif(cljs.core.truth_(or__3949__auto__)){\nreturn or__3949__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"unnamed\",\"unnamed\",-26044928);\n}\n})(),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),before,new cljs.core.Keyword(null,\"after\",\"after\",594996914),after], null);\n});\n\nre_frame.interceptor.__GT_interceptor.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\nre_frame.interceptor.__GT_interceptor.cljs$lang$applyTo = (function (seq46809){\nvar self__4519__auto__ = this;\nreturn self__4519__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq46809));\n});\n\nre_frame.interceptor.get_effect = (function re_frame$interceptor$get_effect(var_args){\nvar G__46854 = arguments.length;\nswitch (G__46854) {\ncase 1:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context);\n});\n\nre_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null));\n});\n\nre_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),not_found);\n});\n\nre_frame.interceptor.get_effect.cljs$lang$maxFixedArity = 3;\n\nre_frame.interceptor.assoc_effect = (function re_frame$interceptor$assoc_effect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),value);\n});\nre_frame.interceptor.get_coeffect = (function re_frame$interceptor$get_coeffect(var_args){\nvar G__46860 = arguments.length;\nswitch (G__46860) {\ncase 1:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1 = (function (context){\nreturn new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\n});\n\nre_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null));\n});\n\nre_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),not_found);\n});\n\nre_frame.interceptor.get_coeffect.cljs$lang$maxFixedArity = 3;\n\nre_frame.interceptor.assoc_coeffect = (function re_frame$interceptor$assoc_coeffect(context,key,value){\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),value);\n});\nre_frame.interceptor.update_coeffect = (function re_frame$interceptor$update_coeffect(var_args){\nvar args__4534__auto__ = [];\nvar len__4531__auto___46873 = arguments.length;\nvar i__4532__auto___46874 = (0);\nwhile(true){\nif((i__4532__auto___46874 < len__4531__auto___46873)){\nargs__4534__auto__.push((arguments[i__4532__auto___46874]));\n\nvar G__46875 = (i__4532__auto___46874 + (1));\ni__4532__auto___46874 = G__46875;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4535__auto__ = ((((3) < args__4534__auto__.length))?(new cljs.core.IndexedSeq(args__4534__auto__.slice((3)),(0),null)):null);\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4535__auto__);\n});\n\nre_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),f,args);\n});\n\nre_frame.interceptor.update_coeffect.cljs$lang$maxFixedArity = (3);\n\n/** @this {Function} */\nre_frame.interceptor.update_coeffect.cljs$lang$applyTo = (function (seq46866){\nvar G__46867 = cljs.core.first(seq46866);\nvar seq46866__$1 = cljs.core.next(seq46866);\nvar G__46868 = cljs.core.first(seq46866__$1);\nvar seq46866__$2 = cljs.core.next(seq46866__$1);\nvar G__46869 = cljs.core.first(seq46866__$2);\nvar seq46866__$3 = cljs.core.next(seq46866__$2);\nvar self__4518__auto__ = this;\nreturn self__4518__auto__.cljs$core$IFn$_invoke$arity$variadic(G__46867,G__46868,G__46869,seq46866__$3);\n});\n\nre_frame.interceptor.invoke_interceptor_fn = (function re_frame$interceptor$invoke_interceptor_fn(context,interceptor,direction){\nvar temp__5455__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(interceptor,direction);\nif(cljs.core.truth_(temp__5455__auto__)){\nvar f = temp__5455__auto__;\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null,context));\n} else {\nreturn context;\n}\n});\n/**\n * Loop over all interceptors, calling `direction` function on each,\n *   threading the value of `context` through every call.\n * \n *   `direction` is one of `:before` or `:after`.\n * \n *   Each iteration, the next interceptor to process is obtained from\n *   context's `:queue`. After they are processed, interceptors are popped\n *   from `:queue` and added to `:stack`.\n * \n *   After sufficient iteration, `:queue` will be empty, and `:stack` will\n *   contain all interceptors processed.\n * \n *   Returns updated `context`. Ie. the `context` which has been threaded\n *   through all interceptor functions.\n * \n *   Generally speaking, an interceptor's `:before` function will (if present)\n *   add to a `context's` `:coeffects`, while it's `:after` function\n *   will modify the `context`'s `:effects`.  Very approximately.\n * \n *   But because all interceptor functions are given `context`, and can\n *   return a modified version of it, the way is clear for an interceptor\n *   to introspect the stack or queue, or even modify the queue\n *   (add new interceptors via `enqueue`?). This is a very fluid arrangement.\n */\nre_frame.interceptor.invoke_interceptors = (function re_frame$interceptor$invoke_interceptors(context,direction){\nvar context__$1 = context;\nwhile(true){\nvar queue = new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879).cljs$core$IFn$_invoke$arity$1(context__$1);\nif(cljs.core.empty_QMARK_(queue)){\nreturn context__$1;\n} else {\nvar interceptor = cljs.core.peek(queue);\nvar stack = new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context__$1);\nvar G__46884 = re_frame.interceptor.invoke_interceptor_fn(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(context__$1,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.pop(queue),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,interceptor)], 0)),interceptor,direction);\ncontext__$1 = G__46884;\ncontinue;\n}\nbreak;\n}\n});\n/**\n * Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n *   Returns the updated `context`.\n * \n *   In an advanced case, this function could allow an interceptor to add new\n *   interceptors to the `:queue` of a context.\n */\nre_frame.interceptor.enqueue = (function re_frame$interceptor$enqueue(context,interceptors){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,re_frame.interop.empty_queue),interceptors);\n});\n/**\n * Create a fresh context\n */\nre_frame.interceptor.context = (function re_frame$interceptor$context(var_args){\nvar G__46889 = arguments.length;\nswitch (G__46889) {\ncase 2:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nre_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2 = (function (event,interceptors){\nreturn re_frame.interceptor.enqueue(re_frame.interceptor.assoc_coeffect(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"event\",\"event\",301435442),event),interceptors);\n});\n\nre_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3 = (function (event,interceptors,db){\nreturn re_frame.interceptor.assoc_coeffect(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event,interceptors),new cljs.core.Keyword(null,\"db\",\"db\",993250759),db);\n});\n\nre_frame.interceptor.context.cljs$lang$maxFixedArity = 3;\n\n/**\n * Called on completion of `:before` processing, this function prepares/modifies\n * `context` for the backwards sweep of processing in which an interceptor\n * chain's `:after` fns are called.\n * \n *   At this point in processing, the `:queue` is empty and `:stack` holds all\n *   the previously run interceptors. So this function enables the backwards walk\n *   by priming `:queue` with what's currently in `:stack`\n */\nre_frame.interceptor.change_direction = (function re_frame$interceptor$change_direction(context){\nreturn re_frame.interceptor.enqueue(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879)),new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context));\n});\n/**\n * Executes the given chain (coll) of interceptors.\n * \n * Each interceptor has this form:\n *     {:before  (fn [context] ...)     ;; returns possibly modified context\n *      :after   (fn [context] ...)}    ;; `identity` would be a noop\n * \n * Walks the queue of iterceptors from beginning to end, calling the\n * `:before` fn on each, then reverse direction and walk backwards,\n * calling the `:after` fn on each.\n * \n * The last interceptor in the chain presumably wraps an event\n * handler fn. So the overall goal of the process is to \"handle\n * the given event\".\n * \n * Thread a `context` through all calls. `context` has this form:\n * \n *   {:coeffects {:event [:a-query-id :some-param]\n *                :db    <original contents of app-db>}\n *    :effects   {:db    <new value for app-db>\n *                :dispatch  [:an-event-id :param1]}\n *    :queue     <a collection of further interceptors>\n *    :stack     <a collection of interceptors already walked>}\n * \n * `context` has `:coeffects` and `:effects` which, if this was a web\n * server, would be somewhat anologous to `request` and `response`\n * respectively.\n * \n * `coeffects` will contain data like `event` and the initial\n * state of `db` -  the inputs required by the event handler\n * (sitting presumably on the end of the chain), while handler-returned\n * side effects are put into `:effects` including, but not limited to,\n * new values for `db`.\n * \n * The first few interceptors in a chain will likely have `:before`\n * functions which \"prime\" the `context` by adding the event, and\n * the current state of app-db into `:coeffects`. But interceptors can\n * add whatever they want to `:coeffects` - perhaps the event handler needs\n * some information from localstore, or a random number, or access to\n * a DataScript connection.\n * \n * Equally, some interceptors in the chain will have `:after` fn\n * which can process the side effects accumulated into `:effects`\n * including but, not limited to, updates to app-db.\n * \n * Through both stages (before and after), `context` contains a `:queue`\n * of interceptors yet to be processed, and a `:stack` of interceptors\n * already done.  In advanced cases, these values can be modified by the\n * functions through which the context is threaded.\n */\nre_frame.interceptor.execute = (function re_frame$interceptor$execute(event_v,interceptors){\nif(re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__46742__auto___46898 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nre_frame.trace._STAR_current_trace_STAR_ = new_trace__46742__auto___46898;\n\n} else {\n}\n\nreturn re_frame.interceptor.invoke_interceptors(re_frame.interceptor.change_direction(re_frame.interceptor.invoke_interceptors(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event_v,interceptors),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388))),new cljs.core.Keyword(null,\"after\",\"after\",594996914));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/interceptor.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",25],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.loggers","^M","~$re-frame.interop","^N","~$re-frame.trace","^O","~$trace","^O","~$clojure.set","^Q","~$set","^Q","~$cljs.core","^S","~$goog","^T"],"~:seen",["^F",["~:require"]],"~:uses",["^ ","~$console","^M","~$empty-queue","^N","~$debug-enabled?","^N"],"~:require-macros",["^ ","^O","^O","^P","^O","^S","^S"],"~:form",["~#list",["~$ns","^H",["^11",["^V",["^M","~:refer",["^X"]],["^N","^13",["^Y","^Z"]],["^O","~:as","^P","~:include-macros",true],["^Q","^14","^R"]]]]],"~:flags",["^ ","^V",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^T","^S","^M","^N","^O","^Q"]],"^J","^H","~:resource-id",["~:shadow.build.classpath/resource","re_frame/interceptor.cljc"],"~:compiled-at",1537561402821,"~:resource-name","re_frame/interceptor.cljc","~:warnings",[],"~:source","(ns re-frame.interceptor\n  (:require\n    [re-frame.loggers :refer [console]]\n    [re-frame.interop :refer [empty-queue debug-enabled?]]\n    [re-frame.trace :as trace :include-macros true]\n    [clojure.set :as set]))\n\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys (-> m keys set))))\n\n\n(defn ->interceptor\n  \"Create an interceptor from named arguments\"\n  [& {:as m :keys [id before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor\" m \"has unknown keys:\" unknown-keys)))\n  {:id     (or id :unnamed)\n   :before before\n   :after  after })\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n\n(defn- invoke-interceptor-fn\n  [context interceptor direction]\n  (if-let [f (get interceptor direction)]\n    (f context)\n    context))\n\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n\n(defn enqueue\n  \"Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context.\"\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n  (-> {}\n      (assoc-coeffect :event event)\n      (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (trace/merge-trace!\n    {:tags {:interceptors interceptors}})\n  (-> (context event-v interceptors)\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n","~:reader-features",["^F",["~:cljs"]],"~:source-map",["^ ","~i8",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",6],["^ ","^1B",50,"^1C",6],["^ ","^1B",131,"^1C",6],["^ ","^1B",190,"^1C",6],["^ ","^1B",245,"^1C",6]],"~i5",[["^ ","^1B",0,"^1C",6,"^G","re-frame.interceptor/mandatory-interceptor-keys"]]],"~i10",["^ ","~i0",[["^ ","^1B",0,"^1C",7],["^ ","^1B",42,"^1C",7],["^ ","^1B",0,"^1C",8]],"~i6",[["^ ","^1B",0,"^1C",7,"^G","re-frame.interceptor/interceptor?"]]],"~i11",["^ ","~i3",[["^ ","^1B",92,"^1C",7,"^G","m"]]],"~i12",["^ ","~i2",[["^ ","^1B",0,"^1C",8]],"~i7",[["^ ","^1B",9,"^1C",8]],"~i8",[["^ ","^1B",9,"^1C",8,"^G","cljs.core/map?"]],"~i13",[["^ ","^1B",30,"^1C",8,"^G","m"]]],"^1G",["^ ","~i7",[["^ ","^1B",38,"^1C",8]],"~i8",[["^ ","^1B",38,"^1C",8,"^G","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2"]],"^1D",[["^ ","^1B",83,"^1C",8,"^G","re-frame.interceptor/mandatory-interceptor-keys"]],"~i37",[["^ ","^1B",131,"^1C",8],["^ ","^1B",145,"^1C",8]],"~i41",[["^ ","^1B",160,"^1C",8,"^G","m"]],"~i43",[["^ ","^1B",145,"^1C",8,"^G","cljs.core/keys"]],"~i48",[["^ ","^1B",131,"^1C",8,"^G","cljs.core/set"]]],"~i16",["^ ","~i0",[["^ ","^1B",0,"^1C",10],["^ ","^1B",0,"^1C",10],["^ ","^1B",40,"^1C",13],["^ ","^1B",88,"^1C",13,"^G","var_args"],["^ ","^1B",0,"^1C",14],["^ ","^1B",0,"^1C",14],["^ ","^1B",4,"^1C",14,"^G","args__4534__auto__"],["^ ","^1B",25,"^1C",14],["^ ","^1B",0,"^1C",15],["^ ","^1B",0,"^1C",15],["^ ","^1B",4,"^1C",15,"^G","len__4531__auto__"],["^ ","^1B",30,"^1C",15],["^ ","^1B",30,"^1C",15],["^ ","^1B",0,"^1C",16],["^ ","^1B",0,"^1C",16],["^ ","^1B",4,"^1C",16,"^G","i__4532__auto__"],["^ ","^1B",28,"^1C",16],["^ ","^1B",0,"^1C",18],["^ ","^1B",0,"^1C",18],["^ ","^1B",3,"^1C",18],["^ ","^1B",4,"^1C",18,"^G","i__4532__auto__"],["^ ","^1B",28,"^1C",18,"^G","len__4531__auto__"],["^ ","^1B",0,"^1C",19],["^ ","^1B",0,"^1C",19],["^ ","^1B",0,"^1C",19,"^G","args__4534__auto__"],["^ ","^1B",24,"^1C",19],["^ ","^1B",25,"^1C",19],["^ ","^1B",35,"^1C",19,"^G","i__4532__auto__"],["^ ","^1B",0,"^1C",21],["^ ","^1B",15,"^1C",21],["^ ","^1B",16,"^1C",21,"^G","i__4532__auto__"],["^ ","^1B",40,"^1C",21],["^ ","^1B",0,"^1C",25],["^ ","^1B",0,"^1C",29],["^ ","^1B",4,"^1C",29,"^G","argseq__4535__auto__"],["^ ","^1B",27,"^1C",29],["^ ","^1B",29,"^1C",29],["^ ","^1B",30,"^1C",29],["^ ","^1B",36,"^1C",29],["^ ","^1B",36,"^1C",29,"^G","args__4534__auto__"],["^ ","^1B",64,"^1C",29],["^ ","^1B",64,"^1C",29],["^ ","^1B",69,"^1C",29,"^G","cljs.core/IndexedSeq"],["^ ","^1B",90,"^1C",29],["^ ","^1B",90,"^1C",29,"^G","args__4534__auto__"],["^ ","^1B",115,"^1C",29],["^ ","^1B",120,"^1C",29],["^ ","^1B",124,"^1C",29],["^ ","^1B",131,"^1C",29],["^ ","^1B",0,"^1C",30],["^ ","^1B",0,"^1C",30],["^ ","^1B",7,"^1C",30,"^G","re-frame.interceptor/->interceptor"],["^ ","^1B",82,"^1C",30,"^G","argseq__4535__auto__"],["^ ","^1B",0,"^1C",33],["^ ","^1B",0,"^1C",33],["^ ","^1B",0,"^1C",33],["^ ","^1B",0,"^1C",33,"^G","re-frame.interceptor/->interceptor"],["^ ","^1B",77,"^1C",33],["^ ","^1B",88,"^1C",33,"^G","p__46810"],["^ ","^1B",0,"^1C",34],["^ ","^1B",0,"^1C",34],["^ ","^1B",4,"^1C",34,"^G","map__46811"],["^ ","^1B",17,"^1C",34,"^G","p__46810"],["^ ","^1B",4,"^1C",35,"^G","map__46811"],["^ ","^1B",21,"^1C",35],["^ ","^1B",23,"^1C",35],["^ ","^1B",25,"^1C",35],["^ ","^1B",27,"^1C",35],["^ ","^1B",28,"^1C",35,"^G","map__46811"],["^ ","^1B",42,"^1C",35],["^ ","^1B",50,"^1C",35],["^ ","^1B",52,"^1C",35],["^ ","^1B",54,"^1C",35],["^ ","^1B",55,"^1C",35],["^ ","^1B",55,"^1C",35,"^G","map__46811"],["^ ","^1B",104,"^1C",35],["^ ","^1B",115,"^1C",35],["^ ","^1B",116,"^1C",35,"^G","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1B",148,"^1C",35],["^ ","^1B",148,"^1C",35,"^G","map__46811"],["^ ","^1B",179,"^1C",35],["^ ","^1B",184,"^1C",35],["^ ","^1B",191,"^1C",35],["^ ","^1B",199,"^1C",35],["^ ","^1B",199,"^1C",35,"^G","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1B",245,"^1C",35,"^G","cljs.core/hash-map"],["^ ","^1B",264,"^1C",35,"^G","map__46811"],["^ ","^1B",276,"^1C",35,"^G","map__46811"],["^ ","^1B",8,"^1C",36,"^G","map__46811"],["^ ","^1B",9,"^1C",37],["^ ","^1B",9,"^1C",37,"^G","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1B",53,"^1C",37,"^G","map__46811"],["^ ","^1B",68,"^1C",37],["^ ","^1B",13,"^1C",38],["^ ","^1B",13,"^1C",38,"^G","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1B",57,"^1C",38,"^G","map__46811"],["^ ","^1B",72,"^1C",38],["^ ","^1B",12,"^1C",39],["^ ","^1B",12,"^1C",39,"^G","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1B",56,"^1C",39,"^G","map__46811"],["^ ","^1B",71,"^1C",39],["^ ","^1B",0,"^1C",40],["^ ","^1B",0,"^1C",50],["^ ","^1B",50,"^1C",50],["^ ","^1B",5,"^1C",56],["^ ","^1B",70,"^1C",56],["^ ","^1B",0,"^1C",59],["^ ","^1B",0,"^1C",59],["^ ","^1B",0,"^1C",59,"^G","re-frame.interceptor/->interceptor"],["^ ","^1B",64,"^1C",59],["^ ","^1B",0,"^1C",61],["^ ","^1B",0,"^1C",62],["^ ","^1B",0,"^1C",62],["^ ","^1B",0,"^1C",62,"^G","re-frame.interceptor/->interceptor"],["^ ","^1B",58,"^1C",62],["^ ","^1B",69,"^1C",62,"^G","seq46809"],["^ ","^1B",0,"^1C",63],["^ ","^1B",0,"^1C",63],["^ ","^1B",4,"^1C",63,"^G","self__4519__auto__"],["^ ","^1B",25,"^1C",63],["^ ","^1B",0,"^1C",64],["^ ","^1B",0,"^1C",64],["^ ","^1B",7,"^1C",64,"^G","self__4519__auto__"],["^ ","^1B",63,"^1C",64],["^ ","^1B",63,"^1C",64,"^G","cljs.core/seq"],["^ ","^1B",77,"^1C",64,"^G","seq46809"],["^ ","^1B",0,"^1C",67]],"~i6",[["^ ","^1B",0,"^1C",13,"^G","re-frame.interceptor/->interceptor"]]],"~i18",["^ ","^1D",[["^ ","^1B",4,"^1C",36,"^G","m"]],"~i19",[["^ ","^1B",4,"^1C",37,"^G","id"]],"~i22",[["^ ","^1B",4,"^1C",38,"^G","before"]],"~i29",[["^ ","^1B",4,"^1C",39,"^G","after"]]],"^1N",["^ ","~i2",[["^ ","^1B",0,"^1C",40],["^ ","^1B",0,"^1C",41],["^ ","^1B",0,"^1C",48]],"~i8",[["^ ","^1B",3,"^1C",40,"^G","re-frame.interop/debug-enabled?"]]],"~i20",["^ ","~i4",[["^ ","^1B",0,"^1C",41],["^ ","^1B",4,"^1C",41,"^G","temp__5455__auto__"],["^ ","^1B",0,"^1C",42],["^ ","^1B",0,"^1C",42],["^ ","^1B",3,"^1C",42,"^G","temp__5455__auto__"],["^ ","^1B",0,"^1C",43],["^ ","^1B",25,"^1C",43,"^G","temp__5455__auto__"],["^ ","^1B",0,"^1C",44],["^ ","^1B",0,"^1C",46]],"^1G",[["^ ","^1B",4,"^1C",43,"^G","unknown-keys"]],"~i26",[["^ ","^1B",31,"^1C",41]],"~i27",[["^ ","^1B",31,"^1C",41,"^G","cljs.core/seq"]],"~i31",[["^ ","^1B",45,"^1C",41]],"~i32",[["^ ","^1B",45,"^1C",41,"^G","clojure.set.difference.cljs$core$IFn$_invoke$arity$2"]]],"~i21",["^ ","^1U",[["^ ","^1B",98,"^1C",41],["^ ","^1B",112,"^1C",41]],"~i36",[["^ ","^1B",127,"^1C",41,"^G","m"]],"~i38",[["^ ","^1B",112,"^1C",41,"^G","cljs.core/keys"]],"^1J",[["^ ","^1B",98,"^1C",41,"^G","cljs.core/set"]]],"^1O",["^ ","^1U",[["^ ","^1B",131,"^1C",41,"^G","re-frame.interceptor/mandatory-interceptor-keys"]]],"~i23",["^ ","~i6",[["^ ","^1B",0,"^1C",44],["^ ","^1B",62,"^1C",44],["^ ","^1B",167,"^1C",44],["^ ","^1B",195,"^1C",44]],"~i7",[["^ ","^1B",0,"^1C",44,"^G","re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic"]],"^1K",[["^ ","^1B",193,"^1C",44,"^G","m"]],"~i70",[["^ ","^1B",215,"^1C",44,"^G","unknown-keys"]]],"~i24",["^ ","^1E",[["^ ","^1B",100,"^1C",50],["^ ","^1B",117,"^1C",50,"^G","or__3949__auto__"],["^ ","^1B",0,"^1C",51],["^ ","^1B",0,"^1C",51],["^ ","^1B",20,"^1C",51,"^G","or__3949__auto__"],["^ ","^1B",0,"^1C",52,"^G","or__3949__auto__"],["^ ","^1B",0,"^1C",54]],"~i15",[["^ ","^1B",136,"^1C",50,"^G","id"]]],"~i25",["^ ","^1E",[["^ ","^1B",63,"^1C",56,"^G","before"]]],"^1R",["^ ","^1E",[["^ ","^1B",124,"^1C",56,"^G","after"]]],"~i30",["^ ","~i0",[["^ ","^1B",0,"^1C",67],["^ ","^1B",0,"^1C",67],["^ ","^1B",34,"^1C",67],["^ ","^1B",76,"^1C",67,"^G","var_args"],["^ ","^1B",0,"^1C",68],["^ ","^1B",0,"^1C",68],["^ ","^1B",4,"^1C",68,"^G","G__46854"],["^ ","^1B",15,"^1C",68],["^ ","^1B",15,"^1C",68],["^ ","^1B",0,"^1C",69],["^ ","^1B",0,"^1C",69],["^ ","^1B",8,"^1C",69,"^G","G__46854"],["^ ","^1B",5,"^1C",70],["^ ","^1B",0,"^1C",71],["^ ","^1B",7,"^1C",71,"^G","re-frame.interceptor/get-effect"],["^ ","^1B",69,"^1C",71],["^ ","^1B",70,"^1C",71],["^ ","^1B",80,"^1C",71],["^ ","^1B",5,"^1C",74],["^ ","^1B",0,"^1C",75],["^ ","^1B",7,"^1C",75,"^G","re-frame.interceptor/get-effect"],["^ ","^1B",69,"^1C",75],["^ ","^1B",70,"^1C",75],["^ ","^1B",80,"^1C",75],["^ ","^1B",86,"^1C",75],["^ ","^1B",87,"^1C",75],["^ ","^1B",97,"^1C",75],["^ ","^1B",5,"^1C",78],["^ ","^1B",0,"^1C",79],["^ ","^1B",7,"^1C",79,"^G","re-frame.interceptor/get-effect"],["^ ","^1B",69,"^1C",79],["^ ","^1B",70,"^1C",79],["^ ","^1B",80,"^1C",79],["^ ","^1B",86,"^1C",79],["^ ","^1B",87,"^1C",79],["^ ","^1B",97,"^1C",79],["^ ","^1B",103,"^1C",79],["^ ","^1B",104,"^1C",79],["^ ","^1B",114,"^1C",79],["^ ","^1B",0,"^1C",83],["^ ","^1B",6,"^1C",83],["^ ","^1B",11,"^1C",83,"^G","js/Error"],["^ ","^1B",17,"^1C",83],["^ ","^1B",18,"^1C",83],["^ ","^1B",80,"^1C",83],["^ ","^1B",80,"^1C",83],["^ ","^1B",0,"^1C",88],["^ ","^1B",0,"^1C",88],["^ ","^1B",64,"^1C",88],["^ ","^1B",0,"^1C",89],["^ ","^1B",0,"^1C",92],["^ ","^1B",0,"^1C",92],["^ ","^1B",64,"^1C",92],["^ ","^1B",0,"^1C",93],["^ ","^1B",0,"^1C",96],["^ ","^1B",0,"^1C",96],["^ ","^1B",64,"^1C",96],["^ ","^1B",0,"^1C",97],["^ ","^1B",0,"^1C",100],["^ ","^1B",0,"^1C",100],["^ ","^1B",58,"^1C",100],["^ ","^1B",0,"^1C",102]],"~i6",[["^ ","^1B",0,"^1C",67,"^G","re-frame.interceptor/get-effect"],["^ ","^1B",0,"^1C",88,"^G","re-frame.interceptor/get-effect"],["^ ","^1B",0,"^1C",92,"^G","re-frame.interceptor/get-effect"],["^ ","^1B",0,"^1C",96,"^G","re-frame.interceptor/get-effect"],["^ ","^1B",0,"^1C",100,"^G","re-frame.interceptor/get-effect"]]],"^1T",["^ ","~i4",[["^ ","^1B",75,"^1C",88,"^G","context"]]],"^1U",["^ ","~i3",[["^ ","^1B",0,"^1C",89],["^ ","^1B",7,"^1C",89]],"^1G",[["^ ","^1B",96,"^1C",89,"^G","context"]]],"~i33",["^ ","~i4",[["^ ","^1B",75,"^1C",92,"^G","context"]],"^1F",[["^ ","^1B",83,"^1C",92,"^G","key"]]],"~i34",["^ ","~i3",[["^ ","^1B",0,"^1C",93],["^ ","^1B",62,"^1C",93],["^ ","^1B",145,"^1C",93]],"~i4",[["^ ","^1B",7,"^1C",93,"^G","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2"]],"^1E",[["^ ","^1B",54,"^1C",93,"^G","context"]],"^1P",[["^ ","^1B",204,"^1C",93,"^G","key"]]],"~i35",["^ ","~i4",[["^ ","^1B",75,"^1C",96,"^G","context"]],"^1F",[["^ ","^1B",83,"^1C",96,"^G","key"]],"^1L",[["^ ","^1B",87,"^1C",96,"^G","not-found"]]],"^1W",["^ ","~i3",[["^ ","^1B",0,"^1C",97],["^ ","^1B",62,"^1C",97],["^ ","^1B",145,"^1C",97]],"~i4",[["^ ","^1B",7,"^1C",97,"^G","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3"]],"^1E",[["^ ","^1B",54,"^1C",97,"^G","context"]],"^1P",[["^ ","^1B",204,"^1C",97,"^G","key"]],"^24",[["^ ","^1B",216,"^1C",97,"^G","not-found"]]],"~i39",["^ ","~i0",[["^ ","^1B",0,"^1C",102],["^ ","^1B",36,"^1C",102],["^ ","^1B",0,"^1C",103]],"~i6",[["^ ","^1B",0,"^1C",102,"^G","re-frame.interceptor/assoc-effect"]]],"~i40",["^ ","~i3",[["^ ","^1B",80,"^1C",102,"^G","context"]],"^1E",[["^ ","^1B",88,"^1C",102,"^G","key"]],"^20",[["^ ","^1B",92,"^1C",102,"^G","value"]]],"^1I",["^ ","~i2",[["^ ","^1B",0,"^1C",103],["^ ","^1B",34,"^1C",103],["^ ","^1B",117,"^1C",103]],"~i3",[["^ ","^1B",7,"^1C",103,"^G","cljs.core/assoc-in"]],"^1F",[["^ ","^1B",26,"^1C",103,"^G","context"]],"^22",[["^ ","^1B",176,"^1C",103,"^G","key"]],"^25",[["^ ","^1B",188,"^1C",103,"^G","value"]]],"~i45",["^ ","~i0",[["^ ","^1B",0,"^1C",105],["^ ","^1B",0,"^1C",105],["^ ","^1B",36,"^1C",105],["^ ","^1B",80,"^1C",105,"^G","var_args"],["^ ","^1B",0,"^1C",106],["^ ","^1B",0,"^1C",106],["^ ","^1B",4,"^1C",106,"^G","G__46860"],["^ ","^1B",15,"^1C",106],["^ ","^1B",15,"^1C",106],["^ ","^1B",0,"^1C",107],["^ ","^1B",0,"^1C",107],["^ ","^1B",8,"^1C",107,"^G","G__46860"],["^ ","^1B",5,"^1C",108],["^ ","^1B",0,"^1C",109],["^ ","^1B",7,"^1C",109,"^G","re-frame.interceptor/get-coeffect"],["^ ","^1B",71,"^1C",109],["^ ","^1B",72,"^1C",109],["^ ","^1B",82,"^1C",109],["^ ","^1B",5,"^1C",112],["^ ","^1B",0,"^1C",113],["^ ","^1B",7,"^1C",113,"^G","re-frame.interceptor/get-coeffect"],["^ ","^1B",71,"^1C",113],["^ ","^1B",72,"^1C",113],["^ ","^1B",82,"^1C",113],["^ ","^1B",88,"^1C",113],["^ ","^1B",89,"^1C",113],["^ ","^1B",99,"^1C",113],["^ ","^1B",5,"^1C",116],["^ ","^1B",0,"^1C",117],["^ ","^1B",7,"^1C",117,"^G","re-frame.interceptor/get-coeffect"],["^ ","^1B",71,"^1C",117],["^ ","^1B",72,"^1C",117],["^ ","^1B",82,"^1C",117],["^ ","^1B",88,"^1C",117],["^ ","^1B",89,"^1C",117],["^ ","^1B",99,"^1C",117],["^ ","^1B",105,"^1C",117],["^ ","^1B",106,"^1C",117],["^ ","^1B",116,"^1C",117],["^ ","^1B",0,"^1C",121],["^ ","^1B",6,"^1C",121],["^ ","^1B",11,"^1C",121,"^G","js/Error"],["^ ","^1B",17,"^1C",121],["^ ","^1B",18,"^1C",121],["^ ","^1B",80,"^1C",121],["^ ","^1B",80,"^1C",121],["^ ","^1B",0,"^1C",126],["^ ","^1B",0,"^1C",126],["^ ","^1B",66,"^1C",126],["^ ","^1B",0,"^1C",127],["^ ","^1B",0,"^1C",130],["^ ","^1B",0,"^1C",130],["^ ","^1B",66,"^1C",130],["^ ","^1B",0,"^1C",131],["^ ","^1B",0,"^1C",134],["^ ","^1B",0,"^1C",134],["^ ","^1B",66,"^1C",134],["^ ","^1B",0,"^1C",135],["^ ","^1B",0,"^1C",138],["^ ","^1B",0,"^1C",138],["^ ","^1B",60,"^1C",138],["^ ","^1B",0,"^1C",140]],"~i6",[["^ ","^1B",0,"^1C",105,"^G","re-frame.interceptor/get-coeffect"],["^ ","^1B",0,"^1C",126,"^G","re-frame.interceptor/get-coeffect"],["^ ","^1B",0,"^1C",130,"^G","re-frame.interceptor/get-coeffect"],["^ ","^1B",0,"^1C",134,"^G","re-frame.interceptor/get-coeffect"],["^ ","^1B",0,"^1C",138,"^G","re-frame.interceptor/get-coeffect"]]],"~i46",["^ ","~i4",[["^ ","^1B",77,"^1C",126,"^G","context"]]],"~i47",["^ ","~i3",[["^ ","^1B",0,"^1C",127],["^ ","^1B",7,"^1C",127]],"^20",[["^ ","^1B",99,"^1C",127,"^G","context"]]],"^1K",["^ ","~i4",[["^ ","^1B",77,"^1C",130,"^G","context"]],"^1F",[["^ ","^1B",85,"^1C",130,"^G","key"]]],"~i49",["^ ","~i3",[["^ ","^1B",0,"^1C",131],["^ ","^1B",62,"^1C",131],["^ ","^1B",145,"^1C",131]],"~i4",[["^ ","^1B",7,"^1C",131,"^G","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2"]],"^1E",[["^ ","^1B",54,"^1C",131,"^G","context"]],"^1T",[["^ ","^1B",207,"^1C",131,"^G","key"]]],"~i50",["^ ","~i4",[["^ ","^1B",77,"^1C",134,"^G","context"]],"^1F",[["^ ","^1B",85,"^1C",134,"^G","key"]],"^1L",[["^ ","^1B",89,"^1C",134,"^G","not-found"]]],"~i51",["^ ","~i3",[["^ ","^1B",0,"^1C",135],["^ ","^1B",62,"^1C",135],["^ ","^1B",145,"^1C",135]],"~i4",[["^ ","^1B",7,"^1C",135,"^G","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3"]],"^1E",[["^ ","^1B",54,"^1C",135,"^G","context"]],"^1T",[["^ ","^1B",207,"^1C",135,"^G","key"]],"^1W",[["^ ","^1B",219,"^1C",135,"^G","not-found"]]],"~i53",["^ ","~i0",[["^ ","^1B",0,"^1C",140],["^ ","^1B",38,"^1C",140],["^ ","^1B",0,"^1C",141]],"~i6",[["^ ","^1B",0,"^1C",140,"^G","re-frame.interceptor/assoc-coeffect"]]],"~i54",["^ ","~i3",[["^ ","^1B",84,"^1C",140,"^G","context"]],"^1E",[["^ ","^1B",92,"^1C",140,"^G","key"]],"^20",[["^ ","^1B",96,"^1C",140,"^G","value"]]],"~i55",["^ ","~i2",[["^ ","^1B",0,"^1C",141],["^ ","^1B",34,"^1C",141],["^ ","^1B",117,"^1C",141]],"~i3",[["^ ","^1B",7,"^1C",141,"^G","cljs.core/assoc-in"]],"^1F",[["^ ","^1B",26,"^1C",141,"^G","context"]],"^1U",[["^ ","^1B",179,"^1C",141,"^G","key"]],"^1H",[["^ ","^1B",191,"^1C",141,"^G","value"]]],"~i57",["^ ","~i0",[["^ ","^1B",0,"^1C",143],["^ ","^1B",0,"^1C",143],["^ ","^1B",39,"^1C",143],["^ ","^1B",86,"^1C",143,"^G","var_args"],["^ ","^1B",0,"^1C",144],["^ ","^1B",0,"^1C",144],["^ ","^1B",4,"^1C",144,"^G","args__4534__auto__"],["^ ","^1B",25,"^1C",144],["^ ","^1B",0,"^1C",145],["^ ","^1B",0,"^1C",145],["^ ","^1B",4,"^1C",145,"^G","len__4531__auto__"],["^ ","^1B",30,"^1C",145],["^ ","^1B",30,"^1C",145],["^ ","^1B",0,"^1C",146],["^ ","^1B",0,"^1C",146],["^ ","^1B",4,"^1C",146,"^G","i__4532__auto__"],["^ ","^1B",28,"^1C",146],["^ ","^1B",0,"^1C",148],["^ ","^1B",0,"^1C",148],["^ ","^1B",3,"^1C",148],["^ ","^1B",4,"^1C",148,"^G","i__4532__auto__"],["^ ","^1B",28,"^1C",148,"^G","len__4531__auto__"],["^ ","^1B",0,"^1C",149],["^ ","^1B",0,"^1C",149],["^ ","^1B",0,"^1C",149,"^G","args__4534__auto__"],["^ ","^1B",24,"^1C",149],["^ ","^1B",25,"^1C",149],["^ ","^1B",35,"^1C",149,"^G","i__4532__auto__"],["^ ","^1B",0,"^1C",151],["^ ","^1B",15,"^1C",151],["^ ","^1B",16,"^1C",151,"^G","i__4532__auto__"],["^ ","^1B",40,"^1C",151],["^ ","^1B",0,"^1C",155],["^ ","^1B",0,"^1C",159],["^ ","^1B",4,"^1C",159,"^G","argseq__4535__auto__"],["^ ","^1B",27,"^1C",159],["^ ","^1B",29,"^1C",159],["^ ","^1B",30,"^1C",159],["^ ","^1B",36,"^1C",159],["^ ","^1B",36,"^1C",159,"^G","args__4534__auto__"],["^ ","^1B",64,"^1C",159],["^ ","^1B",64,"^1C",159],["^ ","^1B",69,"^1C",159,"^G","cljs.core/IndexedSeq"],["^ ","^1B",90,"^1C",159],["^ ","^1B",90,"^1C",159,"^G","args__4534__auto__"],["^ ","^1B",115,"^1C",159],["^ ","^1B",120,"^1C",159],["^ ","^1B",124,"^1C",159],["^ ","^1B",131,"^1C",159],["^ ","^1B",0,"^1C",160],["^ ","^1B",0,"^1C",160],["^ ","^1B",7,"^1C",160,"^G","re-frame.interceptor/update-coeffect"],["^ ","^1B",81,"^1C",160],["^ ","^1B",82,"^1C",160],["^ ","^1B",92,"^1C",160],["^ ","^1B",98,"^1C",160],["^ ","^1B",99,"^1C",160],["^ ","^1B",109,"^1C",160],["^ ","^1B",115,"^1C",160],["^ ","^1B",116,"^1C",160],["^ ","^1B",126,"^1C",160],["^ ","^1B",132,"^1C",160,"^G","argseq__4535__auto__"],["^ ","^1B",0,"^1C",163],["^ ","^1B",0,"^1C",163],["^ ","^1B",0,"^1C",163],["^ ","^1B",0,"^1C",163,"^G","re-frame.interceptor/update-coeffect"],["^ ","^1B",76,"^1C",163],["^ ","^1B",0,"^1C",164],["^ ","^1B",0,"^1C",167],["^ ","^1B",0,"^1C",167],["^ ","^1B",0,"^1C",167,"^G","re-frame.interceptor/update-coeffect"],["^ ","^1B",63,"^1C",167],["^ ","^1B",0,"^1C",169],["^ ","^1B",0,"^1C",170],["^ ","^1B",0,"^1C",170],["^ ","^1B",0,"^1C",170,"^G","re-frame.interceptor/update-coeffect"],["^ ","^1B",57,"^1C",170],["^ ","^1B",68,"^1C",170,"^G","seq46866"],["^ ","^1B",0,"^1C",171],["^ ","^1B",0,"^1C",171],["^ ","^1B",4,"^1C",171,"^G","G__46867"],["^ ","^1B",15,"^1C",171],["^ ","^1B",15,"^1C",171,"^G","cljs.core/first"],["^ ","^1B",31,"^1C",171,"^G","seq46866"],["^ ","^1B",4,"^1C",172,"^G","seq46866"],["^ ","^1B",19,"^1C",172],["^ ","^1B",19,"^1C",172,"^G","cljs.core/next"],["^ ","^1B",34,"^1C",172,"^G","seq46866"],["^ ","^1B",4,"^1C",173,"^G","G__46868"],["^ ","^1B",15,"^1C",173],["^ ","^1B",15,"^1C",173,"^G","cljs.core/first"],["^ ","^1B",31,"^1C",173,"^G","seq46866"],["^ ","^1B",4,"^1C",174,"^G","seq46866"],["^ ","^1B",19,"^1C",174],["^ ","^1B",19,"^1C",174,"^G","cljs.core/next"],["^ ","^1B",34,"^1C",174,"^G","seq46866"],["^ ","^1B",4,"^1C",175,"^G","G__46869"],["^ ","^1B",15,"^1C",175],["^ ","^1B",15,"^1C",175,"^G","cljs.core/first"],["^ ","^1B",31,"^1C",175,"^G","seq46866"],["^ ","^1B",4,"^1C",176,"^G","seq46866"],["^ ","^1B",19,"^1C",176],["^ ","^1B",19,"^1C",176,"^G","cljs.core/next"],["^ ","^1B",34,"^1C",176,"^G","seq46866"],["^ ","^1B",0,"^1C",177],["^ ","^1B",0,"^1C",177],["^ ","^1B",4,"^1C",177,"^G","self__4518__auto__"],["^ ","^1B",25,"^1C",177],["^ ","^1B",0,"^1C",178],["^ ","^1B",0,"^1C",178],["^ ","^1B",7,"^1C",178,"^G","self__4518__auto__"],["^ ","^1B",63,"^1C",178,"^G","G__46867"],["^ ","^1B",72,"^1C",178,"^G","G__46868"],["^ ","^1B",81,"^1C",178,"^G","G__46869"],["^ ","^1B",90,"^1C",178,"^G","seq46866"],["^ ","^1B",0,"^1C",181]],"~i6",[["^ ","^1B",0,"^1C",143,"^G","re-frame.interceptor/update-coeffect"]]],"~i58",["^ ","~i3",[["^ ","^1B",87,"^1C",163,"^G","context"]],"^1E",[["^ ","^1B",95,"^1C",163,"^G","key"]],"^20",[["^ ","^1B",99,"^1C",163,"^G","f"]],"^1N",[["^ ","^1B",101,"^1C",163,"^G","args"]]],"~i59",["^ ","~i2",[["^ ","^1B",0,"^1C",164],["^ ","^1B",81,"^1C",164],["^ ","^1B",164,"^1C",164]],"~i3",[["^ ","^1B",7,"^1C",164,"^G","cljs.core.apply.cljs$core$IFn$_invoke$arity$5"]],"~i9",[["^ ","^1B",53,"^1C",164,"^G","cljs.core/update-in"]],"^1N",[["^ ","^1B",73,"^1C",164,"^G","context"]],"^26",[["^ ","^1B",226,"^1C",164,"^G","key"]],"~i44",[["^ ","^1B",238,"^1C",164,"^G","f"]],"^29",[["^ ","^1B",240,"^1C",164,"^G","args"]]],"~i64",["^ ","~i0",[["^ ","^1B",0,"^1C",181],["^ ","^1B",45,"^1C",181],["^ ","^1B",0,"^1C",182]],"~i7",[["^ ","^1B",0,"^1C",181,"^G","re-frame.interceptor/invoke-interceptor-fn"]]],"~i65",["^ ","~i3",[["^ ","^1B",98,"^1C",181,"^G","context"]],"^1E",[["^ ","^1B",106,"^1C",181,"^G","interceptor"]],"^1Y",[["^ ","^1B",118,"^1C",181,"^G","direction"]]],"~i66",["^ ","~i2",[["^ ","^1B",0,"^1C",182],["^ ","^1B",4,"^1C",182,"^G","temp__5455__auto__"],["^ ","^1B",0,"^1C",183],["^ ","^1B",0,"^1C",183],["^ ","^1B",20,"^1C",183,"^G","temp__5455__auto__"],["^ ","^1B",0,"^1C",184],["^ ","^1B",8,"^1C",184,"^G","temp__5455__auto__"],["^ ","^1B",0,"^1C",185]],"^1E",[["^ ","^1B",4,"^1C",184,"^G","f"]],"^1G",[["^ ","^1B",25,"^1C",182]],"~i14",[["^ ","^1B",25,"^1C",182,"^G","cljs.core.get.cljs$core$IFn$_invoke$arity$2"]],"^1M",[["^ ","^1B",69,"^1C",182,"^G","interceptor"]],"^22",[["^ ","^1B",81,"^1C",182,"^G","direction"]]],"~i67",["^ ","~i4",[["^ ","^1B",0,"^1C",185]],"~i5",[["^ ","^1B",8,"^1C",185,"^G","f"],["^ ","^1B",42,"^1C",185,"^G","f"],["^ ","^1B",85,"^1C",185,"^G","f"]],"~i7",[["^ ","^1B",74,"^1C",185,"^G","context"],["^ ","^1B",97,"^1C",185,"^G","context"]]],"~i68",["^ ","~i4",[["^ ","^1B",0,"^1C",187,"^G","context"]]],"~i71",["^ ","~i0",[["^ ","^1B",0,"^1C",190],["^ ","^1B",43,"^1C",215],["^ ","^1B",0,"^1C",216]],"~i7",[["^ ","^1B",0,"^1C",215,"^G","re-frame.interceptor/invoke-interceptors"]]],"~i95",["^ ","~i4",[["^ ","^1B",94,"^1C",215,"^G","context"]],"^1F",[["^ ","^1B",102,"^1C",215,"^G","direction"]]],"~i96",["^ ","~i3",[["^ ","^1B",0,"^1C",216],["^ ","^1B",0,"^1C",218]],"^1D",[["^ ","^1B",4,"^1C",216,"^G","context"]],"^1M",[["^ ","^1B",18,"^1C",216,"^G","context"]]],"~i97",["^ ","~i5",[["^ ","^1B",0,"^1C",218],["^ ","^1B",0,"^1C",219]],"^1E",[["^ ","^1B",4,"^1C",218,"^G","queue"]],"~i17",[["^ ","^1B",12,"^1C",218],["^ ","^1B",12,"^1C",218]],"^21",[["^ ","^1B",97,"^1C",218,"^G","context"]]],"~i98",["^ ","~i7",[["^ ","^1B",0,"^1C",219]],"^1E",[["^ ","^1B",3,"^1C",219]],"^1F",[["^ ","^1B",3,"^1C",219,"^G","cljs.core/empty?"]],"^1N",[["^ ","^1B",26,"^1C",219,"^G","queue"]]],"~i99",["^ ","~i9",[["^ ","^1B",0,"^1C",220,"^G","context"]]],"~i100",["^ ","~i9",[["^ ","^1B",0,"^1C",222],["^ ","^1B",0,"^1C",224]],"^20",[["^ ","^1B",4,"^1C",222,"^G","interceptor"]],"^1S",[["^ ","^1B",18,"^1C",222]],"~i28",[["^ ","^1B",18,"^1C",222,"^G","cljs.core/peek"]],"^23",[["^ ","^1B",33,"^1C",222,"^G","queue"]]],"~i101",["^ ","^20",[["^ ","^1B",4,"^1C",223,"^G","stack"]],"^1V",[["^ ","^1B",12,"^1C",223],["^ ","^1B",12,"^1C",223]],"^1P",[["^ ","^1B",97,"^1C",223,"^G","context"]]],"~i102",["^ ","^1E",[["^ ","^1B",0,"^1C",224]],"^1O",[["^ ","^1B",111,"^1C",224,"^G","context"]]],"~i103",["^ ","^1O",[["^ ","^1B",58,"^1C",224],["^ ","^1B",123,"^1C",224],["^ ","^1B",249,"^1C",224]],"^1Y",[["^ ","^1B",58,"^1C",224,"^G","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic"]],"^1W",[["^ ","^1B",178,"^1C",224]],"^1H",[["^ ","^1B",178,"^1C",224,"^G","cljs.core/pop"]],"^1I",[["^ ","^1B",192,"^1C",224,"^G","queue"]]],"~i104",["^ ","^1W",[["^ ","^1B",304,"^1C",224]],"^1H",[["^ ","^1B",304,"^1C",224,"^G","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"~i42",[["^ ","^1B",349,"^1C",224,"^G","stack"]],"^1K",[["^ ","^1B",355,"^1C",224,"^G","interceptor"]]],"~i105",["^ ","^1O",[["^ ","^1B",15,"^1C",224]],"^1Y",[["^ ","^1B",15,"^1C",224,"^G","re-frame.interceptor/invoke-interceptor-fn"]],"^28",[["^ ","^1B",374,"^1C",224,"^G","interceptor"]],"^2A",[["^ ","^1B",386,"^1C",224,"^G","direction"]]],"~i108",["^ ","~i0",[["^ ","^1B",0,"^1C",231],["^ ","^1B",31,"^1C",238],["^ ","^1B",0,"^1C",239]],"~i6",[["^ ","^1B",0,"^1C",238,"^G","re-frame.interceptor/enqueue"]]],"~i114",["^ ","~i3",[["^ ","^1B",70,"^1C",238,"^G","context"]],"^1E",[["^ ","^1B",78,"^1C",238,"^G","interceptors"]]],"~i115",["^ ","~i2",[["^ ","^1B",0,"^1C",239],["^ ","^1B",62,"^1C",239]],"~i3",[["^ ","^1B",7,"^1C",239,"^G","cljs.core.update.cljs$core$IFn$_invoke$arity$4"]],"^1D",[["^ ","^1B",54,"^1C",239,"^G","context"]]],"~i116",["^ ","^1D",[["^ ","^1B",117,"^1C",239]],"^1E",[["^ ","^1B",117,"^1C",239,"^G","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2"]],"^1L",[["^ ","^1B",162,"^1C",239,"^G","cljs.core/into"]],"^1V",[["^ ","^1B",177,"^1C",239,"^G","re-frame.interop/empty-queue"]]],"~i117",["^ ","^1D",[["^ ","^1B",207,"^1C",239,"^G","interceptors"]]],"~i120",["^ ","~i0",[["^ ","^1B",0,"^1C",241],["^ ","^1B",0,"^1C",241],["^ ","^1B",31,"^1C",244],["^ ","^1B",70,"^1C",244,"^G","var_args"],["^ ","^1B",0,"^1C",245],["^ ","^1B",0,"^1C",245],["^ ","^1B",4,"^1C",245,"^G","G__46889"],["^ ","^1B",15,"^1C",245],["^ ","^1B",15,"^1C",245],["^ ","^1B",0,"^1C",246],["^ ","^1B",0,"^1C",246],["^ ","^1B",8,"^1C",246,"^G","G__46889"],["^ ","^1B",5,"^1C",247],["^ ","^1B",0,"^1C",248],["^ ","^1B",7,"^1C",248,"^G","re-frame.interceptor/context"],["^ ","^1B",66,"^1C",248],["^ ","^1B",67,"^1C",248],["^ ","^1B",77,"^1C",248],["^ ","^1B",83,"^1C",248],["^ ","^1B",84,"^1C",248],["^ ","^1B",94,"^1C",248],["^ ","^1B",5,"^1C",251],["^ ","^1B",0,"^1C",252],["^ ","^1B",7,"^1C",252,"^G","re-frame.interceptor/context"],["^ ","^1B",66,"^1C",252],["^ ","^1B",67,"^1C",252],["^ ","^1B",77,"^1C",252],["^ ","^1B",83,"^1C",252],["^ ","^1B",84,"^1C",252],["^ ","^1B",94,"^1C",252],["^ ","^1B",100,"^1C",252],["^ ","^1B",101,"^1C",252],["^ ","^1B",111,"^1C",252],["^ ","^1B",0,"^1C",256],["^ ","^1B",6,"^1C",256],["^ ","^1B",11,"^1C",256,"^G","js/Error"],["^ ","^1B",17,"^1C",256],["^ ","^1B",18,"^1C",256],["^ ","^1B",80,"^1C",256],["^ ","^1B",80,"^1C",256],["^ ","^1B",0,"^1C",261],["^ ","^1B",0,"^1C",261],["^ ","^1B",61,"^1C",261],["^ ","^1B",0,"^1C",262],["^ ","^1B",0,"^1C",265],["^ ","^1B",0,"^1C",265],["^ ","^1B",61,"^1C",265],["^ ","^1B",0,"^1C",266],["^ ","^1B",0,"^1C",269],["^ ","^1B",0,"^1C",269],["^ ","^1B",55,"^1C",269],["^ ","^1B",0,"^1C",271]],"~i7",[["^ ","^1B",0,"^1C",244,"^G","re-frame.interceptor/context"],["^ ","^1B",0,"^1C",261,"^G","re-frame.interceptor/context"],["^ ","^1B",0,"^1C",265,"^G","re-frame.interceptor/context"],["^ ","^1B",0,"^1C",269,"^G","re-frame.interceptor/context"]]],"~i122",["^ ","~i4",[["^ ","^1B",72,"^1C",261,"^G","event"]],"^1D",[["^ ","^1B",78,"^1C",261,"^G","interceptors"]]],"~i124",["^ ","~i6",[["^ ","^1B",36,"^1C",262],["^ ","^1B",72,"^1C",262],["^ ","^1B",107,"^1C",262]],"~i7",[["^ ","^1B",36,"^1C",262,"^G","re-frame.interceptor/assoc-coeffect"]],"^1P",[["^ ","^1B",161,"^1C",262,"^G","event"]]],"~i125",["^ ","~i6",[["^ ","^1B",0,"^1C",262]],"~i7",[["^ ","^1B",7,"^1C",262,"^G","re-frame.interceptor/enqueue"]],"^20",[["^ ","^1B",168,"^1C",262,"^G","interceptors"]]],"~i126",["^ ","~i4",[["^ ","^1B",72,"^1C",265,"^G","event"]],"^1D",[["^ ","^1B",78,"^1C",265,"^G","interceptors"]],"^1Y",[["^ ","^1B",91,"^1C",265,"^G","db"]]],"~i127",["^ ","~i7",[["^ ","^1B",43,"^1C",266]],"~i8",[["^ ","^1B",43,"^1C",266,"^G","re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2"]],"^1L",[["^ ","^1B",102,"^1C",266,"^G","event"]],"^1O",[["^ ","^1B",108,"^1C",266,"^G","interceptors"]]],"~i128",["^ ","~i7",[["^ ","^1B",0,"^1C",266],["^ ","^1B",122,"^1C",266]],"~i8",[["^ ","^1B",7,"^1C",266,"^G","re-frame.interceptor/assoc-coeffect"]],"^1S",[["^ ","^1B",170,"^1C",266,"^G","db"]]],"~i131",["^ ","~i0",[["^ ","^1B",0,"^1C",271],["^ ","^1B",40,"^1C",280],["^ ","^1B",0,"^1C",281]],"~i7",[["^ ","^1B",0,"^1C",280,"^G","re-frame.interceptor/change-direction"]]],"~i139",["^ ","~i3",[["^ ","^1B",88,"^1C",280,"^G","context"]]],"~i140",["^ ","~i6",[["^ ","^1B",83,"^1C",281,"^G","context"]]],"~i141",["^ ","~i6",[["^ ","^1B",36,"^1C",281],["^ ","^1B",91,"^1C",281]],"~i7",[["^ ","^1B",36,"^1C",281,"^G","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2"]]],"~i142",["^ ","~i6",[["^ ","^1B",0,"^1C",281]],"~i7",[["^ ","^1B",7,"^1C",281,"^G","re-frame.interceptor/enqueue"]],"^20",[["^ ","^1B",147,"^1C",281],["^ ","^1B",147,"^1C",281]],"^1Y",[["^ ","^1B",232,"^1C",281,"^G","context"]]],"~i145",["^ ","~i0",[["^ ","^1B",0,"^1C",283],["^ ","^1B",31,"^1C",333],["^ ","^1B",0,"^1C",334]],"~i6",[["^ ","^1B",0,"^1C",333,"^G","re-frame.interceptor/execute"]]],"~i194",["^ ","~i3",[["^ ","^1B",70,"^1C",333,"^G","event-v"]],"^1E",[["^ ","^1B",78,"^1C",333,"^G","interceptors"]]],"~i195",["^ ","~i2",[["^ ","^1B",0,"^1C",334],["^ ","^1B",3,"^1C",334],["^ ","^1B",3,"^1C",334,"^G","re-frame.trace/is-trace-enabled?"],["^ ","^1B",0,"^1C",335],["^ ","^1B",0,"^1C",335],["^ ","^1B",4,"^1C",335,"^G","new-trace__46742__auto__"],["^ ","^1B",37,"^1C",335],["^ ","^1B",37,"^1C",335,"^G","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"],["^ ","^1B",140,"^1C",335],["^ ","^1B",140,"^1C",335,"^G","cljs.core.update.cljs$core$IFn$_invoke$arity$4"],["^ ","^1B",187,"^1C",335,"^G","re-frame.trace/*current-trace*"],["^ ","^1B",228,"^1C",335],["^ ","^1B",281,"^1C",335,"^G","cljs.core/merge"],["^ ","^1B",297,"^1C",335],["^ ","^1B",297,"^1C",335],["^ ","^1B",380,"^1C",335],["^ ","^1B",423,"^1C",335],["^ ","^1B",476,"^1C",335],["^ ","^1B",519,"^1C",335],["^ ","^1B",620,"^1C",335],["^ ","^1B",620,"^1C",335,"^G","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2"],["^ ","^1B",667,"^1C",335],["^ ","^1B",710,"^1C",335],["^ ","^1B",763,"^1C",335],["^ ","^1B",806,"^1C",335],["^ ","^1B",905,"^1C",335],["^ ","^1B",0,"^1C",336],["^ ","^1B",0,"^1C",336],["^ ","^1B",0,"^1C",336,"^G","re-frame.trace/*current-trace*"],["^ ","^1B",43,"^1C",336,"^G","new-trace__46742__auto__"],["^ ","^1B",0,"^1C",338],["^ ","^1B",0,"^1C",339]]],"~i196",["^ ","^1R",[["^ ","^1B",589,"^1C",335,"^G","interceptors"],["^ ","^1B",876,"^1C",335,"^G","interceptors"]]],"~i197",["^ ","~i6",[["^ ","^1B",127,"^1C",341]],"~i7",[["^ ","^1B",127,"^1C",341,"^G","re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2"]],"^20",[["^ ","^1B",186,"^1C",341,"^G","event-v"]],"^1Y",[["^ ","^1B",194,"^1C",341,"^G","interceptors"]]],"~i198",["^ ","~i6",[["^ ","^1B",86,"^1C",341],["^ ","^1B",208,"^1C",341]],"~i7",[["^ ","^1B",86,"^1C",341,"^G","re-frame.interceptor/invoke-interceptors"]]],"~i199",["^ ","~i6",[["^ ","^1B",48,"^1C",341,"^G","re-frame.interceptor/change-direction"]]],"~i200",["^ ","~i6",[["^ ","^1B",0,"^1C",341],["^ ","^1B",48,"^1C",341],["^ ","^1B",268,"^1C",341]],"~i7",[["^ ","^1B",7,"^1C",341,"^G","re-frame.interceptor/invoke-interceptors"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1537460974000,1537389904000,"~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"],["^1:","reagent/impl/batching.cljs"],[1533155353000,"^T","^S","~$reagent.debug","~$reagent.interop","~$reagent.impl.util","~$clojure.string"],["^1:","goog/dom/tagname.js"],[1533155346000,"^T","~$goog.dom.HtmlElement"],["~:macro","^S"],[1533155342000],["^1:","goog/math/math.js"],[1533155346000,"^T","~$goog.array","~$goog.asserts"],["^3J","node_modules/schedule/cjs/schedule.production.min.js"],[1537460974000,1537389904000,"^3K"],["^1:","goog/labs/useragent/browser.js"],[1533155346000,"^T","^3T","~$goog.labs.userAgent.util","~$goog.object","~$goog.string"],["^1:","re_frame/loggers.cljc"],[1537460972000,"^T","^S","^Q"],["^3S","^3N"],[1533155353000],["^3J","node_modules/schedule/cjs/schedule-tracing.production.min.js"],[1537460974000,1537389904000,"^3K"],["^1:","goog/array/array.js"],[1533155346000,"^T","^3U"],["^3J","node_modules/prop-types/checkPropTypes.js"],[1537460974000,1534609634000,"^3K","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"],["^1:","reagent/impl/util.cljs"],[1533155353000,"^T","^S","^3N","^3O","^3Q"],["^3S","~$net.cgrand.macrovich"],[1533155354000],["^3J","node_modules/fbjs/lib/emptyFunction.js"],[1537460974000,1534609635000,"^3K"],["^1:","goog/debug/error.js"],[1533155346000,"^T"],["^3J","node_modules/fbjs/lib/emptyObject.js"],[1537460974000,1534609635000,"^3K"],["^1:","goog/dom/nodetype.js"],[1533155346000,"^T"],["^3S","~$reagent.core"],[1533155353000],["^1:","reagent/ratom.cljs"],[1533155353000,"^T","^S","^3P","^3N","~$reagent.impl.batching","^Q"],["^1:","re_frame/interop.cljs"],[1537460972000,"^T","^S","~$goog.async.nextTick","^3[","~$reagent.ratom"],["^3J","node_modules/create-react-class/factory.js"],[1537460974000,1534609635000,"^3K","~$module$node_modules$object_assign$index","~$module$node_modules$fbjs$lib$emptyObject","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$warning"],["^3J","node_modules/react/index.js"],[1537460974000,1537389904000,"^3K","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"],["^1:","shadow/js.js"],[1537460974000,"^T"],["^1:","goog/object/object.js"],[1533155346000,"^T"],["^1:","reagent/impl/template.cljs"],[1533155353000,"^T","^S","^=","^3Q","~$clojure.walk","^3P","~$reagent.impl.component","^40","^42","^3O","^3N"],["^3J","node_modules/react-dom/cjs/react-dom.production.min.js"],[1537460974000,1537389904000,"^3K","^=","^43","~$module$node_modules$schedule$index"],"~:SHADOW-TIMESTAMP",[1537460974000,1533155342000],["^3J","node_modules/react/cjs/react.development.js"],[1537460974000,1537389904000,"^3K","^43","~$module$node_modules$prop_types$checkPropTypes"],["^3S","^42"],[1533155353000],["^1:","goog/math/long.js"],[1533155346000,"^T","^3U","~$goog.reflect"],["^3S","^3O"],[1533155353000],["^3J","node_modules/fbjs/lib/warning.js"],[1537460974000,1534609635000,"^3K","~$module$node_modules$fbjs$lib$emptyFunction"],["^1:","goog/functions/functions.js"],[1533155346000,"^T"],["^1:","reagent/impl/component.cljs"],[1533155353000,"^T","^S","^?","^=","^3P","^40","^42","^3O","^3N"],["^1:","clojure/walk.cljs"],[1533155342000,"^T","^S"],["^1:","goog/structs/map.js"],[1533155346000,"^T","~$goog.iter.Iterator","~$goog.iter.StopIteration","^3W"],["^1:","goog/labs/useragent/engine.js"],[1533155346000,"^T","^3T","^3V","^3X"],["^1:","goog/asserts/asserts.js"],[1533155346000,"^T","~$goog.debug.Error","~$goog.dom.NodeType","^3X"],["^1:","goog/uri/uri.js"],[1533155346000,"^T","^3T","^3U","^3X","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^3J","node_modules/object-assign/index.js"],[1537460974000,1534609614000,"^3K"],["^3J","node_modules/schedule/tracing.js"],[1537460974000,1537389904000,"^3K","~$module$node_modules$schedule$cjs$schedule_tracing_production_min","~$module$node_modules$schedule$cjs$schedule_tracing_development"],["^1:","goog/base.js"],[1533155346000],["^1:","goog/structs/structs.js"],[1533155346000,"^T","^3T","^3W"],["^1:","clojure/string.cljs"],[1533155342000,"^T","^S","^3X","~$goog.string.StringBuffer"],["^3J","node_modules/create-react-class/index.js"],[1537460974000,1534609635000,"^3K","^=","~$module$node_modules$create_react_class$factory"],["^3J","node_modules/schedule/cjs/schedule.development.js"],[1537460974000,1537389904000,"^3K"],["^3J","node_modules/react/cjs/react.production.min.js"],[1537460974000,1537389904000,"^3K","^43"],["^1:","goog/debug/entrypointregistry.js"],[1533155346000,"^T","^3U"],["^1:","goog/string/string.js"],[1533155346000,"^T"],["^3J","node_modules/schedule/cjs/schedule-tracing.development.js"],[1537460974000,1537389904000,"^3K"],["^1:","re_frame/interceptor.cljc"],[1537460972000,"^T","^S","^M","^N","^O","^Q"],["^1:","goog/reflect/reflect.js"],[1533155346000,"^T"],["^1:","goog/labs/useragent/util.js"],[1533155346000,"^T","^3X"],["^1:","reagent/core.cljs"],[1533155353000,"^T","^S","^=","~$reagent.impl.template","^4:","^3P","^40","^42","^3N","^3O","~$reagent.dom"],["^1:","goog/string/stringbuffer.js"],[1533155346000,"^T"],["^1:","goog/iter/iter.js"],[1533155346000,"^T","^3T","^3U","~$goog.functions","~$goog.math"],["^1:","goog/async/nexttick.js"],[1533155346000,"^T","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^4O","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"],["^1:","reagent/dom.cljs"],[1533155353000,"^T","^S","^A","^3P","^4M","^40","^42","^3N","^3O"],["^3J","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1537460974000,1534609634000,"^3K"],["^1:","reagent/interop.cljs"],[1533155353000,"^T","^S"],["^1:","goog/dom/htmlelement.js"],[1533155346000,"^T"],["^1:","cljs/core.cljs"],[1533155342000,"~$goog.math.Long","~$goog.math.Integer","^3X","^3W","^3T","~$goog.Uri","^4K"],["^1:","reagent/debug.cljs"],[1533155353000,"^T","^S"],["^3S","^O"],[1537460972000],["^1:","goog/math/integer.js"],[1533155346000,"^T"],["^3J","node_modules/react-dom/cjs/react-dom.development.js"],[1537460974000,1537389904000,"^3K","^=","^43","^4=","^4;","~$module$node_modules$schedule$tracing"],["^1:","clojure/set.cljs"],[1533155342000,"^T","^S"],["^1:","goog/uri/utils.js"],[1533155346000,"^T","^3T","^3U","^3X"],["^3J","node_modules/schedule/index.js"],[1537460974000,1537389904000,"^3K","~$module$node_modules$schedule$cjs$schedule_production_min","~$module$node_modules$schedule$cjs$schedule_development"],["^3J","node_modules/fbjs/lib/invariant.js"],[1537460974000,1534609635000,"^3K"],["^1:","re_frame/trace.cljc"],[1537460972000,"^T","^S","^N","^M","^4O"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/interceptor.cljc","^7",1,"^8",5,"^9",1,"^:",25],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"^G","^H","^K",null,"^L",["^ ","^M","^M","^N","^N","^O","^O","^P","^O","^Q","^Q","^R","^Q","^S","^S","^T","^T"],"^U",["^F",["^V"]],"~:shadow/js-access-global",["^F",["Error"]],"^W",["^ ","^X","^M","^Y","^N","^Z","^N"],"~:defs",["^ ","~$invoke-interceptors",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",72,"^8",8,"^9",72,"^:",27,"~:private",true,"~:arglists",["^11",["~$quote",["^11",[["~$context","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^54",true,"^G","~$re-frame.interceptor/invoke-interceptors","~:variadic",false,"^6","re_frame/interceptor.cljc","^:",27,"~:method-params",["^11",[["^57","^58"]]],"~:protocol-impl",null,"~:arglists-meta",["^11",[null,null]],"^8",1,"^7",72,"^9",72,"~:max-fixed-arity",2,"~:fn-var",true,"^55",["^11",["^56",["^11",[["^57","^58"]]]]],"^59","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^53",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",54,"^8",7,"^9",54,"^:",21,"^55",["^11",["^56",["^11",[["^57","~$key","~$value"]]]]]],"^G","~$re-frame.interceptor/assoc-coeffect","^5;",false,"^6","re_frame/interceptor.cljc","^:",21,"^5<",["^11",[["^57","^5B","^5C"]]],"^5=",null,"^5>",["^11",[null,null]],"^8",1,"^7",54,"^9",54,"^5?",3,"^5@",true,"^55",["^11",["^56",["^11",[["^57","^5B","^5C"]]]]]],"~$update-coeffect",["^ ","^53",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",58,"^8",7,"^9",58,"^:",22,"^55",["^11",["^56",["^11",[["^57","^5B","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","^5;",true,"^5?",3,"^5<",[["^11",["^57","^5B","~$f","^5F"]]],"^55",["^11",[["^57","^5B","~$f","~$&","^5F"]]],"^5>",["^11",[null]]]],"^G","~$re-frame.interceptor/update-coeffect","^5;",true,"^6","re_frame/interceptor.cljc","^:",22,"^5G",["^ ","^5;",true,"^5?",3,"^5<",[["^11",["^57","^5B","~$f","^5F"]]],"^55",["^11",[["^57","^5B","~$f","~$&","^5F"]]],"^5>",["^11",[null]]],"^5<",[["^11",["^57","^5B","~$f","^5F"]]],"^5=",null,"^5>",["^11",[null]],"^8",1,"^7",58,"^9",58,"^5?",3,"^5@",true,"^55",["^11",[["^57","^5B","~$f","~$&","^5F"]]]],"~$invoke-interceptor-fn",["^ ","^53",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",65,"^8",8,"^9",65,"^:",29,"^54",true,"^55",["^11",["^56",["^11",[["^57","~$interceptor","^58"]]]]]],"^54",true,"^G","~$re-frame.interceptor/invoke-interceptor-fn","^5;",false,"^6","re_frame/interceptor.cljc","^:",29,"^5<",["^11",[["^57","^5J","^58"]]],"^5=",null,"^5>",["^11",[null,null]],"^8",1,"^7",65,"^9",65,"^5?",3,"^5@",true,"^55",["^11",["^56",["^11",[["^57","^5J","^58"]]]]]],"~$get-effect",["^ ","^53",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",31,"^8",7,"^9",31,"^:",17,"^55",["^11",["^56",["^11",[["^57"],["^57","^5B"],["^57","^5B","~$not-found"]]]]],"^5G",["^ ","^5;",false,"^5?",3,"^5<",["^11",[["^57"],["^57","^5B"],["^57","^5B","^5M"]]],"^55",["^11",[["^57"],["^57","^5B"],["^57","^5B","^5M"]]],"^5>",["^11",[null,null,null]]]],"^G","~$re-frame.interceptor/get-effect","^5;",false,"^6","re_frame/interceptor.cljc","^:",17,"^5G",["^ ","^5;",false,"^5?",3,"^5<",["^11",[["^57"],["^57","^5B"],["^57","^5B","^5M"]]],"^55",["^11",[["^57"],["^57","^5B"],["^57","^5B","^5M"]]],"^5>",["^11",[null,null,null]]],"^5<",["^11",[["^57"],["^57","^5B"],["^57","^5B","^5M"]]],"^5=",null,"^5>",["^11",[null,null,null]],"^8",1,"^7",31,"^9",31,"^5?",3,"^5@",true,"^55",["^11",[["^57"],["^57","^5B"],["^57","^5B","^5M"]]]],"~$->interceptor",["^ ","^53",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",17,"^8",7,"^9",17,"^:",20,"^55",["^11",["^56",["^11",[["~$&",["^ ","^14","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^59","Create an interceptor from named arguments","^5G",["^ ","^5;",true,"^5?",0,"^5<",[["^11",[["^ ","^14","~$m","^5P",["^5Q","^5R","^5S"]]]]],"^55",["^11",[["~$&",["^ ","^14","~$m","^5P",["^5Q","^5R","^5S"]]]]],"^5>",["^11",[null]]]],"^G","~$re-frame.interceptor/->interceptor","^5;",true,"^6","re_frame/interceptor.cljc","^:",20,"^5G",["^ ","^5;",true,"^5?",0,"^5<",[["^11",[["^ ","^14","~$m","^5P",["^5Q","^5R","^5S"]]]]],"^55",["^11",[["~$&",["^ ","^14","~$m","^5P",["^5Q","^5R","^5S"]]]]],"^5>",["^11",[null]]],"^5<",[["^11",[["^ ","^14","~$m","^5P",["^5Q","^5R","^5S"]]]]],"^5=",null,"^5>",["^11",[null]],"^8",1,"^7",17,"^9",17,"^5?",0,"^5@",true,"^55",["^11",[["~$&",["^ ","^14","~$m","^5P",["^5Q","^5R","^5S"]]]]],"^59","Create an interceptor from named arguments"],"~$get-coeffect",["^ ","^53",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",46,"^8",7,"^9",46,"^:",19,"^55",["^11",["^56",["^11",[["^57"],["^57","^5B"],["^57","^5B","^5M"]]]]],"^5G",["^ ","^5;",false,"^5?",3,"^5<",["^11",[["^57"],["^57","^5B"],["^57","^5B","^5M"]]],"^55",["^11",[["^57"],["^57","^5B"],["^57","^5B","^5M"]]],"^5>",["^11",[null,null,null]]]],"^G","~$re-frame.interceptor/get-coeffect","^5;",false,"^6","re_frame/interceptor.cljc","^:",19,"^5G",["^ ","^5;",false,"^5?",3,"^5<",["^11",[["^57"],["^57","^5B"],["^57","^5B","^5M"]]],"^55",["^11",[["^57"],["^57","^5B"],["^57","^5B","^5M"]]],"^5>",["^11",[null,null,null]]],"^5<",["^11",[["^57"],["^57","^5B"],["^57","^5B","^5M"]]],"^5=",null,"^5>",["^11",[null,null,null]],"^8",1,"^7",46,"^9",46,"^5?",3,"^5@",true,"^55",["^11",[["^57"],["^57","^5B"],["^57","^5B","^5M"]]]],"~$execute",["^ ","^53",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",146,"^8",7,"^9",146,"^:",14,"^55",["^11",["^56",["^11",[["~$event-v","~$interceptors"]]]]],"^59","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^G","~$re-frame.interceptor/execute","^5;",false,"^6","re_frame/interceptor.cljc","^:",14,"^5<",["^11",[["^5X","^5Y"]]],"^5=",null,"^5>",["^11",[null,null]],"^8",1,"^7",146,"^9",146,"^5?",2,"^5@",true,"^55",["^11",["^56",["^11",[["^5X","^5Y"]]]]],"^59","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^53",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",40,"^8",7,"^9",40,"^:",19,"^55",["^11",["^56",["^11",[["^57","^5B","^5C"]]]]]],"^G","~$re-frame.interceptor/assoc-effect","^5;",false,"^6","re_frame/interceptor.cljc","^:",19,"^5<",["^11",[["^57","^5B","^5C"]]],"^5=",null,"^5>",["^11",[null,null]],"^8",1,"^7",40,"^9",40,"^5?",3,"^5@",true,"^55",["^11",["^56",["^11",[["^57","^5B","^5C"]]]]]],"~$enqueue",["^ ","^53",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",109,"^8",7,"^9",109,"^:",14,"^55",["^11",["^56",["^11",[["^57","^5Y"]]]]],"^59","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"^G","~$re-frame.interceptor/enqueue","^5;",false,"^6","re_frame/interceptor.cljc","^:",14,"^5<",["^11",[["^57","^5Y"]]],"^5=",null,"^5>",["^11",[null,null]],"^8",1,"^7",109,"^9",109,"^5?",2,"^5@",true,"^55",["^11",["^56",["^11",[["^57","^5Y"]]]]],"^59","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"~$mandatory-interceptor-keys",["^ ","^G","~$re-frame.interceptor/mandatory-interceptor-keys","^6","re_frame/interceptor.cljc","^7",9,"^8",1,"^9",9,"^:",32,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",9,"^8",6,"^9",9,"^:",32],"~:tag","~$cljs.core/ISet"],"~$interceptor?",["^ ","^53",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",11,"^8",7,"^9",11,"^:",19,"^55",["^11",["^56",["^11",[["~$m"]]]]]],"^G","~$re-frame.interceptor/interceptor?","^5;",false,"^6","re_frame/interceptor.cljc","^:",19,"^5<",["^11",[["~$m"]]],"^5=",null,"^5>",["^11",[null,null]],"^8",1,"^7",11,"^9",11,"^5?",1,"^5@",true,"^55",["^11",["^56",["^11",[["~$m"]]]]]],"~$change-direction",["^ ","^53",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",132,"^8",8,"^9",132,"^:",24,"^54",true,"^55",["^11",["^56",["^11",[["^57"]]]]],"^59","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^54",true,"^G","~$re-frame.interceptor/change-direction","^5;",false,"^6","re_frame/interceptor.cljc","^:",24,"^5<",["^11",[["^57"]]],"^5=",null,"^5>",["^11",[null,null]],"^8",1,"^7",132,"^9",132,"^5?",1,"^5@",true,"^55",["^11",["^56",["^11",[["^57"]]]]],"^59","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^57",["^ ","^53",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",121,"^8",8,"^9",121,"^:",15,"^54",true,"^55",["^11",["^56",["^11",[["~$event","^5Y"],["^6;","^5Y","~$db"]]]]],"^59","Create a fresh context","^5G",["^ ","^5;",false,"^5?",3,"^5<",["^11",[["^6;","^5Y"],["^6;","^5Y","^6<"]]],"^55",["^11",[["^6;","^5Y"],["^6;","^5Y","^6<"]]],"^5>",["^11",[null,null]]]],"^54",true,"^G","~$re-frame.interceptor/context","^5;",false,"^6","re_frame/interceptor.cljc","^:",15,"^5G",["^ ","^5;",false,"^5?",3,"^5<",["^11",[["^6;","^5Y"],["^6;","^5Y","^6<"]]],"^55",["^11",[["^6;","^5Y"],["^6;","^5Y","^6<"]]],"^5>",["^11",[null,null]]],"^5<",["^11",[["^6;","^5Y"],["^6;","^5Y","^6<"]]],"^5=",null,"^5>",["^11",[null,null]],"^8",1,"^7",121,"^9",121,"^5?",3,"^5@",true,"^55",["^11",[["^6;","^5Y"],["^6;","^5Y","^6<"]]],"^59","Create a fresh context"]],"^[",["^ ","^O","^O","^P","^O","^S","^S"],"~:cljs.analyzer/constants",["^ ","^U",["^F",["~:unnamed","~:tags","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:interceptors","~:before"]],"~:order",["^6D","^6E","^6K","^6H","^6?","^6F","^6I","^6B","^6G","^6C","^6A","^6@","^6J"]],"^16",["^ ","^V",["^F",[]]],"^17",["^ "],"^18",["^T","^S","^M","^N","^O","^Q"]],"^J","^H","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^3I",[["^6O","~:static-fns"],true,["^6O","~:elide-asserts"],false,["^6O","~:optimize-constants"],null,["^6O","~:external-config"],null,["^6O","~:tooling-config"],null,["^6O","~:emit-constants"],null,["^6O","~:infer-externs"],true,["^6O","^1?"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^6O","~:fn-invoke-direct"],null,["^6O","^1A"],"/dev/null"]]]