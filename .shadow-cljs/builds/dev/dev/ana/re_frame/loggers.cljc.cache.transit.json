["^ ","~:output",["^ ","~:js","goog.provide('re_frame.loggers');\ngoog.require('cljs.core');\ngoog.require('clojure.set');\n/**\n * Holds the current set of logging functions.\n * By default, re-frame uses the functions provided by js/console.\n * Use `set-loggers!` to change these defaults\n *   \n */\nre_frame.loggers.loggers = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),console.log.bind(console),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),console.warn.bind(console),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),console.error.bind(console),new cljs.core.Keyword(null,\"group\",\"group\",582596132),(cljs.core.truth_(console.group)?console.group.bind(console):console.log.bind(console)),new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382),(cljs.core.truth_(console.groupEnd)?console.groupEnd.bind(console):(function (){\nreturn cljs.core.List.EMPTY;\n}))], null));\nre_frame.loggers.console = (function re_frame$loggers$console(var_args){\nvar args__4534__auto__ = [];\nvar len__4531__auto___46601 = arguments.length;\nvar i__4532__auto___46602 = (0);\nwhile(true){\nif((i__4532__auto___46602 < len__4531__auto___46601)){\nargs__4534__auto__.push((arguments[i__4532__auto___46602]));\n\nvar G__46607 = (i__4532__auto___46602 + (1));\ni__4532__auto___46602 = G__46607;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4535__auto__ = ((((1) < args__4534__auto__.length))?(new cljs.core.IndexedSeq(args__4534__auto__.slice((1)),(0),null)):null);\nreturn re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4535__auto__);\n});\n\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic = (function (level,args){\nif(cljs.core.contains_QMARK_(cljs.core.deref(re_frame.loggers.loggers),level)){\n} else {\nthrow (new Error([\"Assert failed: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1([\"re-frame: log called with unknown level: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(level)].join('')),\"\\n\",\"(contains? (clojure.core/deref loggers) level)\"].join('')));\n}\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2((function (){var G__46599 = cljs.core.deref(re_frame.loggers.loggers);\nreturn (level.cljs$core$IFn$_invoke$arity$1 ? level.cljs$core$IFn$_invoke$arity$1(G__46599) : level.call(null,G__46599));\n})(),args);\n});\n\nre_frame.loggers.console.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nre_frame.loggers.console.cljs$lang$applyTo = (function (seq46597){\nvar G__46598 = cljs.core.first(seq46597);\nvar seq46597__$1 = cljs.core.next(seq46597);\nvar self__4518__auto__ = this;\nreturn self__4518__auto__.cljs$core$IFn$_invoke$arity$variadic(G__46598,seq46597__$1);\n});\n\n/**\n * Change the set (or a subset) of logging functions used by re-frame.\n *   `new-loggers` should be a map with the same keys as `loggers` (above)\n */\nre_frame.loggers.set_loggers_BANG_ = (function re_frame$loggers$set_loggers_BANG_(new_loggers){\nif(cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(new_loggers)),cljs.core.set(cljs.core.keys(cljs.core.deref(re_frame.loggers.loggers)))))){\n} else {\nthrow (new Error([\"Assert failed: \",\"Unknown keys in new-loggers\",\"\\n\",\"(empty? (difference (set (keys new-loggers)) (-> (clojure.core/deref loggers) keys set)))\"].join('')));\n}\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.loggers.loggers,cljs.core.merge,new_loggers);\n});\n/**\n * Get the current logging functions used by re-frame.\n */\nre_frame.loggers.get_loggers = (function re_frame$loggers$get_loggers(){\nreturn cljs.core.deref(re_frame.loggers.loggers);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/loggers.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",21],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.loggers","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.set","^M","~$cljs.core","^N","~$goog","^O"],"~:seen",["^F",["~:require"]],"~:uses",["^ ","~$difference","^M"],"~:require-macros",["^ ","^N","^N"],"~:form",["~#list",["~$ns","^H",["^V",["^Q",["^M","~:refer",["^S"]]]]]],"~:flags",["^ ","^Q",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^O","^N","^M"]],"^J","^H","~:resource-id",["~:shadow.build.classpath/resource","re_frame/loggers.cljc"],"~:compiled-at",1537561402606,"~:resource-name","re_frame/loggers.cljc","~:warnings",[],"~:source","(ns re-frame.loggers\n  (:require\n   [clojure.set :refer [difference]]\n   #?@(:clj [[clojure.string :as str]\n             [clojure.tools.logging :as log]])))\n\n#?(:clj (defn log [level & args]\n          (log/log level (if (= 1 (count args))\n                           (first args)\n                           (str/join \" \" args)))))\n\n\n;; XXX should loggers be put in the registrar ??\n(def ^:private loggers\n  \"Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  \"\n  (atom #?(:cljs {:log       (js/console.log.bind   js/console)\n                  :warn      (js/console.warn.bind  js/console)\n                  :error     (js/console.error.bind js/console)\n                  :group     (if (.-group js/console)         ;; console.group does not exist  < IE 11\n                               (js/console.group.bind js/console)\n                               (js/console.log.bind   js/console))\n                  :groupEnd  (if (.-groupEnd js/console)        ;; console.groupEnd does not exist  < IE 11\n                               (js/console.groupEnd.bind js/console)\n                               #())})\n        ;; clojure versions\n        #?(:clj {:log      (partial log :info)\n                 :warn     (partial log :warn)\n                 :error    (partial log :error)\n                 :group    (partial log :info)\n                 :groupEnd  #()})))\n\n(defn console\n  [level & args]\n  (assert (contains? @loggers level) (str \"re-frame: log called with unknown level: \" level))\n  (apply (level @loggers) args))\n\n\n(defn set-loggers!\n  \"Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)\"\n  [new-loggers]\n  (assert  (empty? (difference (set (keys new-loggers)) (-> @loggers keys set))) \"Unknown keys in new-loggers\")\n  (swap! loggers merge new-loggers))\n\n(defn get-loggers\n  \"Get the current logging functions used by re-frame.\"\n  []\n  @loggers)\n","~:reader-features",["^F",["~:cljs"]],"~:source-map",["^ ","~i13",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",3]],"~i15",[["^ ","^1:",0,"^1;",9,"^G","re-frame.loggers/loggers"]]],"~i18",["^ ","~i2",[["^ ","^1:",27,"^1;",9],["^ ","^1:",72,"^1;",9],["^ ","^1:",115,"^1;",9],["^ ","^1:",193,"^1;",9],["^ ","^1:",273,"^1;",9],["^ ","^1:",356,"^1;",9],["^ ","^1:",498,"^1;",9]],"~i3",[["^ ","^1:",27,"^1;",9,"^G","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"]],"~i29",[["^ ","^1:",167,"^1;",9]],"~i30",[["^ ","^1:",167,"^1;",9,"^G","js/console.log.bind"]],"~i52",[["^ ","^1:",184,"^1;",9,"^G","js/console"]]],"~i19",["^ ","^1>",[["^ ","^1:",246,"^1;",9]],"^1?",[["^ ","^1:",246,"^1;",9,"^G","js/console.warn.bind"]],"^1@",[["^ ","^1:",264,"^1;",9,"^G","js/console"]]],"~i20",["^ ","^1>",[["^ ","^1:",328,"^1;",9]],"^1?",[["^ ","^1:",328,"^1;",9,"^G","js/console.error.bind"]],"^1@",[["^ ","^1:",347,"^1;",9,"^G","js/console"]]],"~i21",["^ ","^1>",[["^ ","^1:",410,"^1;",9]],"~i33",[["^ ","^1:",428,"^1;",9]],"~i42",[["^ ","^1:",428,"^1;",9,"^G","js/console"]]],"~i22",["^ ","~i31",[["^ ","^1:",443,"^1;",9]],"~i32",[["^ ","^1:",443,"^1;",9,"^G","js/console.group.bind"]],"~i54",[["^ ","^1:",462,"^1;",9,"^G","js/console"]]],"~i23",["^ ","^1G",[["^ ","^1:",471,"^1;",9]],"^1H",[["^ ","^1:",471,"^1;",9,"^G","js/console.log.bind"]],"^1I",[["^ ","^1:",488,"^1;",9,"^G","js/console"]]],"~i24",["^ ","^1>",[["^ ","^1:",559,"^1;",9],["^ ","^1:",626,"^1;",9],["^ ","^1:",0,"^1;",10],["^ ","^1:",0,"^1;",10]],"^1D",[["^ ","^1:",577,"^1;",9]],"~i45",[["^ ","^1:",577,"^1;",9,"^G","js/console"]]],"~i25",["^ ","^1G",[["^ ","^1:",595,"^1;",9]],"^1H",[["^ ","^1:",595,"^1;",9,"^G","js/console.groupEnd.bind"]],"~i57",[["^ ","^1:",617,"^1;",9,"^G","js/console"]]],"~i34",["^ ","~i0",[["^ ","^1:",0,"^1;",12],["^ ","^1:",0,"^1;",12],["^ ","^1:",27,"^1;",12],["^ ","^1:",62,"^1;",12,"^G","var_args"],["^ ","^1:",0,"^1;",13],["^ ","^1:",0,"^1;",13],["^ ","^1:",4,"^1;",13,"^G","args__4534__auto__"],["^ ","^1:",25,"^1;",13],["^ ","^1:",0,"^1;",14],["^ ","^1:",0,"^1;",14],["^ ","^1:",4,"^1;",14,"^G","len__4531__auto__"],["^ ","^1:",30,"^1;",14],["^ ","^1:",30,"^1;",14],["^ ","^1:",0,"^1;",15],["^ ","^1:",0,"^1;",15],["^ ","^1:",4,"^1;",15,"^G","i__4532__auto__"],["^ ","^1:",28,"^1;",15],["^ ","^1:",0,"^1;",17],["^ ","^1:",0,"^1;",17],["^ ","^1:",3,"^1;",17],["^ ","^1:",4,"^1;",17,"^G","i__4532__auto__"],["^ ","^1:",28,"^1;",17,"^G","len__4531__auto__"],["^ ","^1:",0,"^1;",18],["^ ","^1:",0,"^1;",18],["^ ","^1:",0,"^1;",18,"^G","args__4534__auto__"],["^ ","^1:",24,"^1;",18],["^ ","^1:",25,"^1;",18],["^ ","^1:",35,"^1;",18,"^G","i__4532__auto__"],["^ ","^1:",0,"^1;",20],["^ ","^1:",15,"^1;",20],["^ ","^1:",16,"^1;",20,"^G","i__4532__auto__"],["^ ","^1:",40,"^1;",20],["^ ","^1:",0,"^1;",24],["^ ","^1:",0,"^1;",28],["^ ","^1:",4,"^1;",28,"^G","argseq__4535__auto__"],["^ ","^1:",27,"^1;",28],["^ ","^1:",29,"^1;",28],["^ ","^1:",30,"^1;",28],["^ ","^1:",36,"^1;",28],["^ ","^1:",36,"^1;",28,"^G","args__4534__auto__"],["^ ","^1:",64,"^1;",28],["^ ","^1:",64,"^1;",28],["^ ","^1:",69,"^1;",28,"^G","cljs.core/IndexedSeq"],["^ ","^1:",90,"^1;",28],["^ ","^1:",90,"^1;",28,"^G","args__4534__auto__"],["^ ","^1:",115,"^1;",28],["^ ","^1:",120,"^1;",28],["^ ","^1:",124,"^1;",28],["^ ","^1:",131,"^1;",28],["^ ","^1:",0,"^1;",29],["^ ","^1:",0,"^1;",29],["^ ","^1:",7,"^1;",29,"^G","re-frame.loggers/console"],["^ ","^1:",69,"^1;",29],["^ ","^1:",70,"^1;",29],["^ ","^1:",80,"^1;",29],["^ ","^1:",86,"^1;",29,"^G","argseq__4535__auto__"],["^ ","^1:",0,"^1;",32],["^ ","^1:",0,"^1;",32],["^ ","^1:",0,"^1;",32],["^ ","^1:",0,"^1;",32,"^G","re-frame.loggers/console"],["^ ","^1:",64,"^1;",32],["^ ","^1:",0,"^1;",33],["^ ","^1:",0,"^1;",43],["^ ","^1:",0,"^1;",43],["^ ","^1:",0,"^1;",43,"^G","re-frame.loggers/console"],["^ ","^1:",51,"^1;",43],["^ ","^1:",0,"^1;",45],["^ ","^1:",0,"^1;",46],["^ ","^1:",0,"^1;",46],["^ ","^1:",0,"^1;",46,"^G","re-frame.loggers/console"],["^ ","^1:",45,"^1;",46],["^ ","^1:",56,"^1;",46,"^G","seq46597"],["^ ","^1:",0,"^1;",47],["^ ","^1:",0,"^1;",47],["^ ","^1:",4,"^1;",47,"^G","G__46598"],["^ ","^1:",15,"^1;",47],["^ ","^1:",15,"^1;",47,"^G","cljs.core/first"],["^ ","^1:",31,"^1;",47,"^G","seq46597"],["^ ","^1:",4,"^1;",48,"^G","seq46597"],["^ ","^1:",19,"^1;",48],["^ ","^1:",19,"^1;",48,"^G","cljs.core/next"],["^ ","^1:",34,"^1;",48,"^G","seq46597"],["^ ","^1:",0,"^1;",49],["^ ","^1:",0,"^1;",49],["^ ","^1:",4,"^1;",49,"^G","self__4518__auto__"],["^ ","^1:",25,"^1;",49],["^ ","^1:",0,"^1;",50],["^ ","^1:",0,"^1;",50],["^ ","^1:",7,"^1;",50,"^G","self__4518__auto__"],["^ ","^1:",63,"^1;",50,"^G","G__46598"],["^ ","^1:",72,"^1;",50,"^G","seq46597"],["^ ","^1:",0,"^1;",53]],"~i6",[["^ ","^1:",0,"^1;",12,"^G","re-frame.loggers/console"]]],"~i35",["^ ","~i3",[["^ ","^1:",75,"^1;",32,"^G","level"]],"~i11",[["^ ","^1:",81,"^1;",32,"^G","args"]]],"~i36",["^ ","~i2",[["^ ","^1:",0,"^1;",33],["^ ","^1:",0,"^1;",34],["^ ","^1:",0,"^1;",35],["^ ","^1:",0,"^1;",35],["^ ","^1:",6,"^1;",35],["^ ","^1:",11,"^1;",35,"^G","js/Error"],["^ ","^1:",17,"^1;",35],["^ ","^1:",18,"^1;",35],["^ ","^1:",187,"^1;",35],["^ ","^1:",192,"^1;",35]],"~i10",[["^ ","^1:",3,"^1;",33],["^ ","^1:",29,"^1;",33],["^ ","^1:",29,"^1;",33,"^G","cljs.core/deref"]],"^1Q",[["^ ","^1:",3,"^1;",33,"^G","cljs.core/contains?"]],"^1F",[["^ ","^1:",45,"^1;",33,"^G","re-frame.loggers/loggers"]],"^1?",[["^ ","^1:",71,"^1;",33,"^G","level"]],"~i37",[["^ ","^1:",80,"^1;",35],["^ ","^1:",81,"^1;",35]],"~i86",[["^ ","^1:",169,"^1;",35,"^G","level"]]],"^1T",["^ ","~i2",[["^ ","^1:",0,"^1;",38]],"~i3",[["^ ","^1:",7,"^1;",38,"^G","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"]],"~i9",[["^ ","^1:",53,"^1;",38],["^ ","^1:",70,"^1;",38,"^G","G__46599"],["^ ","^1:",81,"^1;",38],["^ ","^1:",81,"^1;",38,"^G","cljs.core/deref"],["^ ","^1:",0,"^1;",39],["^ ","^1:",0,"^1;",39],["^ ","^1:",82,"^1;",39,"^G","G__46599"],["^ ","^1:",110,"^1;",39,"^G","G__46599"]],"^1S",[["^ ","^1:",8,"^1;",39,"^G","level"],["^ ","^1:",46,"^1;",39,"^G","level"],["^ ","^1:",94,"^1;",39,"^G","level"]],"~i17",[["^ ","^1:",97,"^1;",38,"^G","re-frame.loggers/loggers"]],"~i26",[["^ ","^1:",5,"^1;",40,"^G","args"]]],"~i40",["^ ","~i0",[["^ ","^1:",0,"^1;",53],["^ ","^1:",37,"^1;",57],["^ ","^1:",0,"^1;",58]],"~i6",[["^ ","^1:",0,"^1;",57,"^G","re-frame.loggers/set-loggers!"]]],"~i43",["^ ","~i3",[["^ ","^1:",82,"^1;",57,"^G","new-loggers"]]],"~i44",["^ ","~i2",[["^ ","^1:",0,"^1;",58],["^ ","^1:",0,"^1;",59],["^ ","^1:",0,"^1;",60],["^ ","^1:",0,"^1;",60],["^ ","^1:",6,"^1;",60],["^ ","^1:",11,"^1;",60,"^G","js/Error"],["^ ","^1:",17,"^1;",60],["^ ","^1:",18,"^1;",60],["^ ","^1:",36,"^1;",60],["^ ","^1:",66,"^1;",60],["^ ","^1:",71,"^1;",60]],"^1Q",[["^ ","^1:",3,"^1;",58]],"~i12",[["^ ","^1:",3,"^1;",58,"^G","cljs.core/empty?"]],"^1A",[["^ ","^1:",26,"^1;",58]],"^1B",[["^ ","^1:",26,"^1;",58,"^G","clojure.set.difference.cljs$core$IFn$_invoke$arity$2"]],"^1G",[["^ ","^1:",79,"^1;",58]],"^1H",[["^ ","^1:",79,"^1;",58,"^G","cljs.core/set"]],"^1R",[["^ ","^1:",93,"^1;",58]],"^1T",[["^ ","^1:",93,"^1;",58,"^G","cljs.core/keys"]],"^1E",[["^ ","^1:",108,"^1;",58,"^G","new-loggers"]],"~i56",[["^ ","^1:",122,"^1;",58],["^ ","^1:",136,"^1;",58],["^ ","^1:",151,"^1;",58],["^ ","^1:",151,"^1;",58,"^G","cljs.core/deref"]],"~i61",[["^ ","^1:",167,"^1;",58,"^G","re-frame.loggers/loggers"]],"~i69",[["^ ","^1:",136,"^1;",58,"^G","cljs.core/keys"]],"~i74",[["^ ","^1:",122,"^1;",58,"^G","cljs.core/set"]]],"^1L",["^ ","~i2",[["^ ","^1:",0,"^1;",63]],"~i3",[["^ ","^1:",7,"^1;",63,"^G","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3"]],"~i9",[["^ ","^1:",58,"^1;",63,"^G","re-frame.loggers/loggers"]],"^1V",[["^ ","^1:",83,"^1;",63,"^G","cljs.core/merge"]],"^1J",[["^ ","^1:",99,"^1;",63,"^G","new-loggers"]]],"~i47",["^ ","~i0",[["^ ","^1:",0,"^1;",65],["^ ","^1:",31,"^1;",68],["^ ","^1:",0,"^1;",69],["^ ","^1:",0,"^1;",69],["^ ","^1:",7,"^1;",69,"^G","cljs.core/deref"]],"~i6",[["^ ","^1:",0,"^1;",68,"^G","re-frame.loggers/get-loggers"]]],"~i50",["^ ","~i3",[["^ ","^1:",23,"^1;",69,"^G","re-frame.loggers/loggers"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["~:macro","^N"],[1533155342000],["^11","goog/math/math.js"],[1533155346000,"^O","~$goog.array","~$goog.asserts"],["^11","re_frame/loggers.cljc"],[1537460972000,"^O","^N","^M"],["^11","goog/array/array.js"],[1533155346000,"^O","^2;"],["^11","goog/debug/error.js"],[1533155346000,"^O"],["^11","goog/dom/nodetype.js"],[1533155346000,"^O"],["^11","goog/object/object.js"],[1533155346000,"^O"],"~:SHADOW-TIMESTAMP",[1537460974000,1533155342000],["^11","goog/math/long.js"],[1533155346000,"^O","^2;","~$goog.reflect"],["^11","goog/functions/functions.js"],[1533155346000,"^O"],["^11","goog/structs/map.js"],[1533155346000,"^O","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^11","goog/asserts/asserts.js"],[1533155346000,"^O","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^11","goog/uri/uri.js"],[1533155346000,"^O","^2:","^2;","^2C","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^11","goog/base.js"],[1533155346000],["^11","goog/structs/structs.js"],[1533155346000,"^O","^2:","^2@"],["^11","goog/string/string.js"],[1533155346000,"^O"],["^11","goog/reflect/reflect.js"],[1533155346000,"^O"],["^11","goog/string/stringbuffer.js"],[1533155346000,"^O"],["^11","goog/iter/iter.js"],[1533155346000,"^O","^2:","^2;","~$goog.functions","~$goog.math"],["^11","cljs/core.cljs"],[1533155342000,"~$goog.math.Long","~$goog.math.Integer","^2C","^2@","^2:","~$goog.Uri","~$goog.string.StringBuffer"],["^11","goog/math/integer.js"],[1533155346000,"^O"],["^11","clojure/set.cljs"],[1533155342000,"^O","^N"],["^11","goog/uri/utils.js"],[1533155346000,"^O","^2:","^2;","^2C"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/loggers.cljc","^7",1,"^8",5,"^9",1,"^:",21],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"^G","^H","^K",null,"^L",["^ ","^M","^M","^N","^N","^O","^O"],"^P",["^F",["^Q"]],"~:shadow/js-access-global",["^F",["Error"]],"^R",["^ ","^S","^M"],"~:defs",["^ ","~$loggers",["^ ","^5",["^ ","^6","re_frame/loggers.cljc","^7",14,"^8",16,"^9",14,"^:",23,"~:private",true],"^2S",true,"^G","~$re-frame.loggers/loggers","^6","re_frame/loggers.cljc","^:",23,"^8",1,"^7",14,"^9",14,"~:tag","~$any","~:doc","Holds the current set of logging functions.\n   By default, re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  "],"~$console",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",35,"^8",7,"^9",35,"^:",14,"~:arglists",["^V",["~$quote",["^V",[["~$level","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",1,"~:method-params",[["^V",["^30","^31"]]],"^2Z",["^V",[["^30","~$&","^31"]]],"~:arglists-meta",["^V",[null]]]],"^G","~$re-frame.loggers/console","^33",true,"^6","re_frame/loggers.cljc","^:",14,"^32",["^ ","^33",true,"^34",1,"^35",[["^V",["^30","^31"]]],"^2Z",["^V",[["^30","~$&","^31"]]],"^36",["^V",[null]]],"^35",[["^V",["^30","^31"]]],"~:protocol-impl",null,"^36",["^V",[null]],"^8",1,"^7",35,"^9",35,"^34",1,"~:fn-var",true,"^2Z",["^V",[["^30","~$&","^31"]]]],"~$set-loggers!",["^ ","^2Y",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",41,"^8",7,"^9",41,"^:",19,"^2Z",["^V",["^2[",["^V",[["~$new-loggers"]]]]],"^2W","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"^G","~$re-frame.loggers/set-loggers!","^33",false,"^6","re_frame/loggers.cljc","^:",19,"^35",["^V",[["^3;"]]],"^38",null,"^36",["^V",[null,null]],"^8",1,"^7",41,"^9",41,"^34",1,"^39",true,"^2Z",["^V",["^2[",["^V",[["^3;"]]]]],"^2W","Change the set (or a subset) of logging functions used by re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"~$get-loggers",["^ ","^2Y",null,"^5",["^ ","^6","re_frame/loggers.cljc","^7",48,"^8",7,"^9",48,"^:",18,"^2Z",["^V",["^2[",["^V",[[]]]]],"^2W","Get the current logging functions used by re-frame."],"^G","~$re-frame.loggers/get-loggers","^33",false,"^6","re_frame/loggers.cljc","^:",18,"^35",["^V",[[]]],"^38",null,"^36",["^V",[null,null]],"^8",1,"^7",48,"^9",48,"^34",0,"^39",true,"^2Z",["^V",["^2[",["^V",[[]]]]],"^2W","Get the current logging functions used by re-frame."]],"^T",["^ ","^N","^N"],"~:cljs.analyzer/constants",["^ ","^P",["^F",["~:group","~:warn","~:error","~:groupEnd","~:log"]],"~:order",["^3D","^3A","^3B","^3@","^3C"]],"^Y",["^ ","^Q",["^F",[]]],"^Z",["^ "],"^[",["^O","^N","^M"]],"^J","^H","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^28",[["^3H","~:static-fns"],true,["^3H","~:elide-asserts"],false,["^3H","~:optimize-constants"],null,["^3H","~:external-config"],null,["^3H","~:tooling-config"],null,["^3H","~:emit-constants"],null,["^3H","~:infer-externs"],true,["^3H","^16"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3H","~:fn-invoke-direct"],null,["^3H","^18"],"/dev/null"]]]