["^ ","~:output",["^ ","~:js","goog.provide('rewrite_clj.zip.removez');\ngoog.require('cljs.core');\ngoog.require('rewrite_clj.zip.move');\ngoog.require('rewrite_clj.zip.utils');\ngoog.require('rewrite_clj.zip.whitespace');\ngoog.require('clojure.zip');\n/**\n * Remove all whitespace following a given node.\n */\nrewrite_clj.zip.removez.remove_trailing_space = (function rewrite_clj$zip$removez$remove_trailing_space(zloc,p_QMARK_){\nreturn rewrite_clj.zip.utils.remove_right_while(zloc,p_QMARK_);\n});\n/**\n * Remove all whitespace preceding a given node.\n */\nrewrite_clj.zip.removez.remove_preceding_space = (function rewrite_clj$zip$removez$remove_preceding_space(zloc,p_QMARK_){\nreturn rewrite_clj.zip.utils.remove_left_while(zloc,p_QMARK_);\n});\n/**\n * Remove value at the given zipper location. Returns the first non-whitespace\n * node that would have preceded it in a depth-first walk. Will remove whitespace\n * appropriately.\n * \n *   - `[1  2  3]   => [1  3]`\n *   - `[1 2]       => [1]`\n *   - `[1 2]       => [2]`\n *   - `[1]         => []`\n *   - `[  1  ]     => []`\n *   - `[1 [2 3] 4] => [1 [2 3]]`\n *   - `[1 [2 3] 4] => [[2 3] 4]`\n * \n * If a node is located rightmost, both preceding and trailing spaces are removed,\n * otherwise only trailing spaces are touched. This means that a following element\n * (no matter whether on the same line or not) will end up in the same position\n * (line/column) as the removed one, _unless_ a comment lies between the original\n * node and the neighbour.\n */\nrewrite_clj.zip.removez.remove = (function rewrite_clj$zip$removez$remove(zloc){\nif(cljs.core.truth_(zloc)){\n} else {\nthrow (new Error(\"Assert failed: zloc\"));\n}\n\nvar _PERCENT_ = rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2(clojure.zip.prev,clojure.zip.remove(rewrite_clj.zip.removez.remove_trailing_space((cljs.core.truth_((function (){var or__3949__auto__ = rewrite_clj.zip.move.rightmost_QMARK_(zloc);\nif(cljs.core.truth_(or__3949__auto__)){\nreturn or__3949__auto__;\n} else {\nreturn rewrite_clj.zip.move.leftmost_QMARK_(zloc);\n}\n})())?rewrite_clj.zip.removez.remove_preceding_space(zloc,rewrite_clj.zip.whitespace.whitespace_QMARK_):zloc),rewrite_clj.zip.whitespace.whitespace_QMARK_)));\nif(cljs.core.truth_(_PERCENT_)){\n} else {\nthrow (new Error(\"Assert failed: %\"));\n}\n\nreturn _PERCENT_;\n});\n/**\n * Same as remove but preserves newlines\n */\nrewrite_clj.zip.removez.remove_preserve_newline = (function rewrite_clj$zip$removez$remove_preserve_newline(zloc){\nif(cljs.core.truth_(zloc)){\n} else {\nthrow (new Error(\"Assert failed: zloc\"));\n}\n\nvar _PERCENT_ = rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2(clojure.zip.prev,clojure.zip.remove(rewrite_clj.zip.removez.remove_trailing_space((cljs.core.truth_((function (){var or__3949__auto__ = rewrite_clj.zip.move.rightmost_QMARK_(zloc);\nif(cljs.core.truth_(or__3949__auto__)){\nreturn or__3949__auto__;\n} else {\nreturn rewrite_clj.zip.move.leftmost_QMARK_(zloc);\n}\n})())?rewrite_clj.zip.removez.remove_preceding_space(zloc,(function (p1__44794_SHARP_){\nvar and__3938__auto__ = rewrite_clj.zip.whitespace.whitespace_QMARK_(p1__44794_SHARP_);\nif(cljs.core.truth_(and__3938__auto__)){\nreturn cljs.core.not(rewrite_clj.zip.whitespace.linebreak_QMARK_(p1__44794_SHARP_));\n} else {\nreturn and__3938__auto__;\n}\n})):zloc),(function (p1__44795_SHARP_){\nvar and__3938__auto__ = rewrite_clj.zip.whitespace.whitespace_QMARK_(p1__44795_SHARP_);\nif(cljs.core.truth_(and__3938__auto__)){\nreturn cljs.core.not(rewrite_clj.zip.whitespace.linebreak_QMARK_(p1__44795_SHARP_));\n} else {\nreturn and__3938__auto__;\n}\n}))));\nif(cljs.core.truth_(_PERCENT_)){\n} else {\nthrow (new Error(\"Assert failed: %\"));\n}\n\nreturn _PERCENT_;\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rewrite_clj/zip/removez.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",28],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",["~$remove"]],"~:name","~$rewrite-clj.zip.removez","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.zip","^N","~$u","~$rewrite-clj.zip.utils","~$cljs.core","^P","~$ws","~$rewrite-clj.zip.whitespace","~$goog","^S","~$m","~$rewrite-clj.zip.move","^R","^R","^T","^T","~$z","^N","^O","^O"],"~:seen",["^F",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^P","^P"],"~:form",["~#list",["~$ns","^I",["^Z",["~:refer-clojure","~:exclude",["^G"]]],["^Z",["^V",["^T","~:as","~$m"],["^O","^12","~$u"],["^R","^12","^Q"],["^N","^12","~$z"]]]]],"~:flags",["^ ","^V",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^S","^P","^T","^O","^R","^N"]],"^K","^I","~:resource-id",["~:shadow.build.classpath/resource","rewrite_clj/zip/removez.cljs"],"~:compiled-at",1537561400609,"~:resource-name","rewrite_clj/zip/removez.cljs","~:warnings",[],"~:source","(ns rewrite-clj.zip.removez\n  (:refer-clojure :exclude [remove])\n  (:require [rewrite-clj.zip.move :as m]\n            [rewrite-clj.zip.utils :as u]\n            [rewrite-clj.zip.whitespace :as ws]\n            [clojure.zip :as z]))\n\n\n(defn- remove-trailing-space\n  \"Remove all whitespace following a given node.\"\n  [zloc p?]\n  (u/remove-right-while zloc p?))\n\n(defn- remove-preceding-space\n  \"Remove all whitespace preceding a given node.\"\n  [zloc p?]\n  (u/remove-left-while zloc p?))\n\n(defn remove\n  \"Remove value at the given zipper location. Returns the first non-whitespace\n   node that would have preceded it in a depth-first walk. Will remove whitespace\n   appropriately.\n\n  - `[1  2  3]   => [1  3]`\n  - `[1 2]       => [1]`\n  - `[1 2]       => [2]`\n  - `[1]         => []`\n  - `[  1  ]     => []`\n  - `[1 [2 3] 4] => [1 [2 3]]`\n  - `[1 [2 3] 4] => [[2 3] 4]`\n\n   If a node is located rightmost, both preceding and trailing spaces are removed,\n   otherwise only trailing spaces are touched. This means that a following element\n   (no matter whether on the same line or not) will end up in the same position\n   (line/column) as the removed one, _unless_ a comment lies between the original\n   node and the neighbour.\"\n  [zloc]\n  {:pre [zloc]\n   :post [%]}\n  (->> (-> (if (or (m/rightmost? zloc)\n                   (m/leftmost? zloc))\n             (remove-preceding-space zloc ws/whitespace?)\n             zloc)\n           (remove-trailing-space ws/whitespace?)\n           z/remove)\n       (ws/skip-whitespace z/prev)))\n\n(defn remove-preserve-newline\n  \"Same as remove but preserves newlines\"\n  [zloc]\n  {:pre [zloc]\n   :post [%]}\n  (->> (-> (if (or (m/rightmost? zloc)\n                   (m/leftmost? zloc))\n             (remove-preceding-space zloc #(and (ws/whitespace? %)\n                                                (not (ws/linebreak? %))))\n             zloc)\n           (remove-trailing-space #(and (ws/whitespace? %)\n                                                (not (ws/linebreak? %))))\n           z/remove)\n       (ws/skip-whitespace z/prev)))\n\n","~:reader-features",["^F",["~:cljs"]],"~:source-map",["^ ","~i8",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",6],["^ ","^1?",48,"^1@",9],["^ ","^1?",0,"^1@",10]],"~i7",[["^ ","^1?",0,"^1@",9,"^H","rewrite-clj.zip.removez/remove-trailing-space"]]],"~i10",["^ ","~i3",[["^ ","^1?",104,"^1@",9,"^H","zloc"]],"~i8",[["^ ","^1?",109,"^1@",9,"^H","p?"]]],"~i11",["^ ","~i2",[["^ ","^1?",0,"^1@",10]],"~i3",[["^ ","^1?",7,"^1@",10,"^H","rewrite-clj.zip.utils/remove-right-while"]],"~i24",[["^ ","^1?",48,"^1@",10,"^H","zloc"]],"~i29",[["^ ","^1?",53,"^1@",10,"^H","p?"]]],"~i13",["^ ","~i0",[["^ ","^1?",0,"^1@",12],["^ ","^1?",49,"^1@",15],["^ ","^1?",0,"^1@",16]],"~i7",[["^ ","^1?",0,"^1@",15,"^H","rewrite-clj.zip.removez/remove-preceding-space"]]],"~i15",["^ ","~i3",[["^ ","^1?",106,"^1@",15,"^H","zloc"]],"~i8",[["^ ","^1?",111,"^1@",15,"^H","p?"]]],"~i16",["^ ","~i2",[["^ ","^1?",0,"^1@",16]],"~i3",[["^ ","^1?",7,"^1@",16,"^H","rewrite-clj.zip.utils/remove-left-while"]],"~i23",[["^ ","^1?",47,"^1@",16,"^H","zloc"]],"~i28",[["^ ","^1?",52,"^1@",16,"^H","p?"]]],"~i18",["^ ","~i0",[["^ ","^1?",0,"^1@",18],["^ ","^1?",33,"^1@",37],["^ ","^1?",0,"^1@",38],["^ ","^1?",0,"^1@",38],["^ ","^1?",0,"^1@",39],["^ ","^1?",0,"^1@",40],["^ ","^1?",0,"^1@",40],["^ ","^1?",6,"^1@",40],["^ ","^1?",11,"^1@",40,"^H","js/Error"],["^ ","^1?",17,"^1@",40],["^ ","^1?",0,"^1@",43],["^ ","^1?",4,"^1@",43,"^H","%"],["^ ","^1?",0,"^1@",50],["^ ","^1?",0,"^1@",50],["^ ","^1?",0,"^1@",51],["^ ","^1?",0,"^1@",52],["^ ","^1?",0,"^1@",52],["^ ","^1?",6,"^1@",52],["^ ","^1?",11,"^1@",52,"^H","js/Error"],["^ ","^1?",17,"^1@",52],["^ ","^1?",0,"^1@",55,"^H","%"]],"~i6",[["^ ","^1?",0,"^1@",37,"^H","rewrite-clj.zip.removez/remove"]]],"~i36",["^ ","~i3",[["^ ","^1?",74,"^1@",37,"^H","zloc"]]],"~i37",["^ ","~i9",[["^ ","^1?",20,"^1@",38,"^H","zloc"]]],"~i38",["^ ","^1A",[["^ ","^1?",20,"^1@",50,"^H","%"]]],"~i39",["^ ","~i7",[["^ ","^1?",106,"^1@",43]],"^1B",[["^ ","^1?",171,"^1@",43]],"^1F",[["^ ","^1?",189,"^1@",43],["^ ","^1?",206,"^1@",43,"^H","or__3949__auto__"],["^ ","^1?",0,"^1@",44],["^ ","^1?",0,"^1@",44],["^ ","^1?",20,"^1@",44,"^H","or__3949__auto__"],["^ ","^1?",0,"^1@",45,"^H","or__3949__auto__"]],"~i19",[["^ ","^1?",225,"^1@",43]],"~i20",[["^ ","^1?",225,"^1@",43,"^H","rewrite-clj.zip.move/rightmost?"]],"~i33",[["^ ","^1?",263,"^1@",43,"^H","zloc"]]],"~i40",["^ ","^1O",[["^ ","^1?",0,"^1@",47]],"^1P",[["^ ","^1?",7,"^1@",47,"^H","rewrite-clj.zip.move/leftmost?"]],"~i32",[["^ ","^1?",44,"^1@",47,"^H","zloc"]]],"~i41",["^ ","^1E",[["^ ","^1?",6,"^1@",49]],"~i14",[["^ ","^1?",6,"^1@",49,"^H","rewrite-clj.zip.removez/remove-preceding-space"]],"^1L",[["^ ","^1?",53,"^1@",49,"^H","zloc"]],"~i42",[["^ ","^1?",58,"^1@",49,"^H","rewrite-clj.zip.whitespace/whitespace?"]]],"^1V",["^ ","^1E",[["^ ","^1?",104,"^1@",49,"^H","zloc"]]],"~i43",["^ ","^1B",[["^ ","^1?",125,"^1@",43]],"~i12",[["^ ","^1?",125,"^1@",43,"^H","rewrite-clj.zip.removez/remove-trailing-space"]],"~i34",[["^ ","^1?",110,"^1@",49,"^H","rewrite-clj.zip.whitespace/whitespace?"]]],"~i44",["^ ","^1B",[["^ ","^1?",106,"^1@",43,"^H","clojure.zip/remove"]]],"~i45",["^ ","~i7",[["^ ","^1?",16,"^1@",43]],"~i8",[["^ ","^1?",16,"^1@",43,"^H","rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2"]],"~i27",[["^ ","^1?",89,"^1@",43,"^H","clojure.zip/prev"]]],"~i47",["^ ","~i0",[["^ ","^1?",0,"^1@",57],["^ ","^1?",50,"^1@",60],["^ ","^1?",0,"^1@",61],["^ ","^1?",0,"^1@",61],["^ ","^1?",0,"^1@",62],["^ ","^1?",0,"^1@",63],["^ ","^1?",0,"^1@",63],["^ ","^1?",6,"^1@",63],["^ ","^1?",11,"^1@",63,"^H","js/Error"],["^ ","^1?",17,"^1@",63],["^ ","^1?",0,"^1@",66],["^ ","^1?",4,"^1@",66,"^H","%"],["^ ","^1?",0,"^1@",87],["^ ","^1?",0,"^1@",87],["^ ","^1?",0,"^1@",88],["^ ","^1?",0,"^1@",89],["^ ","^1?",0,"^1@",89],["^ ","^1?",6,"^1@",89],["^ ","^1?",11,"^1@",89,"^H","js/Error"],["^ ","^1?",17,"^1@",89],["^ ","^1?",0,"^1@",92,"^H","%"]],"~i6",[["^ ","^1?",0,"^1@",60,"^H","rewrite-clj.zip.removez/remove-preserve-newline"]]],"~i49",["^ ","~i3",[["^ ","^1?",108,"^1@",60,"^H","zloc"]]],"~i50",["^ ","~i9",[["^ ","^1?",20,"^1@",61,"^H","zloc"]]],"~i51",["^ ","^1A",[["^ ","^1?",20,"^1@",87,"^H","%"]]],"~i52",["^ ","~i7",[["^ ","^1?",106,"^1@",66]],"^1B",[["^ ","^1?",171,"^1@",66]],"^1F",[["^ ","^1?",189,"^1@",66],["^ ","^1?",206,"^1@",66,"^H","or__3949__auto__"],["^ ","^1?",0,"^1@",67],["^ ","^1?",0,"^1@",67],["^ ","^1?",20,"^1@",67,"^H","or__3949__auto__"],["^ ","^1?",0,"^1@",68,"^H","or__3949__auto__"]],"^1O",[["^ ","^1?",225,"^1@",66]],"^1P",[["^ ","^1?",225,"^1@",66,"^H","rewrite-clj.zip.move/rightmost?"]],"^1Q",[["^ ","^1?",263,"^1@",66,"^H","zloc"]]],"~i53",["^ ","^1O",[["^ ","^1?",0,"^1@",70]],"^1P",[["^ ","^1?",7,"^1@",70,"^H","rewrite-clj.zip.move/leftmost?"]],"^1S",[["^ ","^1?",44,"^1@",70,"^H","zloc"]]],"~i54",["^ ","^1E",[["^ ","^1?",6,"^1@",72],["^ ","^1?",58,"^1@",72],["^ ","^1?",69,"^1@",72,"^H","p1__44794#"],["^ ","^1?",0,"^1@",73]],"^1U",[["^ ","^1?",6,"^1@",72,"^H","rewrite-clj.zip.removez/remove-preceding-space"]],"^1L",[["^ ","^1?",53,"^1@",72,"^H","zloc"]],"^1W",[["^ ","^1?",0,"^1@",73],["^ ","^1?",4,"^1@",73,"^H","and__3938__auto__"],["^ ","^1?",0,"^1@",74],["^ ","^1?",0,"^1@",74],["^ ","^1?",20,"^1@",74,"^H","and__3938__auto__"],["^ ","^1?",0,"^1@",77,"^H","and__3938__auto__"]],"~i48",[["^ ","^1?",24,"^1@",73],["^ ","^1?",69,"^1@",73,"^H","p1__44794#"]],"^22",[["^ ","^1?",24,"^1@",73,"^H","rewrite-clj.zip.whitespace/whitespace?"]]],"~i55",["^ ","^28",[["^ ","^1?",0,"^1@",75]],"^22",[["^ ","^1?",7,"^1@",75,"^H","cljs.core/not"]],"^26",[["^ ","^1?",21,"^1@",75],["^ ","^1?",65,"^1@",75,"^H","p1__44794#"]],"^27",[["^ ","^1?",21,"^1@",75,"^H","rewrite-clj.zip.whitespace/linebreak?"]]],"~i56",["^ ","^1E",[["^ ","^1?",4,"^1@",79,"^H","zloc"]]],"~i57",["^ ","^1B",[["^ ","^1?",125,"^1@",66],["^ ","^1?",10,"^1@",79],["^ ","^1?",21,"^1@",79,"^H","p1__44795#"],["^ ","^1?",0,"^1@",80]],"^1X",[["^ ","^1?",125,"^1@",66,"^H","rewrite-clj.zip.removez/remove-trailing-space"]],"~i35",[["^ ","^1?",0,"^1@",80],["^ ","^1?",4,"^1@",80,"^H","and__3938__auto__"],["^ ","^1?",0,"^1@",81],["^ ","^1?",0,"^1@",81],["^ ","^1?",20,"^1@",81,"^H","and__3938__auto__"],["^ ","^1?",0,"^1@",84,"^H","and__3938__auto__"]],"^1R",[["^ ","^1?",24,"^1@",80],["^ ","^1?",69,"^1@",80,"^H","p1__44795#"]],"^1T",[["^ ","^1?",24,"^1@",80,"^H","rewrite-clj.zip.whitespace/whitespace?"]]],"~i58",["^ ","^28",[["^ ","^1?",0,"^1@",82]],"^22",[["^ ","^1?",7,"^1@",82,"^H","cljs.core/not"]],"^26",[["^ ","^1?",21,"^1@",82],["^ ","^1?",65,"^1@",82,"^H","p1__44795#"]],"^27",[["^ ","^1?",21,"^1@",82,"^H","rewrite-clj.zip.whitespace/linebreak?"]]],"~i59",["^ ","^1B",[["^ ","^1?",106,"^1@",66,"^H","clojure.zip/remove"]]],"~i60",["^ ","~i7",[["^ ","^1?",16,"^1@",66]],"~i8",[["^ ","^1?",16,"^1@",66,"^H","rewrite_clj.zip.whitespace.skip_whitespace.cljs$core$IFn$_invoke$arity$2"]],"^20",[["^ ","^1?",89,"^1@",66,"^H","clojure.zip/prev"]]]],"~:cljc",false],"~:cache-keys",["~#cmap",[["^17","rewrite_clj/node/token.cljs"],[1533155355000,"^S","^P","~$rewrite-clj.node.protocols"],["~:macro","^P"],[1533155342000],["^17","cljs/tools/reader/impl/utils.cljs"],[1533235982000,"^S","^P","~$clojure.string","~$goog.string"],["^17","goog/math/math.js"],[1533155346000,"^S","~$goog.array","~$goog.asserts"],["^17","goog/array/array.js"],[1533155346000,"^S","^2H"],["^2D","~$cljs.tools.reader.reader-types"],[1533235982000],["^17","rewrite_clj/zip/move.cljs"],[1533155355000,"^S","^P","^R","^N"],["^17","goog/debug/error.js"],[1533155346000,"^S"],["^17","goog/dom/nodetype.js"],[1533155346000,"^S"],["^17","cljs/tools/reader/impl/inspect.cljs"],[1533235982000,"^S","^P"],["^17","cljs/tools/reader.cljs"],[1533235982000,"^S","^P","^2I","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader.impl.errors","^2G","^2F","~$goog.string.StringBuffer"],["^17","rewrite_clj/node/forms.cljs"],[1533155355000,"^S","^P","^2C"],["^17","rewrite_clj/zip/utils.cljs"],[1533155355000,"^S","^P","^N"],["^17","goog/object/object.js"],[1533155346000,"^S"],"~:SHADOW-TIMESTAMP",[1537460974000,1533155342000],["^17","goog/math/long.js"],[1533155346000,"^S","^2H","~$goog.reflect"],["^17","rewrite_clj/node/reader_macro.cljs"],[1533155355000,"^S","^P","^2C","~$rewrite-clj.node.whitespace"],["^17","goog/functions/functions.js"],[1533155346000,"^S"],["^17","clojure/walk.cljs"],[1533155342000,"^S","^P"],["^17","goog/structs/map.js"],[1533155346000,"^S","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^17","rewrite_clj/node/meta.cljs"],[1533155355000,"^S","^P","^2C","^2P"],["^17","rewrite_clj/node/stringz.cljs"],[1533155355000,"^S","^P","^2C","~$cljs.tools.reader","^2E"],["^17","rewrite_clj/node/comment.cljs"],[1533155355000,"^S","^P","^2C"],["^17","rewrite_clj/node/keyword.cljs"],[1533155355000,"^S","^P","^2C"],["^17","goog/asserts/asserts.js"],[1533155346000,"^S","~$goog.debug.Error","~$goog.dom.NodeType","^2F"],["^17","goog/uri/uri.js"],[1533155346000,"^S","^2G","^2H","^2F","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^17","rewrite_clj/node/protocols.cljs"],[1533155355000,"^S","^P","^2E"],["^17","rewrite_clj/node/seq.cljs"],[1533155355000,"^S","^P","^2C"],["^17","rewrite_clj/node/uneval.cljs"],[1533155355000,"^S","^P","^2C"],["^17","goog/base.js"],[1533155346000],["^17","goog/structs/structs.js"],[1533155346000,"^S","^2G","^2S"],["^17","cljs/tools/reader/impl/errors.cljs"],[1533235982000,"^S","^P","^2I","^2E","~$cljs.tools.reader.impl.inspect"],["^17","rewrite_clj/node/whitespace.cljs"],[1533155355000,"^S","^P","^2C"],["^17","rewrite_clj/node/coercer.cljs"],[1533155355000,"^S","^P","~$rewrite-clj.node.comment","~$rewrite-clj.node.forms","~$rewrite-clj.node.keyword","~$rewrite-clj.node.quote","~$rewrite-clj.node.stringz","~$rewrite-clj.node.uneval","~$rewrite-clj.node.meta","~$rewrite-clj.node.fn","^2C","~$rewrite-clj.node.reader-macro","~$rewrite-clj.node.seq","~$rewrite-clj.node.token","^2P"],["^17","clojure/string.cljs"],[1533155342000,"^S","^P","^2F","^2M"],["^17","goog/string/string.js"],[1533155346000,"^S"],["^17","goog/reflect/reflect.js"],[1533155346000,"^S"],["^17","rewrite_clj/node/fn.cljs"],[1533155355000,"^S","^P","^2C","~$clojure.walk"],["^17","rewrite_clj/node.cljs"],[1533155355000,"^S","^P","~$rewrite-clj.node.coercer","^2C","^33","^3:","^2P","^3;","^31","^32","^37","^35","^39","^34","^36","^38"],["^17","rewrite_clj/zip/removez.cljs"],[1533155355000,"^S","^P","^T","^O","^R","^N"],["^17","clojure/zip.cljs"],[1533155342000,"^S","^P"],["^17","goog/string/stringbuffer.js"],[1533155346000,"^S"],["^17","cljs/tools/reader/reader_types.cljs"],[1533235982000,"^S","^P","^2J","^2F","^2M"],["^17","goog/iter/iter.js"],[1533155346000,"^S","^2G","^2H","~$goog.functions","~$goog.math"],["^17","rewrite_clj/node/quote.cljs"],[1533155355000,"^S","^P","^2C"],["^17","cljs/tools/reader/impl/commons.cljs"],[1533235982000,"^S","^P","^2L","^2I","^2J"],["^17","cljs/core.cljs"],[1533155342000,"~$goog.math.Long","~$goog.math.Integer","^2F","^2S","^2G","~$goog.Uri","^2M"],["^17","goog/math/integer.js"],[1533155346000,"^S"],["^17","goog/uri/utils.js"],[1533155346000,"^S","^2G","^2H","^2F"],["^17","rewrite_clj/zip/whitespace.cljs"],[1533155355000,"^S","^P","~$rewrite-clj.node","^N"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rewrite_clj/zip/removez.cljs","^7",1,"^8",5,"^9",1,"^:",28],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",["^G"]],"^H","^I","^L",null,"^M",["^ ","^N","^N","~$u","^O","^P","^P","^Q","^R","^S","^S","~$m","^T","^R","^R","^T","^T","~$z","^N","^O","^O"],"^U",["^F",["^V"]],"~:shadow/js-access-global",["^F",["Error"]],"^W",null,"~:defs",["^ ","~$remove-trailing-space",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rewrite_clj/zip/removez.cljs","^7",9,"^8",8,"^9",9,"^:",29,"~:private",true,"~:arglists",["^Z",["~$quote",["^Z",[["~$zloc","~$p?"]]]]],"~:doc","Remove all whitespace following a given node."],"^3I",true,"^H","~$rewrite-clj.zip.removez/remove-trailing-space","~:variadic",false,"^6","rewrite_clj/zip/removez.cljs","^:",29,"~:method-params",["^Z",[["^3L","^3M"]]],"~:protocol-impl",null,"~:arglists-meta",["^Z",[null,null]],"^8",1,"^7",9,"^9",9,"~:max-fixed-arity",2,"~:fn-var",true,"^3J",["^Z",["^3K",["^Z",[["^3L","^3M"]]]]],"^3N","Remove all whitespace following a given node."],"~$remove-preceding-space",["^ ","^3H",null,"^5",["^ ","^6","rewrite_clj/zip/removez.cljs","^7",14,"^8",8,"^9",14,"^:",30,"^3I",true,"^3J",["^Z",["^3K",["^Z",[["^3L","^3M"]]]]],"^3N","Remove all whitespace preceding a given node."],"^3I",true,"^H","~$rewrite-clj.zip.removez/remove-preceding-space","^3P",false,"^6","rewrite_clj/zip/removez.cljs","^:",30,"^3Q",["^Z",[["^3L","^3M"]]],"^3R",null,"^3S",["^Z",[null,null]],"^8",1,"^7",14,"^9",14,"^3T",2,"^3U",true,"^3J",["^Z",["^3K",["^Z",[["^3L","^3M"]]]]],"^3N","Remove all whitespace preceding a given node."],"^G",["^ ","^3H",null,"^5",["^ ","^6","rewrite_clj/zip/removez.cljs","^7",19,"^8",7,"^9",19,"^:",13,"^3J",["^Z",["^3K",["^Z",[["^3L"]]]]],"^3N","Remove value at the given zipper location. Returns the first non-whitespace\n   node that would have preceded it in a depth-first walk. Will remove whitespace\n   appropriately.\n\n  - `[1  2  3]   => [1  3]`\n  - `[1 2]       => [1]`\n  - `[1 2]       => [2]`\n  - `[1]         => []`\n  - `[  1  ]     => []`\n  - `[1 [2 3] 4] => [1 [2 3]]`\n  - `[1 [2 3] 4] => [[2 3] 4]`\n\n   If a node is located rightmost, both preceding and trailing spaces are removed,\n   otherwise only trailing spaces are touched. This means that a following element\n   (no matter whether on the same line or not) will end up in the same position\n   (line/column) as the removed one, _unless_ a comment lies between the original\n   node and the neighbour."],"^H","~$rewrite-clj.zip.removez/remove","^3P",false,"^6","rewrite_clj/zip/removez.cljs","^:",13,"^3Q",["^Z",[["^3L"]]],"^3R",null,"^3S",["^Z",[null,null]],"^8",1,"^7",19,"^9",19,"^3T",1,"^3U",true,"^3J",["^Z",["^3K",["^Z",[["^3L"]]]]],"^3N","Remove value at the given zipper location. Returns the first non-whitespace\n   node that would have preceded it in a depth-first walk. Will remove whitespace\n   appropriately.\n\n  - `[1  2  3]   => [1  3]`\n  - `[1 2]       => [1]`\n  - `[1 2]       => [2]`\n  - `[1]         => []`\n  - `[  1  ]     => []`\n  - `[1 [2 3] 4] => [1 [2 3]]`\n  - `[1 [2 3] 4] => [[2 3] 4]`\n\n   If a node is located rightmost, both preceding and trailing spaces are removed,\n   otherwise only trailing spaces are touched. This means that a following element\n   (no matter whether on the same line or not) will end up in the same position\n   (line/column) as the removed one, _unless_ a comment lies between the original\n   node and the neighbour."],"~$remove-preserve-newline",["^ ","^3H",null,"^5",["^ ","^6","rewrite_clj/zip/removez.cljs","^7",48,"^8",7,"^9",48,"^:",30,"^3J",["^Z",["^3K",["^Z",[["^3L"]]]]],"^3N","Same as remove but preserves newlines"],"^H","~$rewrite-clj.zip.removez/remove-preserve-newline","^3P",false,"^6","rewrite_clj/zip/removez.cljs","^:",30,"^3Q",["^Z",[["^3L"]]],"^3R",null,"^3S",["^Z",[null,null]],"^8",1,"^7",48,"^9",48,"^3T",1,"^3U",true,"^3J",["^Z",["^3K",["^Z",[["^3L"]]]]],"^3N","Same as remove but preserves newlines"]],"^X",["^ ","^P","^P"],"^13",["^ ","^V",["^F",[]]],"^14",["^ "],"^15",["^S","^P","^T","^O","^R","^N"]],"^K","^I","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^2B",[["^41","~:static-fns"],true,["^41","~:elide-asserts"],false,["^41","~:optimize-constants"],null,["^41","~:external-config"],null,["^41","~:tooling-config"],null,["^41","~:emit-constants"],null,["^41","~:infer-externs"],true,["^41","^1<"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^41","~:fn-invoke-direct"],null,["^41","^1>"],"/dev/null"]]]