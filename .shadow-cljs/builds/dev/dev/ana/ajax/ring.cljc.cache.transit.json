["^ ","~:output",["^ ","~:js","goog.provide('ajax.ring');\ngoog.require('cljs.core');\ngoog.require('ajax.interceptors');\ngoog.require('ajax.protocols');\ngoog.require('ajax.formats');\najax.ring.make_ring_read = (function ajax$ring$make_ring_read(body_read){\nreturn (function ajax$ring$make_ring_read_$_ring_read(response){\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"status\",\"status\",-1997798413),ajax.protocols._status(response),new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),ajax.protocols._get_all_headers(response),new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),(body_read.cljs$core$IFn$_invoke$arity$1 ? body_read.cljs$core$IFn$_invoke$arity$1(response) : body_read.call(null,response))], null);\n});\n});\n/**\n * Returns a Ring-compatible response map.\n * \n * Optionally can be passed a :format option. This should be another\n * response-format map. If format is provided it will be used to\n * specify the content-type, and the read method will be used to\n * populate the :body key in the response map.\n */\najax.ring.ring_response_format = (function ajax$ring$ring_response_format(var_args){\nvar G__49494 = arguments.length;\nswitch (G__49494) {\ncase 0:\nreturn ajax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn ajax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\najax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn ajax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"format\",\"format\",-1306924766),ajax.formats.raw_response_format.cljs$core$IFn$_invoke$arity$0()], null));\n});\n\najax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$1 = (function (p__49500){\nvar map__49501 = p__49500;\nvar map__49501__$1 = ((((!((map__49501 == null)))?(((((map__49501.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__49501.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__49501):map__49501);\nvar map__49502 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__49501__$1,new cljs.core.Keyword(null,\"format\",\"format\",-1306924766));\nvar map__49502__$1 = ((((!((map__49502 == null)))?(((((map__49502.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__49502.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__49502):map__49502);\nvar read = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__49502__$1,new cljs.core.Keyword(null,\"read\",\"read\",1140058661));\nvar description = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__49502__$1,new cljs.core.Keyword(null,\"description\",\"description\",-1428560544));\nvar content_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__49502__$1,new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634));\nreturn ajax.interceptors.map__GT_ResponseFormat(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"read\",\"read\",1140058661),ajax.ring.make_ring_read(read),new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),[\"ring/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(description)].join(''),new cljs.core.Keyword(null,\"content-type\",\"content-type\",-508222634),content_type], null));\n});\n\najax.ring.ring_response_format.cljs$lang$maxFixedArity = 1;\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","ajax/ring.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",14],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$ajax.ring","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$ajax.interceptors","^M","~$ajax.protocols","^N","~$ajax.formats","^O","~$f","^O","~$cljs.core","^P","~$goog","^Q"],"~:seen",["^F",["~:require"]],"~:uses",["^ ","~$map->ResponseFormat","^M","~$-status","^N","~$-get-all-headers","^N","~$-body","^N"],"~:require-macros",["^ ","^P","^P"],"~:form",["~#list",["~$ns","^H",["^[",["^S",["^M","~:refer",["^U"]],["^N","^11",["^V","^W","^X"]],["^O","~:as","~$f"]]]]],"~:flags",["^ ","^S",["^F",[]]],"~:js-deps",["^ "],"~:deps",["^Q","^P","^M","^N","^O"]],"^J","^H","~:resource-id",["~:shadow.build.classpath/resource","ajax/ring.cljc"],"~:compiled-at",1537561404366,"~:resource-name","ajax/ring.cljc","~:warnings",[],"~:source","(ns ajax.ring\n  (:require [ajax.interceptors :refer [map->ResponseFormat]]\n            [ajax.protocols :refer [-status -get-all-headers -body]]\n            [ajax.formats :as f]))\n\n(defn make-ring-read [body-read]\n  (fn ring-read [response]\n    {:status (-status response)\n     :headers (-get-all-headers response)\n     :body (body-read response)}))\n\n(defn ring-response-format\n  \"Returns a Ring-compatible response map.\n\n   Optionally can be passed a :format option. This should be another\n   response-format map. If format is provided it will be used to\n   specify the content-type, and the read method will be used to\n   populate the :body key in the response map.\"\n  ([] (ring-response-format {:format (f/raw-response-format)}))\n  ([{{:keys [read description content-type]} :format}]\n   (map->ResponseFormat {:read (make-ring-read read)\n                         :description (str \"ring/\" description)\n                         :content-type content-type})))\n","~:reader-features",["^F",["~:cljs"]],"~:source-map",["^ ","~i5",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",5],["^ ","^1?",27,"^1@",5],["^ ","^1?",0,"^1@",6]],"~i6",[["^ ","^1?",0,"^1@",5,"^G","ajax.ring/make-ring-read"]],"~i22",[["^ ","^1?",62,"^1@",5,"^G","body-read"]]],"~i6",["^ ","~i2",[["^ ","^1?",0,"^1@",6],["^ ","^1?",0,"^1@",7],["^ ","^1?",0,"^1@",7],["^ ","^1?",50,"^1@",7],["^ ","^1?",141,"^1@",7],["^ ","^1?",242,"^1@",7]],"~i17",[["^ ","^1?",54,"^1@",6,"^G","response"]]],"~i7",["^ ","~i13",[["^ ","^1?",108,"^1@",7]],"~i14",[["^ ","^1?",108,"^1@",7,"^G","ajax.protocols/-status"]],"^1A",[["^ ","^1?",131,"^1@",7,"^G","response"]]],"~i8",["^ ","^1D",[["^ ","^1?",200,"^1@",7]],"~i15",[["^ ","^1?",200,"^1@",7,"^G","ajax.protocols/-get-all-headers"]],"~i32",[["^ ","^1?",232,"^1@",7,"^G","response"]]],"~i9",["^ ","~i11",[["^ ","^1?",296,"^1@",7]],"~i12",[["^ ","^1?",297,"^1@",7,"^G","body-read"],["^ ","^1?",339,"^1@",7,"^G","body-read"],["^ ","^1?",391,"^1@",7,"^G","body-read"]],"^1A",[["^ ","^1?",379,"^1@",7,"^G","response"],["^ ","^1?",411,"^1@",7,"^G","response"]]],"^1G",["^ ","~i0",[["^ ","^1?",0,"^1@",10],["^ ","^1?",0,"^1@",10],["^ ","^1?",33,"^1@",18],["^ ","^1?",74,"^1@",18,"^G","var_args"],["^ ","^1?",0,"^1@",19],["^ ","^1?",0,"^1@",19],["^ ","^1?",4,"^1@",19,"^G","G__49494"],["^ ","^1?",15,"^1@",19],["^ ","^1?",15,"^1@",19],["^ ","^1?",0,"^1@",20],["^ ","^1?",0,"^1@",20],["^ ","^1?",8,"^1@",20,"^G","G__49494"],["^ ","^1?",5,"^1@",21],["^ ","^1?",0,"^1@",22],["^ ","^1?",7,"^1@",22,"^G","ajax.ring/ring-response-format"],["^ ","^1?",5,"^1@",25],["^ ","^1?",0,"^1@",26],["^ ","^1?",7,"^1@",26,"^G","ajax.ring/ring-response-format"],["^ ","^1?",68,"^1@",26],["^ ","^1?",69,"^1@",26],["^ ","^1?",79,"^1@",26],["^ ","^1?",0,"^1@",30],["^ ","^1?",6,"^1@",30],["^ ","^1?",11,"^1@",30,"^G","js/Error"],["^ ","^1?",17,"^1@",30],["^ ","^1?",18,"^1@",30],["^ ","^1?",80,"^1@",30],["^ ","^1?",80,"^1@",30],["^ ","^1?",0,"^1@",35],["^ ","^1?",0,"^1@",35],["^ ","^1?",63,"^1@",35],["^ ","^1?",0,"^1@",36],["^ ","^1?",0,"^1@",39],["^ ","^1?",0,"^1@",39],["^ ","^1?",63,"^1@",39],["^ ","^1?",74,"^1@",39,"^G","p__49500"],["^ ","^1?",0,"^1@",40],["^ ","^1?",0,"^1@",40],["^ ","^1?",4,"^1@",40,"^G","map__49501"],["^ ","^1?",17,"^1@",40,"^G","p__49500"],["^ ","^1?",4,"^1@",41,"^G","map__49501"],["^ ","^1?",21,"^1@",41],["^ ","^1?",23,"^1@",41],["^ ","^1?",25,"^1@",41],["^ ","^1?",27,"^1@",41],["^ ","^1?",28,"^1@",41,"^G","map__49501"],["^ ","^1?",42,"^1@",41],["^ ","^1?",50,"^1@",41],["^ ","^1?",52,"^1@",41],["^ ","^1?",54,"^1@",41],["^ ","^1?",55,"^1@",41],["^ ","^1?",55,"^1@",41,"^G","map__49501"],["^ ","^1?",104,"^1@",41],["^ ","^1?",115,"^1@",41],["^ ","^1?",116,"^1@",41,"^G","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1?",148,"^1@",41],["^ ","^1?",148,"^1@",41,"^G","map__49501"],["^ ","^1?",179,"^1@",41],["^ ","^1?",184,"^1@",41],["^ ","^1?",191,"^1@",41],["^ ","^1?",199,"^1@",41],["^ ","^1?",199,"^1@",41,"^G","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1?",245,"^1@",41,"^G","cljs.core/hash-map"],["^ ","^1?",264,"^1@",41,"^G","map__49501"],["^ ","^1?",276,"^1@",41,"^G","map__49501"],["^ ","^1?",4,"^1@",42,"^G","map__49502"],["^ ","^1?",17,"^1@",42],["^ ","^1?",17,"^1@",42,"^G","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1?",61,"^1@",42,"^G","map__49501"],["^ ","^1?",76,"^1@",42],["^ ","^1?",4,"^1@",43,"^G","map__49502"],["^ ","^1?",21,"^1@",43],["^ ","^1?",23,"^1@",43],["^ ","^1?",25,"^1@",43],["^ ","^1?",27,"^1@",43],["^ ","^1?",28,"^1@",43,"^G","map__49502"],["^ ","^1?",42,"^1@",43],["^ ","^1?",50,"^1@",43],["^ ","^1?",52,"^1@",43],["^ ","^1?",54,"^1@",43],["^ ","^1?",55,"^1@",43],["^ ","^1?",55,"^1@",43,"^G","map__49502"],["^ ","^1?",104,"^1@",43],["^ ","^1?",115,"^1@",43],["^ ","^1?",116,"^1@",43,"^G","cljs.core/PROTOCOL_SENTINEL"],["^ ","^1?",148,"^1@",43],["^ ","^1?",148,"^1@",43,"^G","map__49502"],["^ ","^1?",179,"^1@",43],["^ ","^1?",184,"^1@",43],["^ ","^1?",191,"^1@",43],["^ ","^1?",199,"^1@",43],["^ ","^1?",199,"^1@",43,"^G","cljs.core.apply.cljs$core$IFn$_invoke$arity$2"],["^ ","^1?",245,"^1@",43,"^G","cljs.core/hash-map"],["^ ","^1?",264,"^1@",43,"^G","map__49502"],["^ ","^1?",276,"^1@",43,"^G","map__49502"],["^ ","^1?",11,"^1@",44],["^ ","^1?",11,"^1@",44,"^G","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1?",55,"^1@",44,"^G","map__49502"],["^ ","^1?",70,"^1@",44],["^ ","^1?",18,"^1@",45],["^ ","^1?",18,"^1@",45,"^G","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1?",62,"^1@",45,"^G","map__49502"],["^ ","^1?",77,"^1@",45],["^ ","^1?",19,"^1@",46],["^ ","^1?",19,"^1@",46,"^G","cljs.core.get.cljs$core$IFn$_invoke$arity$2"],["^ ","^1?",63,"^1@",46,"^G","map__49502"],["^ ","^1?",78,"^1@",46],["^ ","^1?",0,"^1@",47],["^ ","^1?",0,"^1@",50],["^ ","^1?",0,"^1@",50],["^ ","^1?",57,"^1@",50],["^ ","^1?",0,"^1@",52]],"~i6",[["^ ","^1?",0,"^1@",18,"^G","ajax.ring/ring-response-format"],["^ ","^1?",0,"^1@",35,"^G","ajax.ring/ring-response-format"],["^ ","^1?",0,"^1@",39,"^G","ajax.ring/ring-response-format"],["^ ","^1?",0,"^1@",50,"^G","ajax.ring/ring-response-format"]]],"~i18",["^ ","~i6",[["^ ","^1?",0,"^1@",36],["^ ","^1?",68,"^1@",36],["^ ","^1?",111,"^1@",36]],"~i7",[["^ ","^1?",7,"^1@",36,"^G","ajax.ring.ring_response_format.cljs$core$IFn$_invoke$arity$1"]],"~i37",[["^ ","^1?",169,"^1@",36]],"~i38",[["^ ","^1?",169,"^1@",36,"^G","ajax.formats.raw_response_format.cljs$core$IFn$_invoke$arity$0"]]],"~i19",["^ ","^1C",[["^ ","^1?",4,"^1@",44,"^G","read"]],"^1I",[["^ ","^1?",4,"^1@",45,"^G","description"]],"~i30",[["^ ","^1?",4,"^1@",46,"^G","content-type"]]],"~i20",["^ ","~i3",[["^ ","^1?",0,"^1@",47],["^ ","^1?",48,"^1@",47],["^ ","^1?",91,"^1@",47],["^ ","^1?",175,"^1@",47],["^ ","^1?",319,"^1@",47]],"~i4",[["^ ","^1?",7,"^1@",47,"^G","ajax.interceptors/map->ResponseFormat"]],"~i31",[["^ ","^1?",144,"^1@",47]],"^1F",[["^ ","^1?",144,"^1@",47,"^G","ajax.ring/make-ring-read"]],"~i47",[["^ ","^1?",169,"^1@",47,"^G","read"]]],"~i21",["^ ","^1K",[["^ ","^1?",243,"^1@",47],["^ ","^1?",244,"^1@",47]],"~i51",[["^ ","^1?",296,"^1@",47,"^G","description"]]],"^1A",["^ ","~i39",[["^ ","^1?",388,"^1@",47,"^G","content-type"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["~:macro","^P"],[1533155342000],["^17","goog/math/math.js"],[1533155346000,"^Q","~$goog.array","~$goog.asserts"],["^17","goog/array/array.js"],[1533155346000,"^Q","^1Y"],["^17","goog/debug/error.js"],[1533155346000,"^Q"],["^17","ajax/interceptors.cljc"],[1533155352000,"^Q","^P","~$clojure.string","~$ajax.util","~$ajax.url","^N"],["^17","goog/dom/nodetype.js"],[1533155346000,"^Q"],["^17","ajax/protocols.cljc"],[1533155352000,"^Q","^P"],["^17","ajax/url.cljc"],[1533155352000,"^Q","^P","^1Z","^1["],["^17","goog/object/object.js"],[1533155346000,"^Q"],"~:SHADOW-TIMESTAMP",[1537460974000,1533155342000],["^17","goog/math/long.js"],[1533155346000,"^Q","^1Y","~$goog.reflect"],["^17","goog/functions/functions.js"],[1533155346000,"^Q"],["^17","goog/structs/map.js"],[1533155346000,"^Q","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^17","ajax/util.cljc"],[1533155352000,"^Q","^P","^N"],["^17","ajax/ring.cljc"],[1533155352000,"^Q","^P","^M","^N","^O"],["^17","goog/asserts/asserts.js"],[1533155346000,"^Q","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^17","goog/uri/uri.js"],[1533155346000,"^Q","^1X","^1Y","^28","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^17","goog/base.js"],[1533155346000],["^17","goog/structs/structs.js"],[1533155346000,"^Q","^1X","^25"],["^1W","~$ajax.macros"],[1533155352000],["^17","clojure/string.cljs"],[1533155342000,"^Q","^P","^28","~$goog.string.StringBuffer"],["^17","goog/string/string.js"],[1533155346000,"^Q"],["^17","ajax/formats.cljc"],[1533155352000,"^Q","^P","^M","^1[","^N"],["^17","goog/reflect/reflect.js"],[1533155346000,"^Q"],["^17","goog/string/stringbuffer.js"],[1533155346000,"^Q"],["^17","goog/iter/iter.js"],[1533155346000,"^Q","^1X","^1Y","~$goog.functions","~$goog.math"],["^17","cljs/core.cljs"],[1533155342000,"~$goog.math.Long","~$goog.math.Integer","^28","^25","^1X","~$goog.Uri","^2?"],["^1W","~$poppea"],[1533155353000],["^17","goog/math/integer.js"],[1533155346000,"^Q"],["^17","goog/uri/utils.js"],[1533155346000,"^Q","^1X","^1Y","^28"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","ajax/ring.cljc","^7",1,"^8",5,"^9",1,"^:",14],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",[]],"^G","^H","^K",null,"^L",["^ ","^M","^M","^N","^N","^O","^O","~$f","^O","^P","^P","^Q","^Q"],"^R",["^F",["^S"]],"~:shadow/js-access-global",["^F",["Error"]],"^T",["^ ","^U","^M","^V","^N","^W","^N","^X","^N"],"~:defs",["^ ","~$make-ring-read",["^ ","~:protocol-inline",null,"^5",["^ ","^6","ajax/ring.cljc","^7",6,"^8",7,"^9",6,"^:",21,"~:arglists",["^[",["~$quote",["^[",[["~$body-read"]]]]]],"^G","~$ajax.ring/make-ring-read","~:variadic",false,"^6","ajax/ring.cljc","^:",21,"~:method-params",["^[",[["^2M"]]],"~:protocol-impl",null,"~:arglists-meta",["^[",[null,null]],"^8",1,"^7",6,"^9",6,"~:max-fixed-arity",1,"~:fn-var",true,"^2K",["^[",["^2L",["^[",[["^2M"]]]]]],"~$ring-response-format",["^ ","^2J",null,"^5",["^ ","^6","ajax/ring.cljc","^7",12,"^8",7,"^9",12,"^:",27,"^2K",["^[",["^2L",["^[",[[],[["^1V",[["^ ","~:keys",["~$read","~$description","~$content-type"]],"~:format"]]]]]]],"~:doc","Returns a Ring-compatible response map.\n\n   Optionally can be passed a :format option. This should be another\n   response-format map. If format is provided it will be used to\n   specify the content-type, and the read method will be used to\n   populate the :body key in the response map.","~:top-fn",["^ ","^2O",false,"^2S",1,"^2P",["^[",[[],[["^1V",[["^ ","^2V",["^2W","^2X","^2Y"]],"^2Z"]]]]],"^2K",["^[",[[],[["^1V",[["^ ","^2V",["^2W","^2X","^2Y"]],"^2Z"]]]]],"^2R",["^[",[null,null]]]],"^G","~$ajax.ring/ring-response-format","^2O",false,"^6","ajax/ring.cljc","^:",27,"^30",["^ ","^2O",false,"^2S",1,"^2P",["^[",[[],[["^1V",[["^ ","^2V",["^2W","^2X","^2Y"]],"^2Z"]]]]],"^2K",["^[",[[],[["^1V",[["^ ","^2V",["^2W","^2X","^2Y"]],"^2Z"]]]]],"^2R",["^[",[null,null]]],"^2P",["^[",[[],[["^1V",[["^ ","^2V",["^2W","^2X","^2Y"]],"^2Z"]]]]],"^2Q",null,"^2R",["^[",[null,null]],"^8",1,"^7",12,"^9",12,"^2S",1,"^2T",true,"^2K",["^[",[[],[["^1V",[["^ ","^2V",["^2W","^2X","^2Y"]],"^2Z"]]]]],"^2[","Returns a Ring-compatible response map.\n\n   Optionally can be passed a :format option. This should be another\n   response-format map. If format is provided it will be used to\n   specify the content-type, and the read method will be used to\n   populate the :body key in the response map."]],"^Y",["^ ","^P","^P"],"~:cljs.analyzer/constants",["^ ","^R",["^F",["~:description","^2Z","~:read","~:headers","~:status","~:content-type","~:body"]],"~:order",["^36","^35","^38","^2Z","^34","^33","^37"]],"^13",["^ ","^S",["^F",[]]],"^14",["^ "],"^15",["^Q","^P","^M","^N","^O"]],"^J","^H","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1V",[["^3<","~:static-fns"],true,["^3<","~:elide-asserts"],false,["^3<","~:optimize-constants"],null,["^3<","~:external-config"],null,["^3<","~:tooling-config"],null,["^3<","~:emit-constants"],null,["^3<","~:infer-externs"],true,["^3<","^1<"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3<","~:fn-invoke-direct"],null,["^3<","^1>"],"/dev/null"]]]