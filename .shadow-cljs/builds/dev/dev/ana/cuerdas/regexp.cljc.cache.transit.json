["^ ","~:output",["^ ","~:js","goog.provide('cuerdas.regexp');\ngoog.require('cljs.core');\ngoog.require('cuerdas.vendor.xregexp');\ngoog.require('goog.string');\ncuerdas.regexp.xregexp = XRegExp;\n/**\n * Return `true` if `x` is a regexp pattern\n *   instance.\n */\ncuerdas.regexp.regexp_QMARK_ = (function cuerdas$regexp$regexp_QMARK_(x){\nreturn cljs.core.regexp_QMARK_(x);\n});\n/**\n * Enhace the regexp instance with unicode support. This is noop\n *   in JVM because it already works perfectly with unicode.\n */\ncuerdas.regexp.enhace = (function cuerdas$regexp$enhace(re){\nif(cljs.core.truth_(cuerdas.regexp.regexp_QMARK_(re))){\n} else {\nthrow (new Error(\"Assert failed: (regexp? re)\"));\n}\n\nvar G__60158 = re.source;\nvar G__60159 = re.flags;\nreturn (cuerdas.regexp.xregexp.cljs$core$IFn$_invoke$arity$2 ? cuerdas.regexp.xregexp.cljs$core$IFn$_invoke$arity$2(G__60158,G__60159) : cuerdas.regexp.xregexp.call(null,G__60158,G__60159));\n});\n/**\n * Escapes characters in the string that are not safe\n * to use in a RegExp.\n */\ncuerdas.regexp.escape = (function cuerdas$regexp$escape(s){\nreturn goog.string.regExpEscape(s);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","A regexp helpers and enhancements (mostly for cljs).","~:file","cuerdas/regexp.cljc","~:line",25,"~:column",5,"~:end-line",25,"~:end-column",19],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.alpha","~$cljs.spec.alpha"],"~:use-macros",null,"~:excludes",["~#set",["~$regexp?"]],"~:name","~$cuerdas.regexp","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cuerdas.vendor.xregexp","^O","~$goog.string","^P","~$gstr","^P","~$cljs.core","^R","~$goog","^S"],"~:seen",["^G",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^R","^R"],"~:form",["~#list",["~$ns","^J","A regexp helpers and enhancements (mostly for cljs).",["^Y",["~:refer-clojure","~:exclude",["^H"]]],["^Y",["^U",["^O"],["^P","~:as","^Q"]]]]],"~:flags",["^ ","^U",["^G",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^O","^P"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","cuerdas/regexp.cljc"],"~:compiled-at",1537561410827,"~:resource-name","cuerdas/regexp.cljc","~:warnings",[],"~:source",";; Copyright (c) 2015-2016 Andrey Antukh <niwi@niwi.nz>\n;; All rights reserved.\n;;\n;; Redistribution and use in source and binary forms, with or without\n;; modification, are permitted provided that the following conditions are met:\n;;\n;; * Redistributions of source code must retain the above copyright notice, this\n;;   list of conditions and the following disclaimer.\n;;\n;; * Redistributions in binary form must reproduce the above copyright notice,\n;;   this list of conditions and the following disclaimer in the documentation\n;;   and/or other materials provided with the distribution.\n;;\n;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n;; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n;; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n;; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n;; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n;; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n(ns cuerdas.regexp\n  \"A regexp helpers and enhancements (mostly for cljs).\"\n  (:refer-clojure :exclude [regexp?])\n  #?(:cljs (:require [cuerdas.vendor.xregexp]\n                     [goog.string :as gstr]))\n  #?(:clj (:import (java.util.regex Pattern))))\n\n#?(:cljs\n   (def ^:private xregexp js/XRegExp))\n\n(defn regexp?\n  \"Return `true` if `x` is a regexp pattern\n  instance.\"\n  [x]\n  #?(:cljs (cljs.core/regexp? x)\n     :clj (instance? Pattern x)))\n\n(defn enhace\n  \"Enhace the regexp instance with unicode support. This is noop\n  in JVM because it already works perfectly with unicode.\"\n  [re]\n  {:pre [(regexp? re)]}\n  #?(:clj re\n     :cljs (xregexp (.-source re) (.-flags re))))\n\n(defn escape\n  \"Escapes characters in the string that are not safe\n   to use in a RegExp.\"\n  [s]\n  #?(:clj  (Pattern/quote ^String s)\n     :cljs (gstr/regExpEscape s)))\n","~:reader-features",["^G",["~:cljs"]],"~:source-map",["^ ","~i32",["^ ","~i3",[["^ ","~:gcol",0,"~:gline",4]],"~i18",[["^ ","^1?",0,"^1@",4,"^I","cuerdas.regexp/xregexp"]],"~i26",[["^ ","^1?",25,"^1@",4,"^I","js/XRegExp"]]],"~i34",["^ ","~i0",[["^ ","^1?",0,"^1@",5],["^ ","^1?",31,"^1@",9],["^ ","^1?",0,"^1@",10]],"~i6",[["^ ","^1?",0,"^1@",9,"^I","cuerdas.regexp/regexp?"]]],"~i37",["^ ","~i3",[["^ ","^1?",70,"^1@",9,"^I","x"]]],"~i38",["^ ","~i11",[["^ ","^1?",0,"^1@",10]],"~i12",[["^ ","^1?",7,"^1@",10,"^I","cljs.core/regexp?"]],"~i30",[["^ ","^1?",31,"^1@",10,"^I","x"]]],"~i41",["^ ","~i0",[["^ ","^1?",0,"^1@",12],["^ ","^1?",24,"^1@",16],["^ ","^1?",0,"^1@",17],["^ ","^1?",0,"^1@",17],["^ ","^1?",0,"^1@",18],["^ ","^1?",0,"^1@",19],["^ ","^1?",0,"^1@",19],["^ ","^1?",6,"^1@",19],["^ ","^1?",11,"^1@",19,"^I","js/Error"],["^ ","^1?",17,"^1@",19]],"~i6",[["^ ","^1?",0,"^1@",16,"^I","cuerdas.regexp/enhace"]]],"~i44",["^ ","~i3",[["^ ","^1?",56,"^1@",16,"^I","re"]]],"~i45",["^ ","~i9",[["^ ","^1?",20,"^1@",17]],"~i10",[["^ ","^1?",20,"^1@",17,"^I","cuerdas.regexp/regexp?"]],"^1A",[["^ ","^1?",49,"^1@",17,"^I","re"]]],"~i47",["^ ","^1F",[["^ ","^1?",0,"^1@",22],["^ ","^1?",4,"^1@",22,"^I","G__60158"],["^ ","^1?",4,"^1@",23,"^I","G__60159"],["^ ","^1?",0,"^1@",24],["^ ","^1?",0,"^1@",24],["^ ","^1?",116,"^1@",24,"^I","G__60158"],["^ ","^1?",125,"^1@",24,"^I","G__60159"],["^ ","^1?",170,"^1@",24,"^I","G__60158"],["^ ","^1?",179,"^1@",24,"^I","G__60159"]],"^1G",[["^ ","^1?",8,"^1@",24,"^I","cuerdas.regexp/xregexp"],["^ ","^1?",63,"^1@",24,"^I","cuerdas.regexp/xregexp"],["^ ","^1?",137,"^1@",24,"^I","cuerdas.regexp/xregexp"]],"~i20",[["^ ","^1?",15,"^1@",22]],"^1H",[["^ ","^1?",15,"^1@",22,"^I","re"]],"^1C",[["^ ","^1?",15,"^1@",23]],"~i43",[["^ ","^1?",15,"^1@",23,"^I","re"]]],"~i49",["^ ","~i0",[["^ ","^1?",0,"^1@",26],["^ ","^1?",24,"^1@",30],["^ ","^1?",0,"^1@",31]],"~i6",[["^ ","^1?",0,"^1@",30,"^I","cuerdas.regexp/escape"]]],"~i52",["^ ","~i3",[["^ ","^1?",56,"^1@",30,"^I","s"]]],"~i54",["^ ","^1F",[["^ ","^1?",0,"^1@",31]],"^1G",[["^ ","^1?",7,"^1@",31,"^I","goog.string/regExpEscape"]],"^1H",[["^ ","^1?",32,"^1@",31,"^I","s"]]]],"~:cljc",true],"~:cache-keys",["~#cmap",[["~:macro","^R"],[1533155342000],["^16","cuerdas/vendor/xregexp.cljs"],[1533155357000,"^S","^R","~$module$node_modules$xregexp$lib$index"],["^16","goog/math/math.js"],[1533155346000,"^S","~$goog.array","~$goog.asserts"],["^16","goog/array/array.js"],[1533155346000,"^S","^1Y"],["^16","goog/debug/error.js"],[1533155346000,"^S"],["~:shadow.build.npm/resource","node_modules/xregexp/tools/output/scripts.js"],[1537460974000,1534609637000,"~$shadow.js"],["^1Z","node_modules/xregexp/lib/addons/unicode-blocks.js"],[1537460974000,1534609637000,"^1[","~$module$node_modules$xregexp$tools$output$blocks"],["^16","goog/dom/nodetype.js"],[1533155346000,"^S"],["^16","cuerdas/regexp.cljc"],[1533155358000,"^S","^R","^O","^P"],["^16","shadow/js.js"],[1537460974000,"^S"],["^16","goog/object/object.js"],[1533155346000,"^S"],"~:SHADOW-TIMESTAMP",[1537460974000,1533155342000],["^1Z","node_modules/xregexp/lib/addons/unicode-properties.js"],[1537460974000,1534609637000,"^1[","~$module$node_modules$xregexp$tools$output$properties"],["^16","goog/math/long.js"],[1533155346000,"^S","^1Y","~$goog.reflect"],["^1Z","node_modules/xregexp/tools/output/categories.js"],[1537460974000,1534609637000,"^1["],["^16","goog/functions/functions.js"],[1533155346000,"^S"],["^16","goog/structs/map.js"],[1533155346000,"^S","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^1Z","node_modules/xregexp/tools/output/blocks.js"],[1537460974000,1534609637000,"^1["],["^16","goog/asserts/asserts.js"],[1533155346000,"^S","~$goog.debug.Error","~$goog.dom.NodeType","^P"],["^1Z","node_modules/xregexp/lib/addons/build.js"],[1537460974000,1534609637000,"^1["],["^16","goog/uri/uri.js"],[1533155346000,"^S","^1X","^1Y","^P","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^1Z","node_modules/xregexp/lib/addons/unicode-scripts.js"],[1537460974000,1534609637000,"^1[","~$module$node_modules$xregexp$tools$output$scripts"],["^16","goog/base.js"],[1533155346000],["^16","goog/structs/structs.js"],[1533155346000,"^S","^1X","^26"],["^16","goog/string/string.js"],[1533155346000,"^S"],["^16","goog/reflect/reflect.js"],[1533155346000,"^S"],["^1Z","node_modules/xregexp/lib/xregexp.js"],[1537460974000,1534609637000,"^1["],["^16","goog/string/stringbuffer.js"],[1533155346000,"^S"],["^16","goog/iter/iter.js"],[1533155346000,"^S","^1X","^1Y","~$goog.functions","~$goog.math"],["^16","cljs/core.cljs"],[1533155342000,"~$goog.math.Long","~$goog.math.Integer","^P","^26","^1X","~$goog.Uri","~$goog.string.StringBuffer"],["^1Z","node_modules/xregexp/lib/addons/matchrecursive.js"],[1537460974000,1534609637000,"^1["],["^16","goog/math/integer.js"],[1533155346000,"^S"],["^1Z","node_modules/xregexp/tools/output/properties.js"],[1537460974000,1534609637000,"^1["],["^16","goog/uri/utils.js"],[1533155346000,"^S","^1X","^1Y","^P"],["^1Z","node_modules/xregexp/lib/addons/unicode-categories.js"],[1537460974000,1534609637000,"^1[","~$module$node_modules$xregexp$tools$output$categories"],["^1Z","node_modules/xregexp/lib/index.js"],[1537460974000,1534609637000,"^1[","~$module$node_modules$xregexp$lib$xregexp","~$module$node_modules$xregexp$lib$addons$build","~$module$node_modules$xregexp$lib$addons$matchrecursive","~$module$node_modules$xregexp$lib$addons$unicode_base","~$module$node_modules$xregexp$lib$addons$unicode_blocks","~$module$node_modules$xregexp$lib$addons$unicode_categories","~$module$node_modules$xregexp$lib$addons$unicode_properties","~$module$node_modules$xregexp$lib$addons$unicode_scripts"],["^1Z","node_modules/xregexp/lib/addons/unicode-base.js"],[1537460974000,1534609637000,"^1["]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","A regexp helpers and enhancements (mostly for cljs).","^7","cuerdas/regexp.cljc","^8",25,"^9",5,"^:",25,"^;",19],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D"],"^E",null,"^F",["^G",["^H"]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^P","^Q","^P","^R","^R","^S","^S"],"^T",["^G",["^U"]],"~:shadow/js-access-global",["^G",["Error","XRegExp"]],"^V",null,"~:defs",["^ ","~$xregexp",["^ ","^I","~$cuerdas.regexp/xregexp","^7","cuerdas/regexp.cljc","^8",33,"^9",4,"^:",33,"^;",26,"~:private",true,"^5",["^ ","^7","cuerdas/regexp.cljc","^8",33,"^9",19,"^:",33,"^;",26,"^2S",true],"~:tag","~$js"],"^H",["^ ","~:protocol-inline",null,"^5",["^ ","^7","cuerdas/regexp.cljc","^8",35,"^9",7,"^:",35,"^;",14,"~:arglists",["^Y",["~$quote",["^Y",[["~$x"]]]]],"^6","Return `true` if `x` is a regexp pattern\n  instance."],"^I","~$cuerdas.regexp/regexp?","~:variadic",false,"^7","cuerdas/regexp.cljc","^;",14,"~:method-params",["^Y",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^Y",[null,null]],"^9",1,"^8",35,"^:",35,"~:max-fixed-arity",1,"~:fn-var",true,"^2W",["^Y",["^2X",["^Y",[["~$x"]]]]],"^6","Return `true` if `x` is a regexp pattern\n  instance."],"~$enhace",["^ ","^2V",null,"^5",["^ ","^7","cuerdas/regexp.cljc","^8",42,"^9",7,"^:",42,"^;",13,"^2W",["^Y",["^2X",["^Y",[["~$re"]]]]],"^6","Enhace the regexp instance with unicode support. This is noop\n  in JVM because it already works perfectly with unicode."],"^I","~$cuerdas.regexp/enhace","^2Z",false,"^7","cuerdas/regexp.cljc","^;",13,"^2[",["^Y",[["^35"]]],"^30",null,"^31",["^Y",[null,null]],"^9",1,"^8",42,"^:",42,"^32",1,"^33",true,"^2W",["^Y",["^2X",["^Y",[["^35"]]]]],"^6","Enhace the regexp instance with unicode support. This is noop\n  in JVM because it already works perfectly with unicode."],"~$escape",["^ ","^2V",null,"^5",["^ ","^7","cuerdas/regexp.cljc","^8",50,"^9",7,"^:",50,"^;",13,"^2W",["^Y",["^2X",["^Y",[["~$s"]]]]],"^6","Escapes characters in the string that are not safe\n   to use in a RegExp."],"^I","~$cuerdas.regexp/escape","^2Z",false,"^7","cuerdas/regexp.cljc","^;",13,"^2[",["^Y",[["~$s"]]],"^30",null,"^31",["^Y",[null,null]],"^9",1,"^8",50,"^:",50,"^32",1,"^33",true,"^2W",["^Y",["^2X",["^Y",[["~$s"]]]]],"^6","Escapes characters in the string that are not safe\n   to use in a RegExp."]],"^W",["^ ","^R","^R"],"^12",["^ ","^U",["^G",[]]],"^13",["^ "],"^14",["^S","^R","^O","^P"]],"^L","^J","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1U",[["^3;","~:static-fns"],true,["^3;","~:elide-asserts"],false,["^3;","~:optimize-constants"],null,["^3;","~:external-config"],null,["^3;","~:tooling-config"],null,["^3;","~:emit-constants"],null,["^3;","~:infer-externs"],true,["^3;","^1;"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3;","~:fn-invoke-direct"],null,["^3;","^1="],"/dev/null"]]]