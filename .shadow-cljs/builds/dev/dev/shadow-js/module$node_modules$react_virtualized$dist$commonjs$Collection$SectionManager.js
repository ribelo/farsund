["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-virtualized/dist/commonjs/Collection/SectionManager.js"],"~:js","shadow$provide.module$node_modules$react_virtualized$dist$commonjs$Collection$SectionManager=function(global,process,require,module,exports,shadow$shims){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}Object.defineProperty(exports,\"__esModule\",{value:!0});global=require(\"module$node_modules$babel_runtime$core_js$object$keys\");var _keys2=_interopRequireDefault(global);global=require(\"module$node_modules$babel_runtime$helpers$classCallCheck\");var _classCallCheck3=\n_interopRequireDefault(global);global=require(\"module$node_modules$babel_runtime$helpers$createClass\");var _createClass3=_interopRequireDefault(global);global=require(\"module$node_modules$react_virtualized$dist$commonjs$Collection$Section\");var _Section2=_interopRequireDefault(global);require(\"module$node_modules$react_virtualized$dist$commonjs$Collection$types\");require=function(){function SectionManager(){var sectionSize=0<arguments.length&&void 0!==arguments[0]?arguments[0]:100;(0,_classCallCheck3.default)(this,\nSectionManager);this._sectionSize=sectionSize;this._cellMetadata=[];this._sections={}}(0,_createClass3.default)(SectionManager,[{key:\"getCellIndices\",value:function(_ref){var indices={};this.getSections({height:_ref.height,width:_ref.width,x:_ref.x,y:_ref.y}).forEach(function(section){return section.getCellIndices().forEach(function(index){indices[index]=index})});return(0,_keys2.default)(indices).map(function(index){return indices[index]})}},{key:\"getCellMetadata\",value:function(_ref2){return this._cellMetadata[_ref2.index]}},\n{key:\"getSections\",value:function(_ref3){var x=_ref3.x,y=_ref3.y,sectionXStop=Math.floor((x+_ref3.width-1)/this._sectionSize),sectionYStart=Math.floor(y/this._sectionSize);_ref3=Math.floor((y+_ref3.height-1)/this._sectionSize);y=[];for(x=Math.floor(x/this._sectionSize);x<=sectionXStop;x++)for(var sectionY=sectionYStart;sectionY<=_ref3;sectionY++){var key=x+\".\"+sectionY;this._sections[key]||(this._sections[key]=new _Section2.default({height:this._sectionSize,width:this._sectionSize,x:x*this._sectionSize,\ny:sectionY*this._sectionSize}));y.push(this._sections[key])}return y}},{key:\"getTotalSectionCount\",value:function(){return(0,_keys2.default)(this._sections).length}},{key:\"toString\",value:function(){var _this=this;return(0,_keys2.default)(this._sections).map(function(index){return _this._sections[index].toString()})}},{key:\"registerCell\",value:function(_ref4){var cellMetadatum=_ref4.cellMetadatum,index=_ref4.index;this._cellMetadata[index]=cellMetadatum;this.getSections(cellMetadatum).forEach(function(section){return section.addCellIndex({index:index})})}}]);\nreturn SectionManager}();exports.default=require}","~:source","shadow$provide[\"module$node_modules$react_virtualized$dist$commonjs$Collection$SectionManager\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _keys = require('babel-runtime/core-js/object/keys');\n\nvar _keys2 = _interopRequireDefault(_keys);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _Section = require('./Section');\n\nvar _Section2 = _interopRequireDefault(_Section);\n\nvar _types = require('./types');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SECTION_SIZE = 100; /**\n                         * Window Sections are used to group nearby cells.\n                         * This enables us to more quickly determine which cells to display in a given region of the Window.\n                         * \n                         */\n\n/**\n * Contains 0 to many Sections.\n * Grows (and adds Sections) dynamically as cells are registered.\n * Automatically adds cells to the appropriate Section(s).\n */\nvar SectionManager = function () {\n  function SectionManager() {\n    var sectionSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SECTION_SIZE;\n    (0, _classCallCheck3.default)(this, SectionManager);\n\n    this._sectionSize = sectionSize;\n\n    this._cellMetadata = [];\n    this._sections = {};\n  }\n\n  /**\n   * Gets all cell indices contained in the specified region.\n   * A region may encompass 1 or more Sections.\n   */\n\n\n  (0, _createClass3.default)(SectionManager, [{\n    key: 'getCellIndices',\n    value: function getCellIndices(_ref) {\n      var height = _ref.height,\n          width = _ref.width,\n          x = _ref.x,\n          y = _ref.y;\n\n      var indices = {};\n\n      this.getSections({ height: height, width: width, x: x, y: y }).forEach(function (section) {\n        return section.getCellIndices().forEach(function (index) {\n          indices[index] = index;\n        });\n      });\n\n      // Object keys are strings; this function returns numbers\n      return (0, _keys2.default)(indices).map(function (index) {\n        return indices[index];\n      });\n    }\n\n    /** Get size and position information for the cell specified. */\n\n  }, {\n    key: 'getCellMetadata',\n    value: function getCellMetadata(_ref2) {\n      var index = _ref2.index;\n\n      return this._cellMetadata[index];\n    }\n\n    /** Get all Sections overlapping the specified region. */\n\n  }, {\n    key: 'getSections',\n    value: function getSections(_ref3) {\n      var height = _ref3.height,\n          width = _ref3.width,\n          x = _ref3.x,\n          y = _ref3.y;\n\n      var sectionXStart = Math.floor(x / this._sectionSize);\n      var sectionXStop = Math.floor((x + width - 1) / this._sectionSize);\n      var sectionYStart = Math.floor(y / this._sectionSize);\n      var sectionYStop = Math.floor((y + height - 1) / this._sectionSize);\n\n      var sections = [];\n\n      for (var sectionX = sectionXStart; sectionX <= sectionXStop; sectionX++) {\n        for (var sectionY = sectionYStart; sectionY <= sectionYStop; sectionY++) {\n          var key = sectionX + '.' + sectionY;\n\n          if (!this._sections[key]) {\n            this._sections[key] = new _Section2.default({\n              height: this._sectionSize,\n              width: this._sectionSize,\n              x: sectionX * this._sectionSize,\n              y: sectionY * this._sectionSize\n            });\n          }\n\n          sections.push(this._sections[key]);\n        }\n      }\n\n      return sections;\n    }\n\n    /** Total number of Sections based on the currently registered cells. */\n\n  }, {\n    key: 'getTotalSectionCount',\n    value: function getTotalSectionCount() {\n      return (0, _keys2.default)(this._sections).length;\n    }\n\n    /** Intended for debugger/test purposes only */\n\n  }, {\n    key: 'toString',\n    value: function toString() {\n      var _this = this;\n\n      return (0, _keys2.default)(this._sections).map(function (index) {\n        return _this._sections[index].toString();\n      });\n    }\n\n    /** Adds a cell to the appropriate Sections and registers it metadata for later retrievable. */\n\n  }, {\n    key: 'registerCell',\n    value: function registerCell(_ref4) {\n      var cellMetadatum = _ref4.cellMetadatum,\n          index = _ref4.index;\n\n      this._cellMetadata[index] = cellMetadatum;\n\n      this.getSections(cellMetadatum).forEach(function (section) {\n        return section.addCellIndex({ index: index });\n      });\n    }\n  }]);\n  return SectionManager;\n}();\n\nexports.default = SectionManager;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$react_virtualized$dist$commonjs$Collection$types","~$module$node_modules$react_virtualized$dist$commonjs$Collection$Section","~$shadow.js","~$module$node_modules$babel_runtime$core_js$object$keys","~$module$node_modules$babel_runtime$helpers$classCallCheck","~$module$node_modules$babel_runtime$helpers$createClass"]],"~:properties",["^5",["width","index","height","_cellMetadata","_sections","key","x","__esModule","value","y","_sectionSize","default"]],"~:compiled-at",1537791607676,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_virtualized$dist$commonjs$Collection$SectionManager.js\",\n\"lineCount\":6,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/react-virtualized/dist/commonjs/Collection/SectionManager.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_virtualized$dist$commonjs$Collection$SectionManager\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n'use strict';\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\n\\nvar _keys = require('babel-runtime/core-js/object/keys');\\n\\nvar _keys2 = _interopRequireDefault(_keys);\\n\\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\\n\\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\\n\\nvar _createClass2 = require('babel-runtime/helpers/createClass');\\n\\nvar _createClass3 = _interopRequireDefault(_createClass2);\\n\\nvar _Section = require('./Section');\\n\\nvar _Section2 = _interopRequireDefault(_Section);\\n\\nvar _types = require('./types');\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nvar SECTION_SIZE = 100; /**\\n                         * Window Sections are used to group nearby cells.\\n                         * This enables us to more quickly determine which cells to display in a given region of the Window.\\n                         * \\n                         */\\n\\n/**\\n * Contains 0 to many Sections.\\n * Grows (and adds Sections) dynamically as cells are registered.\\n * Automatically adds cells to the appropriate Section(s).\\n */\\nvar SectionManager = function () {\\n  function SectionManager() {\\n    var sectionSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SECTION_SIZE;\\n    (0, _classCallCheck3.default)(this, SectionManager);\\n\\n    this._sectionSize = sectionSize;\\n\\n    this._cellMetadata = [];\\n    this._sections = {};\\n  }\\n\\n  /**\\n   * Gets all cell indices contained in the specified region.\\n   * A region may encompass 1 or more Sections.\\n   */\\n\\n\\n  (0, _createClass3.default)(SectionManager, [{\\n    key: 'getCellIndices',\\n    value: function getCellIndices(_ref) {\\n      var height = _ref.height,\\n          width = _ref.width,\\n          x = _ref.x,\\n          y = _ref.y;\\n\\n      var indices = {};\\n\\n      this.getSections({ height: height, width: width, x: x, y: y }).forEach(function (section) {\\n        return section.getCellIndices().forEach(function (index) {\\n          indices[index] = index;\\n        });\\n      });\\n\\n      // Object keys are strings; this function returns numbers\\n      return (0, _keys2.default)(indices).map(function (index) {\\n        return indices[index];\\n      });\\n    }\\n\\n    /** Get size and position information for the cell specified. */\\n\\n  }, {\\n    key: 'getCellMetadata',\\n    value: function getCellMetadata(_ref2) {\\n      var index = _ref2.index;\\n\\n      return this._cellMetadata[index];\\n    }\\n\\n    /** Get all Sections overlapping the specified region. */\\n\\n  }, {\\n    key: 'getSections',\\n    value: function getSections(_ref3) {\\n      var height = _ref3.height,\\n          width = _ref3.width,\\n          x = _ref3.x,\\n          y = _ref3.y;\\n\\n      var sectionXStart = Math.floor(x / this._sectionSize);\\n      var sectionXStop = Math.floor((x + width - 1) / this._sectionSize);\\n      var sectionYStart = Math.floor(y / this._sectionSize);\\n      var sectionYStop = Math.floor((y + height - 1) / this._sectionSize);\\n\\n      var sections = [];\\n\\n      for (var sectionX = sectionXStart; sectionX <= sectionXStop; sectionX++) {\\n        for (var sectionY = sectionYStart; sectionY <= sectionYStop; sectionY++) {\\n          var key = sectionX + '.' + sectionY;\\n\\n          if (!this._sections[key]) {\\n            this._sections[key] = new _Section2.default({\\n              height: this._sectionSize,\\n              width: this._sectionSize,\\n              x: sectionX * this._sectionSize,\\n              y: sectionY * this._sectionSize\\n            });\\n          }\\n\\n          sections.push(this._sections[key]);\\n        }\\n      }\\n\\n      return sections;\\n    }\\n\\n    /** Total number of Sections based on the currently registered cells. */\\n\\n  }, {\\n    key: 'getTotalSectionCount',\\n    value: function getTotalSectionCount() {\\n      return (0, _keys2.default)(this._sections).length;\\n    }\\n\\n    /** Intended for debugger/test purposes only */\\n\\n  }, {\\n    key: 'toString',\\n    value: function toString() {\\n      var _this = this;\\n\\n      return (0, _keys2.default)(this._sections).map(function (index) {\\n        return _this._sections[index].toString();\\n      });\\n    }\\n\\n    /** Adds a cell to the appropriate Sections and registers it metadata for later retrievable. */\\n\\n  }, {\\n    key: 'registerCell',\\n    value: function registerCell(_ref4) {\\n      var cellMetadatum = _ref4.cellMetadatum,\\n          index = _ref4.index;\\n\\n      this._cellMetadata[index] = cellMetadatum;\\n\\n      this.getSections(cellMetadatum).forEach(function (section) {\\n        return section.addCellIndex({ index: index });\\n      });\\n    }\\n  }]);\\n  return SectionManager;\\n}();\\n\\nexports.default = SectionManager;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"default\",\"Object\",\"defineProperty\",\"value\",\"_keys\",\"_keys2\",\"_classCallCheck2\",\"_classCallCheck3\",\"_createClass2\",\"_createClass3\",\"_Section\",\"_Section2\",\"SectionManager\",\"sectionSize\",\"arguments\",\"length\",\"undefined\",\"SECTION_SIZE\",\"_sectionSize\",\"_cellMetadata\",\"_sections\",\"key\",\"getCellIndices\",\"_ref\",\"indices\",\"getSections\",\"height\",\"width\",\"x\",\"y\",\"forEach\",\"section\",\"index\",\"map\",\"getCellMetadata\",\"_ref2\",\"_ref3\",\"sectionXStop\",\"Math\",\"floor\",\"sectionYStart\",\"sectionYStop\",\"sections\",\"sectionX\",\"sectionXStart\",\"sectionY\",\"push\",\"getTotalSectionCount\",\"toString\",\"_this\",\"registerCell\",\"_ref4\",\"cellMetadatum\",\"addCellIndex\"]\n}\n"]