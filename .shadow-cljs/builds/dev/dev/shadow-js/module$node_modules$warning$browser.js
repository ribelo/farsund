["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/warning/browser.js"],"~:js","shadow$provide.module$node_modules$warning$browser=function(global,process,require,module,exports,shadow$shims){global=function(){};global=function(condition,format,args){var len=arguments.length;args=Array(2<len?len-2:0);for(var key=2;key<len;key++)args[key-2]=arguments[key];if(void 0===format)throw Error(\"`warning(condition, format, ...args)` requires a warning message argument\");if(10>format.length||/^[s\\W]*$/.test(format))throw Error(\"The warning format should be able to uniquely identify this warning. Please, use a more descriptive format than: \"+\nformat);if(!condition){var argIndex=0;len=\"Warning: \"+format.replace(/%s/g,function(){return args[argIndex++]});\"undefined\"!==typeof console&&console.error(len);try{throw Error(len);}catch(x){}}};module.exports=global}","~:source","shadow$provide[\"module$node_modules$warning$browser\"] = function(global,process,require,module,exports,shadow$shims) {\n/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = function() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n        '`warning(condition, format, ...args)` requires a warning ' +\n        'message argument'\n      );\n    }\n\n    if (format.length < 10 || (/^[s\\W]*$/).test(format)) {\n      throw new Error(\n        'The warning format should be able to uniquely identify this ' +\n        'warning. Please, use a more descriptive format than: ' + format\n      );\n    }\n\n    if (!condition) {\n      var argIndex = 0;\n      var message = 'Warning: ' +\n        format.replace(/%s/g, function() {\n          return args[argIndex++];\n        });\n      if (typeof console !== 'undefined') {\n        console.error(message);\n      }\n      try {\n        // This error was thrown as a convenience so that you can use this stack\n        // to find the callsite that caused this warning to fire.\n        throw new Error(message);\n      } catch(x) {}\n    }\n  };\n}\n\nmodule.exports = warning;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",[]],"~:compiled-at",1537561386527,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$warning$browser.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,oCAAA,CAAwD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAmBjHC,MAAAA,CAAUA,QAAQ,EAAG,EAGvBA,OAAA,CAAUA,QAAQ,CAACC,SAAD,CAAYC,MAAZ,CAAoBC,IAApB,CAA0B,CAC1C,IAAIC,IAAMC,SAAAC,OACVH,KAAA,CAAWI,KAAJ,CAAgB,CAAN,CAAAH,GAAA,CAAUA,GAAV,CAAgB,CAAhB,CAAoB,CAA9B,CACP,KAAK,IAAII,IAAM,CAAf,CAAkBA,GAAlB,CAAwBJ,GAAxB,CAA6BI,GAAA,EAA7B,CACEL,IAAA,CAAKK,GAAL,CAAW,CAAX,CAAA,CAAgBH,SAAA,CAAUG,GAAV,CAElB,IAAeC,IAAAA,EAAf,GAAIP,MAAJ,CACE,KAAUQ,MAAJ,CACJ,2EADI,CAAN,CAMF,GAAoB,EAApB,CAAIR,MAAAI,OAAJ,EAA2B,UAADK,KAAA,CAAkBT,MAAlB,CAA1B,CACE,KAAUQ,MAAJ,CACJ,mHADI;AAEsDR,MAFtD,CAAN,CAMF,GAAI,CAACD,SAAL,CAAgB,CACd,IAAIW,SAAW,CACXC,IAAAA,CAAU,WAAVA,CACFX,MAAAY,QAAA,CAAe,KAAf,CAAsB,QAAQ,EAAG,CAC/B,MAAOX,KAAA,CAAKS,QAAA,EAAL,CADwB,CAAjC,CAGqB,YAAvB,GAAI,MAAOG,QAAX,EACEA,OAAAC,MAAA,CAAcH,GAAd,CAEF,IAAI,CAGF,KAAUH,MAAJ,CAAUG,GAAV,CAAN,CAHE,CAIF,MAAMI,CAAN,CAAS,EAbG,CApB0B,CAsC9CpB,OAAAC,QAAA,CAAiBE,MA5DoG;\",\n\"sources\":[\"node_modules/warning/browser.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$warning$browser\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n/**\\n * Copyright 2014-2015, Facebook, Inc.\\n * All rights reserved.\\n *\\n * This source code is licensed under the BSD-style license found in the\\n * LICENSE file in the root directory of this source tree. An additional grant\\n * of patent rights can be found in the PATENTS file in the same directory.\\n */\\n\\n'use strict';\\n\\n/**\\n * Similar to invariant but only logs a warning if the condition is not met.\\n * This can be used to log issues in development environments in critical\\n * paths. Removing the logging code for production environments will keep the\\n * same logic and follow the same code paths.\\n */\\n\\nvar warning = function() {};\\n\\nif (process.env.NODE_ENV !== 'production') {\\n  warning = function(condition, format, args) {\\n    var len = arguments.length;\\n    args = new Array(len > 2 ? len - 2 : 0);\\n    for (var key = 2; key < len; key++) {\\n      args[key - 2] = arguments[key];\\n    }\\n    if (format === undefined) {\\n      throw new Error(\\n        '`warning(condition, format, ...args)` requires a warning ' +\\n        'message argument'\\n      );\\n    }\\n\\n    if (format.length < 10 || (/^[s\\\\W]*$/).test(format)) {\\n      throw new Error(\\n        'The warning format should be able to uniquely identify this ' +\\n        'warning. Please, use a more descriptive format than: ' + format\\n      );\\n    }\\n\\n    if (!condition) {\\n      var argIndex = 0;\\n      var message = 'Warning: ' +\\n        format.replace(/%s/g, function() {\\n          return args[argIndex++];\\n        });\\n      if (typeof console !== 'undefined') {\\n        console.error(message);\\n      }\\n      try {\\n        // This error was thrown as a convenience so that you can use this stack\\n        // to find the callsite that caused this warning to fire.\\n        throw new Error(message);\\n      } catch(x) {}\\n    }\\n  };\\n}\\n\\nmodule.exports = warning;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"warning\",\"condition\",\"format\",\"args\",\"len\",\"arguments\",\"length\",\"Array\",\"key\",\"undefined\",\"Error\",\"test\",\"argIndex\",\"message\",\"replace\",\"console\",\"error\",\"x\"]\n}\n"]