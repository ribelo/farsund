["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/deepmerge/dist/umd.js"],"~:js","shadow$provide.module$node_modules$deepmerge$dist$umd=function(global$jscomp$0,process,require,module,exports,shadow$shims){(function(global,factory){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=factory():\"function\"===typeof define&&define.amd?define(factory):global.deepmerge=factory()})(this,function(){function cloneUnlessOtherwiseSpecified(value,options){return!1!==options.clone&&options.isMergeableObject(value)?deepmerge(Array.isArray(value)?[]:{},value,options):value}\nfunction defaultArrayMerge(target,source,options){return target.concat(source).map(function(element){return cloneUnlessOtherwiseSpecified(element,options)})}function mergeObject(target,source,options){var destination={};options.isMergeableObject(target)&&Object.keys(target).forEach(function(key){destination[key]=cloneUnlessOtherwiseSpecified(target[key],options)});Object.keys(source).forEach(function(key){options.isMergeableObject(source[key])&&target[key]?destination[key]=deepmerge(target[key],source[key],\noptions):destination[key]=cloneUnlessOtherwiseSpecified(source[key],options)});return destination}function deepmerge(target,source,options){options=options||{};options.arrayMerge=options.arrayMerge||defaultArrayMerge;options.isMergeableObject=options.isMergeableObject||isMergeableObject;var sourceIsArray=Array.isArray(source),targetIsArray=Array.isArray(target);return sourceIsArray!==targetIsArray?cloneUnlessOtherwiseSpecified(source,options):sourceIsArray?options.arrayMerge(target,source,options):\nmergeObject(target,source,options)}var isMergeableObject=function(value){var JSCompiler_temp;if(JSCompiler_temp=!!value&&\"object\"===typeof value)JSCompiler_temp=Object.prototype.toString.call(value),JSCompiler_temp=!(\"[object RegExp]\"===JSCompiler_temp||\"[object Date]\"===JSCompiler_temp||value.$$typeof===REACT_ELEMENT_TYPE);return JSCompiler_temp},REACT_ELEMENT_TYPE=\"function\"===typeof Symbol&&Symbol.for?Symbol.for(\"react.element\"):60103;deepmerge.all=function(array,options){if(!Array.isArray(array))throw Error(\"first argument should be an array\");\nreturn array.reduce(function(prev,next){return deepmerge(prev,next,options)},{})};return deepmerge})}","~:source","shadow$provide[\"module$node_modules$deepmerge$dist$umd\"] = function(global,process,require,module,exports,shadow$shims) {\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.deepmerge = factory());\n}(this, (function () { 'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tObject.keys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tObject.keys(source).forEach(function(key) {\n\t\tif (!options.isMergeableObject(source[key]) || !target[key]) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = deepmerge(target[key], source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nreturn deepmerge_1;\n\n})));\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["deepmerge","arrayMerge","isMergeableObject","all"]],"~:compiled-at",1537561386529,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$deepmerge$dist$umd.js\",\n\"lineCount\":5,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/deepmerge/dist/umd.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$deepmerge$dist$umd\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n(function (global, factory) {\\n\\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\\n\\ttypeof define === 'function' && define.amd ? define(factory) :\\n\\t(global.deepmerge = factory());\\n}(this, (function () { 'use strict';\\n\\nvar isMergeableObject = function isMergeableObject(value) {\\n\\treturn isNonNullObject(value)\\n\\t\\t&& !isSpecial(value)\\n};\\n\\nfunction isNonNullObject(value) {\\n\\treturn !!value && typeof value === 'object'\\n}\\n\\nfunction isSpecial(value) {\\n\\tvar stringValue = Object.prototype.toString.call(value);\\n\\n\\treturn stringValue === '[object RegExp]'\\n\\t\\t|| stringValue === '[object Date]'\\n\\t\\t|| isReactElement(value)\\n}\\n\\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\\n\\nfunction isReactElement(value) {\\n\\treturn value.$$typeof === REACT_ELEMENT_TYPE\\n}\\n\\nfunction emptyTarget(val) {\\n\\treturn Array.isArray(val) ? [] : {}\\n}\\n\\nfunction cloneUnlessOtherwiseSpecified(value, options) {\\n\\treturn (options.clone !== false && options.isMergeableObject(value))\\n\\t\\t? deepmerge(emptyTarget(value), value, options)\\n\\t\\t: value\\n}\\n\\nfunction defaultArrayMerge(target, source, options) {\\n\\treturn target.concat(source).map(function(element) {\\n\\t\\treturn cloneUnlessOtherwiseSpecified(element, options)\\n\\t})\\n}\\n\\nfunction mergeObject(target, source, options) {\\n\\tvar destination = {};\\n\\tif (options.isMergeableObject(target)) {\\n\\t\\tObject.keys(target).forEach(function(key) {\\n\\t\\t\\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\\n\\t\\t});\\n\\t}\\n\\tObject.keys(source).forEach(function(key) {\\n\\t\\tif (!options.isMergeableObject(source[key]) || !target[key]) {\\n\\t\\t\\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\\n\\t\\t} else {\\n\\t\\t\\tdestination[key] = deepmerge(target[key], source[key], options);\\n\\t\\t}\\n\\t});\\n\\treturn destination\\n}\\n\\nfunction deepmerge(target, source, options) {\\n\\toptions = options || {};\\n\\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\\n\\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\\n\\n\\tvar sourceIsArray = Array.isArray(source);\\n\\tvar targetIsArray = Array.isArray(target);\\n\\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\\n\\n\\tif (!sourceAndTargetTypesMatch) {\\n\\t\\treturn cloneUnlessOtherwiseSpecified(source, options)\\n\\t} else if (sourceIsArray) {\\n\\t\\treturn options.arrayMerge(target, source, options)\\n\\t} else {\\n\\t\\treturn mergeObject(target, source, options)\\n\\t}\\n}\\n\\ndeepmerge.all = function deepmergeAll(array, options) {\\n\\tif (!Array.isArray(array)) {\\n\\t\\tthrow new Error('first argument should be an array')\\n\\t}\\n\\n\\treturn array.reduce(function(prev, next) {\\n\\t\\treturn deepmerge(prev, next, options)\\n\\t}, {})\\n};\\n\\nvar deepmerge_1 = deepmerge;\\n\\nreturn deepmerge_1;\\n\\n})));\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"factory\",\"define\",\"amd\",\"deepmerge\",\"cloneUnlessOtherwiseSpecified\",\"value\",\"options\",\"clone\",\"isMergeableObject\",\"Array\",\"isArray\",\"defaultArrayMerge\",\"target\",\"source\",\"concat\",\"map\",\"element\",\"mergeObject\",\"destination\",\"Object\",\"keys\",\"forEach\",\"key\",\"arrayMerge\",\"sourceIsArray\",\"targetIsArray\",\"stringValue\",\"prototype\",\"toString\",\"call\",\"$$typeof\",\"REACT_ELEMENT_TYPE\",\"Symbol\",\"for\",\"all\",\"deepmerge.all\",\"array\",\"Error\",\"reduce\",\"prev\",\"next\"]\n}\n"]