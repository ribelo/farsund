["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/xregexp/lib/addons/unicode-base.js"],"~:js","shadow$provide.module$node_modules$xregexp$lib$addons$unicode_base=function(global,process,require,module,exports,shadow$shims){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=void 0;exports.default=function(XRegExp){function normalize(name){return name.replace(/[- _]+/g,\"\").toLowerCase()}function charCode(chr){var esc=/^\\\\[xu](.+)/.exec(chr);return esc?dec(esc[1]):chr.charCodeAt(\"\\\\\"===chr[0]?1:0)}function invertBmp(range){var output=\"\",lastEnd=-1;XRegExp.forEach(range,/(\\\\x..|\\\\u....|\\\\?[\\s\\S])(?:-(\\\\x..|\\\\u....|\\\\?[\\s\\S]))?/,\nfunction(m){var start=charCode(m[1]);start>lastEnd+1&&(output+=\"\\\\u\".concat(pad4(hex(lastEnd+1))),start>lastEnd+2&&(output+=\"-\\\\u\".concat(pad4(hex(start-1)))));lastEnd=charCode(m[2]||m[1])});65535>lastEnd&&(output+=\"\\\\u\".concat(pad4(hex(lastEnd+1))),65534>lastEnd&&(output+=\"-\\\\uFFFF\"));return output}var unicode={},dec=XRegExp._dec,hex=XRegExp._hex,pad4=XRegExp._pad4;XRegExp.addToken(/\\\\([pP])(?:{(\\^?)([^}]*)}|([A-Za-z]))/,function(match,scope,flags){var isNegated=\"P\"===match[1]||!!match[2],isAstralMode=\n-1!==flags.indexOf(\"A\");flags=normalize(match[4]||match[3]);var item=unicode[flags];if(\"P\"===match[1]&&match[2])throw new SyntaxError(\"Invalid double negation \"+match[0]);if(!unicode.hasOwnProperty(flags))throw new SyntaxError(\"Unknown Unicode token \"+match[0]);if(item.inverseOf){flags=normalize(item.inverseOf);if(!unicode.hasOwnProperty(flags))throw new ReferenceError(\"\".concat(\"Unicode token missing data \"+match[0],\" -\\x3e \").concat(item.inverseOf));item=unicode[flags];isNegated=!isNegated}if(!item.bmp&&\n!isAstralMode)throw new SyntaxError(\"Astral mode required for Unicode token \"+match[0]);if(isAstralMode){if(\"class\"===scope)throw new SyntaxError(\"Astral mode does not support Unicode tokens within character classes\");match=isNegated?\"a!\":\"a\\x3d\";(scope=unicode[flags][match])||(scope=unicode[flags],flags=unicode[flags],isAstralMode=\"\",flags.bmp&&!flags.isBmpLast&&(isAstralMode=\"[\".concat(flags.bmp,\"]\").concat(flags.astral?\"|\":\"\")),flags.astral&&(isAstralMode+=flags.astral),flags.isBmpLast&&flags.bmp&&\n(isAstralMode+=\"\".concat(flags.astral?\"|\":\"\",\"[\").concat(flags.bmp,\"]\")),isNegated=isNegated?\"(?:(?!\".concat(isAstralMode,\")(?:[\\ud800-\\udbff][\\udc00-\\udfff]|[\\x00-ï¿¿]))\"):\"(?:\".concat(isAstralMode,\")\"),scope=scope[match]=isNegated);return scope}return\"class\"===scope?isNegated?unicode[flags][\"b!\"]||(unicode[flags][\"b!\"]=invertBmp(unicode[flags].bmp)):item.bmp:\"\".concat((isNegated?\"[^\":\"[\")+item.bmp,\"]\")},{scope:\"all\",optionalFlags:\"A\",leadChar:\"\\\\\"});XRegExp.addUnicodeData=function(data){var _iteratorNormalCompletion=\n!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _iterator=data[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){var item=_step.value;if(!item.name)throw Error(\"Unicode token requires name\");if(!(item.inverseOf||item.bmp||item.astral))throw Error(\"Unicode token has no character data \"+item.name);unicode[normalize(item.name)]=item;item.alias&&(unicode[normalize(item.alias)]=item)}}catch(err){_didIteratorError=!0,_iteratorError=\nerr}finally{try{_iteratorNormalCompletion||null==_iterator.return||_iterator.return()}finally{if(_didIteratorError)throw _iteratorError;}}XRegExp.cache.flush(\"patterns\")};XRegExp._getUnicodeProperty=function(name){name=normalize(name);return unicode[name]}};module.exports=exports[\"default\"]}","~:source","shadow$provide[\"module$node_modules$xregexp$lib$addons$unicode_base\"] = function(global,process,require,module,exports,shadow$shims) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/*!\n * XRegExp Unicode Base 4.2.0\n * <xregexp.com>\n * Steven Levithan (c) 2008-present MIT License\n */\nvar _default = function _default(XRegExp) {\n  /**\n   * Adds base support for Unicode matching:\n   * - Adds syntax `\\p{..}` for matching Unicode tokens. Tokens can be inverted using `\\P{..}` or\n   *   `\\p{^..}`. Token names ignore case, spaces, hyphens, and underscores. You can omit the\n   *   braces for token names that are a single letter (e.g. `\\pL` or `PL`).\n   * - Adds flag A (astral), which enables 21-bit Unicode support.\n   * - Adds the `XRegExp.addUnicodeData` method used by other addons to provide character data.\n   *\n   * Unicode Base relies on externally provided Unicode character data. Official addons are\n   * available to provide data for Unicode categories, scripts, blocks, and properties.\n   *\n   * @requires XRegExp\n   */\n  // ==--------------------------==\n  // Private stuff\n  // ==--------------------------==\n  // Storage for Unicode data\n  var unicode = {}; // Reuse utils\n\n  var dec = XRegExp._dec;\n  var hex = XRegExp._hex;\n  var pad4 = XRegExp._pad4; // Generates a token lookup name: lowercase, with hyphens, spaces, and underscores removed\n\n  function normalize(name) {\n    return name.replace(/[- _]+/g, '').toLowerCase();\n  } // Gets the decimal code of a literal code unit, \\xHH, \\uHHHH, or a backslash-escaped literal\n\n\n  function charCode(chr) {\n    var esc = /^\\\\[xu](.+)/.exec(chr);\n    return esc ? dec(esc[1]) : chr.charCodeAt(chr[0] === '\\\\' ? 1 : 0);\n  } // Inverts a list of ordered BMP characters and ranges\n\n\n  function invertBmp(range) {\n    var output = '';\n    var lastEnd = -1;\n    XRegExp.forEach(range, /(\\\\x..|\\\\u....|\\\\?[\\s\\S])(?:-(\\\\x..|\\\\u....|\\\\?[\\s\\S]))?/, function (m) {\n      var start = charCode(m[1]);\n\n      if (start > lastEnd + 1) {\n        output += \"\\\\u\".concat(pad4(hex(lastEnd + 1)));\n\n        if (start > lastEnd + 2) {\n          output += \"-\\\\u\".concat(pad4(hex(start - 1)));\n        }\n      }\n\n      lastEnd = charCode(m[2] || m[1]);\n    });\n\n    if (lastEnd < 0xFFFF) {\n      output += \"\\\\u\".concat(pad4(hex(lastEnd + 1)));\n\n      if (lastEnd < 0xFFFE) {\n        output += '-\\\\uFFFF';\n      }\n    }\n\n    return output;\n  } // Generates an inverted BMP range on first use\n\n\n  function cacheInvertedBmp(slug) {\n    var prop = 'b!';\n    return unicode[slug][prop] || (unicode[slug][prop] = invertBmp(unicode[slug].bmp));\n  } // Combines and optionally negates BMP and astral data\n\n\n  function buildAstral(slug, isNegated) {\n    var item = unicode[slug];\n    var combined = '';\n\n    if (item.bmp && !item.isBmpLast) {\n      combined = \"[\".concat(item.bmp, \"]\").concat(item.astral ? '|' : '');\n    }\n\n    if (item.astral) {\n      combined += item.astral;\n    }\n\n    if (item.isBmpLast && item.bmp) {\n      combined += \"\".concat(item.astral ? '|' : '', \"[\").concat(item.bmp, \"]\");\n    } // Astral Unicode tokens always match a code point, never a code unit\n\n\n    return isNegated ? \"(?:(?!\".concat(combined, \")(?:[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\0-\\uFFFF]))\") : \"(?:\".concat(combined, \")\");\n  } // Builds a complete astral pattern on first use\n\n\n  function cacheAstral(slug, isNegated) {\n    var prop = isNegated ? 'a!' : 'a=';\n    return unicode[slug][prop] || (unicode[slug][prop] = buildAstral(slug, isNegated));\n  } // ==--------------------------==\n  // Core functionality\n  // ==--------------------------==\n\n  /*\n   * Add astral mode (flag A) and Unicode token syntax: `\\p{..}`, `\\P{..}`, `\\p{^..}`, `\\pC`.\n   */\n\n\n  XRegExp.addToken( // Use `*` instead of `+` to avoid capturing `^` as the token name in `\\p{^}`\n  /\\\\([pP])(?:{(\\^?)([^}]*)}|([A-Za-z]))/, function (match, scope, flags) {\n    var ERR_DOUBLE_NEG = 'Invalid double negation ';\n    var ERR_UNKNOWN_NAME = 'Unknown Unicode token ';\n    var ERR_UNKNOWN_REF = 'Unicode token missing data ';\n    var ERR_ASTRAL_ONLY = 'Astral mode required for Unicode token ';\n    var ERR_ASTRAL_IN_CLASS = 'Astral mode does not support Unicode tokens within character classes'; // Negated via \\P{..} or \\p{^..}\n\n    var isNegated = match[1] === 'P' || !!match[2]; // Switch from BMP (0-FFFF) to astral (0-10FFFF) mode via flag A\n\n    var isAstralMode = flags.indexOf('A') !== -1; // Token lookup name. Check `[4]` first to avoid passing `undefined` via `\\p{}`\n\n    var slug = normalize(match[4] || match[3]); // Token data object\n\n    var item = unicode[slug];\n\n    if (match[1] === 'P' && match[2]) {\n      throw new SyntaxError(ERR_DOUBLE_NEG + match[0]);\n    }\n\n    if (!unicode.hasOwnProperty(slug)) {\n      throw new SyntaxError(ERR_UNKNOWN_NAME + match[0]);\n    } // Switch to the negated form of the referenced Unicode token\n\n\n    if (item.inverseOf) {\n      slug = normalize(item.inverseOf);\n\n      if (!unicode.hasOwnProperty(slug)) {\n        throw new ReferenceError(\"\".concat(ERR_UNKNOWN_REF + match[0], \" -> \").concat(item.inverseOf));\n      }\n\n      item = unicode[slug];\n      isNegated = !isNegated;\n    }\n\n    if (!(item.bmp || isAstralMode)) {\n      throw new SyntaxError(ERR_ASTRAL_ONLY + match[0]);\n    }\n\n    if (isAstralMode) {\n      if (scope === 'class') {\n        throw new SyntaxError(ERR_ASTRAL_IN_CLASS);\n      }\n\n      return cacheAstral(slug, isNegated);\n    }\n\n    return scope === 'class' ? isNegated ? cacheInvertedBmp(slug) : item.bmp : \"\".concat((isNegated ? '[^' : '[') + item.bmp, \"]\");\n  }, {\n    scope: 'all',\n    optionalFlags: 'A',\n    leadChar: '\\\\'\n  });\n  /**\n   * Adds to the list of Unicode tokens that XRegExp regexes can match via `\\p` or `\\P`.\n   *\n   * @memberOf XRegExp\n   * @param {Array} data Objects with named character ranges. Each object may have properties\n   *   `name`, `alias`, `isBmpLast`, `inverseOf`, `bmp`, and `astral`. All but `name` are\n   *   optional, although one of `bmp` or `astral` is required (unless `inverseOf` is set). If\n   *   `astral` is absent, the `bmp` data is used for BMP and astral modes. If `bmp` is absent,\n   *   the name errors in BMP mode but works in astral mode. If both `bmp` and `astral` are\n   *   provided, the `bmp` data only is used in BMP mode, and the combination of `bmp` and\n   *   `astral` data is used in astral mode. `isBmpLast` is needed when a token matches orphan\n   *   high surrogates *and* uses surrogate pairs to match astral code points. The `bmp` and\n   *   `astral` data should be a combination of literal characters and `\\xHH` or `\\uHHHH` escape\n   *   sequences, with hyphens to create ranges. Any regex metacharacters in the data should be\n   *   escaped, apart from range-creating hyphens. The `astral` data can additionally use\n   *   character classes and alternation, and should use surrogate pairs to represent astral code\n   *   points. `inverseOf` can be used to avoid duplicating character data if a Unicode token is\n   *   defined as the exact inverse of another token.\n   * @example\n   *\n   * // Basic use\n   * XRegExp.addUnicodeData([{\n   *   name: 'XDigit',\n   *   alias: 'Hexadecimal',\n   *   bmp: '0-9A-Fa-f'\n   * }]);\n   * XRegExp('\\\\p{XDigit}:\\\\p{Hexadecimal}+').test('0:3D'); // -> true\n   */\n\n  XRegExp.addUnicodeData = function (data) {\n    var ERR_NO_NAME = 'Unicode token requires name';\n    var ERR_NO_DATA = 'Unicode token has no character data ';\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var item = _step.value;\n\n        if (!item.name) {\n          throw new Error(ERR_NO_NAME);\n        }\n\n        if (!(item.inverseOf || item.bmp || item.astral)) {\n          throw new Error(ERR_NO_DATA + item.name);\n        }\n\n        unicode[normalize(item.name)] = item;\n\n        if (item.alias) {\n          unicode[normalize(item.alias)] = item;\n        }\n      } // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and\n      // flags might now produce different results\n\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    XRegExp.cache.flush('patterns');\n  };\n  /**\n   * @ignore\n   *\n   * Return a reference to the internal Unicode definition structure for the given Unicode\n   * Property if the given name is a legal Unicode Property for use in XRegExp `\\p` or `\\P` regex\n   * constructs.\n   *\n   * @memberOf XRegExp\n   * @param {String} name Name by which the Unicode Property may be recognized (case-insensitive),\n   *   e.g. `'N'` or `'Number'`. The given name is matched against all registered Unicode\n   *   Properties and Property Aliases.\n   * @returns {Object} Reference to definition structure when the name matches a Unicode Property.\n   *\n   * @note\n   * For more info on Unicode Properties, see also http://unicode.org/reports/tr18/#Categories.\n   *\n   * @note\n   * This method is *not* part of the officially documented API and may change or be removed in\n   * the future. It is meant for userland code that wishes to reuse the (large) internal Unicode\n   * structures set up by XRegExp.\n   */\n\n\n  XRegExp._getUnicodeProperty = function (name) {\n    var slug = normalize(name);\n    return unicode[slug];\n  };\n};\n\nexports.default = _default;\nmodule.exports = exports[\"default\"];\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["leadChar","__esModule","optionalFlags","value","scope","addUnicodeData","_getUnicodeProperty","default"]],"~:compiled-at",1537561386514,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$xregexp$lib$addons$unicode_base.js\",\n\"lineCount\":7,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/xregexp/lib/addons/unicode-base.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$xregexp$lib$addons$unicode_base\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = void 0;\\n\\n/*!\\n * XRegExp Unicode Base 4.2.0\\n * <xregexp.com>\\n * Steven Levithan (c) 2008-present MIT License\\n */\\nvar _default = function _default(XRegExp) {\\n  /**\\n   * Adds base support for Unicode matching:\\n   * - Adds syntax `\\\\p{..}` for matching Unicode tokens. Tokens can be inverted using `\\\\P{..}` or\\n   *   `\\\\p{^..}`. Token names ignore case, spaces, hyphens, and underscores. You can omit the\\n   *   braces for token names that are a single letter (e.g. `\\\\pL` or `PL`).\\n   * - Adds flag A (astral), which enables 21-bit Unicode support.\\n   * - Adds the `XRegExp.addUnicodeData` method used by other addons to provide character data.\\n   *\\n   * Unicode Base relies on externally provided Unicode character data. Official addons are\\n   * available to provide data for Unicode categories, scripts, blocks, and properties.\\n   *\\n   * @requires XRegExp\\n   */\\n  // ==--------------------------==\\n  // Private stuff\\n  // ==--------------------------==\\n  // Storage for Unicode data\\n  var unicode = {}; // Reuse utils\\n\\n  var dec = XRegExp._dec;\\n  var hex = XRegExp._hex;\\n  var pad4 = XRegExp._pad4; // Generates a token lookup name: lowercase, with hyphens, spaces, and underscores removed\\n\\n  function normalize(name) {\\n    return name.replace(/[- _]+/g, '').toLowerCase();\\n  } // Gets the decimal code of a literal code unit, \\\\xHH, \\\\uHHHH, or a backslash-escaped literal\\n\\n\\n  function charCode(chr) {\\n    var esc = /^\\\\\\\\[xu](.+)/.exec(chr);\\n    return esc ? dec(esc[1]) : chr.charCodeAt(chr[0] === '\\\\\\\\' ? 1 : 0);\\n  } // Inverts a list of ordered BMP characters and ranges\\n\\n\\n  function invertBmp(range) {\\n    var output = '';\\n    var lastEnd = -1;\\n    XRegExp.forEach(range, /(\\\\\\\\x..|\\\\\\\\u....|\\\\\\\\?[\\\\s\\\\S])(?:-(\\\\\\\\x..|\\\\\\\\u....|\\\\\\\\?[\\\\s\\\\S]))?/, function (m) {\\n      var start = charCode(m[1]);\\n\\n      if (start > lastEnd + 1) {\\n        output += \\\"\\\\\\\\u\\\".concat(pad4(hex(lastEnd + 1)));\\n\\n        if (start > lastEnd + 2) {\\n          output += \\\"-\\\\\\\\u\\\".concat(pad4(hex(start - 1)));\\n        }\\n      }\\n\\n      lastEnd = charCode(m[2] || m[1]);\\n    });\\n\\n    if (lastEnd < 0xFFFF) {\\n      output += \\\"\\\\\\\\u\\\".concat(pad4(hex(lastEnd + 1)));\\n\\n      if (lastEnd < 0xFFFE) {\\n        output += '-\\\\\\\\uFFFF';\\n      }\\n    }\\n\\n    return output;\\n  } // Generates an inverted BMP range on first use\\n\\n\\n  function cacheInvertedBmp(slug) {\\n    var prop = 'b!';\\n    return unicode[slug][prop] || (unicode[slug][prop] = invertBmp(unicode[slug].bmp));\\n  } // Combines and optionally negates BMP and astral data\\n\\n\\n  function buildAstral(slug, isNegated) {\\n    var item = unicode[slug];\\n    var combined = '';\\n\\n    if (item.bmp && !item.isBmpLast) {\\n      combined = \\\"[\\\".concat(item.bmp, \\\"]\\\").concat(item.astral ? '|' : '');\\n    }\\n\\n    if (item.astral) {\\n      combined += item.astral;\\n    }\\n\\n    if (item.isBmpLast && item.bmp) {\\n      combined += \\\"\\\".concat(item.astral ? '|' : '', \\\"[\\\").concat(item.bmp, \\\"]\\\");\\n    } // Astral Unicode tokens always match a code point, never a code unit\\n\\n\\n    return isNegated ? \\\"(?:(?!\\\".concat(combined, \\\")(?:[\\\\uD800-\\\\uDBFF][\\\\uDC00-\\\\uDFFF]|[\\\\0-\\\\uFFFF]))\\\") : \\\"(?:\\\".concat(combined, \\\")\\\");\\n  } // Builds a complete astral pattern on first use\\n\\n\\n  function cacheAstral(slug, isNegated) {\\n    var prop = isNegated ? 'a!' : 'a=';\\n    return unicode[slug][prop] || (unicode[slug][prop] = buildAstral(slug, isNegated));\\n  } // ==--------------------------==\\n  // Core functionality\\n  // ==--------------------------==\\n\\n  /*\\n   * Add astral mode (flag A) and Unicode token syntax: `\\\\p{..}`, `\\\\P{..}`, `\\\\p{^..}`, `\\\\pC`.\\n   */\\n\\n\\n  XRegExp.addToken( // Use `*` instead of `+` to avoid capturing `^` as the token name in `\\\\p{^}`\\n  /\\\\\\\\([pP])(?:{(\\\\^?)([^}]*)}|([A-Za-z]))/, function (match, scope, flags) {\\n    var ERR_DOUBLE_NEG = 'Invalid double negation ';\\n    var ERR_UNKNOWN_NAME = 'Unknown Unicode token ';\\n    var ERR_UNKNOWN_REF = 'Unicode token missing data ';\\n    var ERR_ASTRAL_ONLY = 'Astral mode required for Unicode token ';\\n    var ERR_ASTRAL_IN_CLASS = 'Astral mode does not support Unicode tokens within character classes'; // Negated via \\\\P{..} or \\\\p{^..}\\n\\n    var isNegated = match[1] === 'P' || !!match[2]; // Switch from BMP (0-FFFF) to astral (0-10FFFF) mode via flag A\\n\\n    var isAstralMode = flags.indexOf('A') !== -1; // Token lookup name. Check `[4]` first to avoid passing `undefined` via `\\\\p{}`\\n\\n    var slug = normalize(match[4] || match[3]); // Token data object\\n\\n    var item = unicode[slug];\\n\\n    if (match[1] === 'P' && match[2]) {\\n      throw new SyntaxError(ERR_DOUBLE_NEG + match[0]);\\n    }\\n\\n    if (!unicode.hasOwnProperty(slug)) {\\n      throw new SyntaxError(ERR_UNKNOWN_NAME + match[0]);\\n    } // Switch to the negated form of the referenced Unicode token\\n\\n\\n    if (item.inverseOf) {\\n      slug = normalize(item.inverseOf);\\n\\n      if (!unicode.hasOwnProperty(slug)) {\\n        throw new ReferenceError(\\\"\\\".concat(ERR_UNKNOWN_REF + match[0], \\\" -> \\\").concat(item.inverseOf));\\n      }\\n\\n      item = unicode[slug];\\n      isNegated = !isNegated;\\n    }\\n\\n    if (!(item.bmp || isAstralMode)) {\\n      throw new SyntaxError(ERR_ASTRAL_ONLY + match[0]);\\n    }\\n\\n    if (isAstralMode) {\\n      if (scope === 'class') {\\n        throw new SyntaxError(ERR_ASTRAL_IN_CLASS);\\n      }\\n\\n      return cacheAstral(slug, isNegated);\\n    }\\n\\n    return scope === 'class' ? isNegated ? cacheInvertedBmp(slug) : item.bmp : \\\"\\\".concat((isNegated ? '[^' : '[') + item.bmp, \\\"]\\\");\\n  }, {\\n    scope: 'all',\\n    optionalFlags: 'A',\\n    leadChar: '\\\\\\\\'\\n  });\\n  /**\\n   * Adds to the list of Unicode tokens that XRegExp regexes can match via `\\\\p` or `\\\\P`.\\n   *\\n   * @memberOf XRegExp\\n   * @param {Array} data Objects with named character ranges. Each object may have properties\\n   *   `name`, `alias`, `isBmpLast`, `inverseOf`, `bmp`, and `astral`. All but `name` are\\n   *   optional, although one of `bmp` or `astral` is required (unless `inverseOf` is set). If\\n   *   `astral` is absent, the `bmp` data is used for BMP and astral modes. If `bmp` is absent,\\n   *   the name errors in BMP mode but works in astral mode. If both `bmp` and `astral` are\\n   *   provided, the `bmp` data only is used in BMP mode, and the combination of `bmp` and\\n   *   `astral` data is used in astral mode. `isBmpLast` is needed when a token matches orphan\\n   *   high surrogates *and* uses surrogate pairs to match astral code points. The `bmp` and\\n   *   `astral` data should be a combination of literal characters and `\\\\xHH` or `\\\\uHHHH` escape\\n   *   sequences, with hyphens to create ranges. Any regex metacharacters in the data should be\\n   *   escaped, apart from range-creating hyphens. The `astral` data can additionally use\\n   *   character classes and alternation, and should use surrogate pairs to represent astral code\\n   *   points. `inverseOf` can be used to avoid duplicating character data if a Unicode token is\\n   *   defined as the exact inverse of another token.\\n   * @example\\n   *\\n   * // Basic use\\n   * XRegExp.addUnicodeData([{\\n   *   name: 'XDigit',\\n   *   alias: 'Hexadecimal',\\n   *   bmp: '0-9A-Fa-f'\\n   * }]);\\n   * XRegExp('\\\\\\\\p{XDigit}:\\\\\\\\p{Hexadecimal}+').test('0:3D'); // -> true\\n   */\\n\\n  XRegExp.addUnicodeData = function (data) {\\n    var ERR_NO_NAME = 'Unicode token requires name';\\n    var ERR_NO_DATA = 'Unicode token has no character data ';\\n    var _iteratorNormalCompletion = true;\\n    var _didIteratorError = false;\\n    var _iteratorError = undefined;\\n\\n    try {\\n      for (var _iterator = data[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\\n        var item = _step.value;\\n\\n        if (!item.name) {\\n          throw new Error(ERR_NO_NAME);\\n        }\\n\\n        if (!(item.inverseOf || item.bmp || item.astral)) {\\n          throw new Error(ERR_NO_DATA + item.name);\\n        }\\n\\n        unicode[normalize(item.name)] = item;\\n\\n        if (item.alias) {\\n          unicode[normalize(item.alias)] = item;\\n        }\\n      } // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and\\n      // flags might now produce different results\\n\\n    } catch (err) {\\n      _didIteratorError = true;\\n      _iteratorError = err;\\n    } finally {\\n      try {\\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\\n          _iterator.return();\\n        }\\n      } finally {\\n        if (_didIteratorError) {\\n          throw _iteratorError;\\n        }\\n      }\\n    }\\n\\n    XRegExp.cache.flush('patterns');\\n  };\\n  /**\\n   * @ignore\\n   *\\n   * Return a reference to the internal Unicode definition structure for the given Unicode\\n   * Property if the given name is a legal Unicode Property for use in XRegExp `\\\\p` or `\\\\P` regex\\n   * constructs.\\n   *\\n   * @memberOf XRegExp\\n   * @param {String} name Name by which the Unicode Property may be recognized (case-insensitive),\\n   *   e.g. `'N'` or `'Number'`. The given name is matched against all registered Unicode\\n   *   Properties and Property Aliases.\\n   * @returns {Object} Reference to definition structure when the name matches a Unicode Property.\\n   *\\n   * @note\\n   * For more info on Unicode Properties, see also http://unicode.org/reports/tr18/#Categories.\\n   *\\n   * @note\\n   * This method is *not* part of the officially documented API and may change or be removed in\\n   * the future. It is meant for userland code that wishes to reuse the (large) internal Unicode\\n   * structures set up by XRegExp.\\n   */\\n\\n\\n  XRegExp._getUnicodeProperty = function (name) {\\n    var slug = normalize(name);\\n    return unicode[slug];\\n  };\\n};\\n\\nexports.default = _default;\\nmodule.exports = exports[\\\"default\\\"];\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"Object\",\"defineProperty\",\"value\",\"default\",\"_default\",\"XRegExp\",\"normalize\",\"name\",\"replace\",\"toLowerCase\",\"charCode\",\"chr\",\"esc\",\"exec\",\"dec\",\"charCodeAt\",\"invertBmp\",\"range\",\"output\",\"lastEnd\",\"forEach\",\"m\",\"start\",\"concat\",\"pad4\",\"hex\",\"unicode\",\"_dec\",\"_hex\",\"_pad4\",\"addToken\",\"match\",\"scope\",\"flags\",\"isNegated\",\"isAstralMode\",\"indexOf\",\"slug\",\"item\",\"SyntaxError\",\"ERR_DOUBLE_NEG\",\"hasOwnProperty\",\"ERR_UNKNOWN_NAME\",\"inverseOf\",\"ReferenceError\",\"ERR_UNKNOWN_REF\",\"bmp\",\"ERR_ASTRAL_ONLY\",\"ERR_ASTRAL_IN_CLASS\",\"prop\",\"combined\",\"isBmpLast\",\"astral\",\"optionalFlags\",\"leadChar\",\"addUnicodeData\",\"XRegExp.addUnicodeData\",\"data\",\"_iteratorNormalCompletion\",\"_didIteratorError\",\"_iteratorError\",\"undefined\",\"_iterator\",\"Symbol\",\"iterator\",\"_step\",\"done\",\"next\",\"Error\",\"ERR_NO_NAME\",\"ERR_NO_DATA\",\"alias\",\"err\",\"return\",\"cache\",\"flush\",\"_getUnicodeProperty\",\"XRegExp._getUnicodeProperty\"]\n}\n"]