["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-virtualized/dist/commonjs/utils/getUpdatedOffsetForIndex.js"],"~:js","shadow$provide.module$node_modules$react_virtualized$dist$commonjs$utils$getUpdatedOffsetForIndex=function(global,process,require,module,exports,shadow$shims){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=function(_ref){var _ref$align=_ref.align,cellSize=_ref.cellSize,containerSize=_ref.containerSize,currentOffset=_ref.currentOffset;_ref=_ref.cellOffset;var minOffset=_ref-containerSize+cellSize;switch(void 0===_ref$align?\"auto\":_ref$align){case \"start\":return _ref;case \"end\":return minOffset;\ncase \"center\":return _ref-(containerSize-cellSize)/2;default:return Math.max(minOffset,Math.min(_ref,currentOffset))}}}","~:source","shadow$provide[\"module$node_modules$react_virtualized$dist$commonjs$utils$getUpdatedOffsetForIndex\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getUpdatedOffsetForIndex;\n/**\n * Determines a new offset that ensures a certain cell is visible, given the current offset.\n * If the cell is already visible then the current offset will be returned.\n * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.\n *\n * @param align Desired alignment within container; one of \"auto\" (default), \"start\", or \"end\"\n * @param cellOffset Offset (x or y) position for cell\n * @param cellSize Size (width or height) of cell\n * @param containerSize Total size (width or height) of the container\n * @param currentOffset Container's current (x or y) offset\n * @return Offset to use to ensure the specified cell is visible\n */\nfunction getUpdatedOffsetForIndex(_ref) {\n  var _ref$align = _ref.align,\n      align = _ref$align === undefined ? 'auto' : _ref$align,\n      cellOffset = _ref.cellOffset,\n      cellSize = _ref.cellSize,\n      containerSize = _ref.containerSize,\n      currentOffset = _ref.currentOffset;\n\n  var maxOffset = cellOffset;\n  var minOffset = maxOffset - containerSize + cellSize;\n\n  switch (align) {\n    case 'start':\n      return maxOffset;\n    case 'end':\n      return minOffset;\n    case 'center':\n      return maxOffset - (containerSize - cellSize) / 2;\n    default:\n      return Math.max(minOffset, Math.min(maxOffset, currentOffset));\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["__esModule","value","default"]],"~:compiled-at",1537791607678,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_virtualized$dist$commonjs$utils$getUpdatedOffsetForIndex.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,mFAAA,CAAuG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAGpKC,MAAAC,eAAA,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CI,MAAO,CAAA,CADoC,CAA7C,CAGAJ,QAAAK,QAAA,CAaAC,QAAiC,CAACC,IAAD,CAAO,CAAA,IAClCC,WAAaD,IAAAE,MADqB,CAIlCC,SAAWH,IAAAG,SAJuB,CAKlCC,cAAgBJ,IAAAI,cALkB,CAMlCC,cAAgBL,IAAAK,cAEhBC,KAAAA,CALaN,IAAAO,WAMjB,KAAIC,UAAYF,IAAZE,CAAwBJ,aAAxBI,CAAwCL,QAE5C,QAT2BM,IAAAA,EAAfP,GAAAD,UAAAC,CAA2B,MAA3BA,CAAoCD,UAShD,EACE,KAAK,OAAL,CACE,MAAOK,KACT,MAAK,KAAL,CACE,MAAOE,UACT;KAAK,QAAL,CACE,MAAOF,KAAP,EAAoBF,aAApB,CAAoCD,QAApC,EAAgD,CAClD,SACE,MAAOO,KAAAC,IAAA,CAASH,SAAT,CAAoBE,IAAAE,IAAA,CAASN,IAAT,CAAoBD,aAApB,CAApB,CARX,CAXsC,CAnB4H;\",\n\"sources\":[\"node_modules/react-virtualized/dist/commonjs/utils/getUpdatedOffsetForIndex.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_virtualized$dist$commonjs$utils$getUpdatedOffsetForIndex\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n'use strict';\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = getUpdatedOffsetForIndex;\\n/**\\n * Determines a new offset that ensures a certain cell is visible, given the current offset.\\n * If the cell is already visible then the current offset will be returned.\\n * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.\\n *\\n * @param align Desired alignment within container; one of \\\"auto\\\" (default), \\\"start\\\", or \\\"end\\\"\\n * @param cellOffset Offset (x or y) position for cell\\n * @param cellSize Size (width or height) of cell\\n * @param containerSize Total size (width or height) of the container\\n * @param currentOffset Container's current (x or y) offset\\n * @return Offset to use to ensure the specified cell is visible\\n */\\nfunction getUpdatedOffsetForIndex(_ref) {\\n  var _ref$align = _ref.align,\\n      align = _ref$align === undefined ? 'auto' : _ref$align,\\n      cellOffset = _ref.cellOffset,\\n      cellSize = _ref.cellSize,\\n      containerSize = _ref.containerSize,\\n      currentOffset = _ref.currentOffset;\\n\\n  var maxOffset = cellOffset;\\n  var minOffset = maxOffset - containerSize + cellSize;\\n\\n  switch (align) {\\n    case 'start':\\n      return maxOffset;\\n    case 'end':\\n      return minOffset;\\n    case 'center':\\n      return maxOffset - (containerSize - cellSize) / 2;\\n    default:\\n      return Math.max(minOffset, Math.min(maxOffset, currentOffset));\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"Object\",\"defineProperty\",\"value\",\"default\",\"getUpdatedOffsetForIndex\",\"_ref\",\"_ref$align\",\"align\",\"cellSize\",\"containerSize\",\"currentOffset\",\"maxOffset\",\"cellOffset\",\"minOffset\",\"undefined\",\"Math\",\"max\",\"min\"]\n}\n"]