["^ ","~:foreign-libs",[],"~:externs",[],"~:resources",[["^ ","~:cache-key",[1537460969000],"~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:author","Peter Taoussanis, @ckarlsen84","~:doc","Alpha - subject to change!\n  Optional Transit-format[1] IPacker implementation for use with Sente.\n  [1] https://github.com/cognitect/transit-format.","~:file","taoensso/sente/packers/transit.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",35],"~:use-macros",["^ ","~$have","~$taoensso.encore","~$have!","^A","~$have?","^A"],"~:excludes",["~#set",[]],"~:name","~$taoensso.sente.packers.transit","~:imports",null,"~:requires",["^ ","~$interfaces","~$taoensso.sente.interfaces","~$cljs.core","^L","~$goog","^M","^K","^K","~$cognitect.transit","^N","~$enc","^A","~$transit","^N","~$str","~$clojure.string","^R","^R","^A","^A"],"~:seen",["^E",["~:require"]],"~:uses",["^ ","~$pack","^K","~$unpack","^K"],"~:require-macros",["^ ","^A","^A","^O","^A","^L","^L"],"~:cljc",true,"~:flags",["^ ","^T",["^E",[]]],"~:js-deps",["^ "],"~:deps",["^M","^L","^R","^A","^N","^K"]],"~:ns","^G","~:output-name","taoensso.sente.packers.transit.js","~:resource-id",["~:shadow.build.classpath/resource","taoensso/sente/packers/transit.cljc"],"~:resource-name","taoensso/sente/packers/transit.cljc","~:type","~:cljs","~:last-modified",1537460969000,"^I",["^E",["^L","^M","^K","^N","^R","^A"]],"~:pom-info",["^ ","~:group-id","~$com.taoensso","~:artifact-id","~$sente","~:version","1.13.1","^F","sente","~:description","Realtime web comms for Clojure/Script","~:url","https://github.com/ptaoussanis/sente","~:id","~$com.taoensso/sente","~:coordinate",["^1B","1.13.1"]],"~:macro-requires",["^E",["^L","^A"]],"^1@",["~#url","jar:file:/home/ribelo/.m2/repository/com/taoensso/sente/1.13.1/sente-1.13.1.jar!/taoensso/sente/packers/transit.cljc"],"~:provides",["^E",["^G"]],"~:from-jar",true,"^10",["^M","^L","^R","^A","^N","^K"]],["^ ","^3",[1537460969000],"^4",["^ ","^5",null,"^6",["^ "],"^7",["^ ","^9","Alpha, subject to change.\n  Public interfaces / extension points.","^:","taoensso/sente/interfaces.cljc","^;",1,"^<",5,"^=",1,"^>",30],"^?",null,"^D",["^E",[]],"^F","^K","^H",null,"^I",["^ ","^A","^A","^O","^A","^L","^L","^M","^M"],"^S",["^E",["^T"]],"^U",null,"^X",["^ ","^L","^L"],"^Y",true,"^Z",["^ ","^T",["^E",[]]],"^[",["^ "],"^10",["^M","^L","^A"]],"^11","^K","^12","taoensso.sente.interfaces.js","^13",["^14","taoensso/sente/interfaces.cljc"],"^15","taoensso/sente/interfaces.cljc","^16","^17","^18",1537460969000,"^I",["^E",["^L","^M","^A"]],"^19",["^ ","^1:","^1;","^1<","^1=","^1>","1.13.1","^F","sente","^1?","Realtime web comms for Clojure/Script","^1@","https://github.com/ptaoussanis/sente","^1A","^1B","^1C",["^1B","1.13.1"]],"^1D",["^E",["^L"]],"^1@",["^1E","jar:file:/home/ribelo/.m2/repository/com/taoensso/sente/1.13.1/sente-1.13.1.jar!/taoensso/sente/interfaces.cljc"],"^1F",["^E",["^K"]],"^1G",true,"^10",["^M","^L","^A"]],["^ ","^3",[1537460969000],"^4",["^ ","^5",null,"^6",["^ "],"^7",["^ ","^8","Matthew Molloy <@whamtet>","^9","Sente server adapter for Node.js with Dog Fort\n  (https://github.com/whamtet/dogfort).","^:","taoensso/sente/server_adapters/dogfort.cljs","^;",1,"^<",5,"^=",1,"^>",43],"^?",null,"^D",["^E",[]],"^F","~$taoensso.sente.server-adapters.dogfort","^H",null,"^I",["^ ","^A","^A","^O","^A","~$taoensso.sente.server-adapters.generic-node","^1I","~$generic-node","^1I","^L","^L","^M","^M"],"^S",["^E",["^T"]],"^U",null,"^X",["^ ","^L","^L"],"^Y",false,"^Z",["^ ","^T",["^E",[]]],"^[",["^ "],"^10",["^M","^L","^A","^1I"]],"^11","^1H","^12","taoensso.sente.server_adapters.dogfort.js","^13",["^14","taoensso/sente/server_adapters/dogfort.cljs"],"^15","taoensso/sente/server_adapters/dogfort.cljs","^16","^17","^18",1537460969000,"^I",["^E",["^L","^M","^1I","^A"]],"^19",["^ ","^1:","^1;","^1<","^1=","^1>","1.13.1","^F","sente","^1?","Realtime web comms for Clojure/Script","^1@","https://github.com/ptaoussanis/sente","^1A","^1B","^1C",["^1B","1.13.1"]],"^1D",["^E",["^L"]],"^1@",["^1E","jar:file:/home/ribelo/.m2/repository/com/taoensso/sente/1.13.1/sente-1.13.1.jar!/taoensso/sente/server_adapters/dogfort.cljs"],"^1F",["^E",["^1H"]],"^1G",true,"^10",["^M","^L","^A","^1I"]],["^ ","^3",[1537460969000],"^4",["^ ","^5",null,"^6",["^ "],"^7",["^ ","^8","Andrew Phillips <@theasp>, Matthew Molloy <@whamtet>","^9","Sente server adapter for Node.js using the `ws` and `http` libraries.\n  Ref. https://github.com/websockets/ws,\n       https://nodejs.org/api/http.html,\n       https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/,\n       https://github.com/theasp/sente-nodejs-example.","^:","taoensso/sente/server_adapters/generic_node.cljs","^;",1,"^<",5,"^=",1,"^>",48],"^?",["^ ","~$tracef","~$taoensso.timbre","~$debugf","^1L","~$infof","^1L","~$warnf","^1L","~$errorf","^1L"],"^D",["^E",[]],"^F","^1I","^H",null,"^I",["^ ","^A","^A","^O","^A","^1L","^1L","~$timbre","^1L","^K","^K","~$i","^K","^L","^L","^M","^M"],"^S",["^E",["^T"]],"^U",null,"^X",["^ ","^1L","^1L","^1Q","^1L","^L","^L"],"^Y",false,"^Z",["^ ","^T",["^E",[]]],"^[",["^ "],"^10",["^M","^L","^A","^1L","^K"]],"^11","^1I","^12","taoensso.sente.server_adapters.generic_node.js","^13",["^14","taoensso/sente/server_adapters/generic_node.cljs"],"^15","taoensso/sente/server_adapters/generic_node.cljs","^16","^17","^18",1537460969000,"^I",["^E",["^L","^M","^K","^1L","^A"]],"^19",["^ ","^1:","^1;","^1<","^1=","^1>","1.13.1","^F","sente","^1?","Realtime web comms for Clojure/Script","^1@","https://github.com/ptaoussanis/sente","^1A","^1B","^1C",["^1B","1.13.1"]],"^1D",["^E",["^L","^1L"]],"^1@",["^1E","jar:file:/home/ribelo/.m2/repository/com/taoensso/sente/1.13.1/sente-1.13.1.jar!/taoensso/sente/server_adapters/generic_node.cljs"],"^1F",["^E",["^1I"]],"^1G",true,"^10",["^M","^L","^A","^1L","^K"]],["^ ","^3",[1537460969000],"^4",["^ ","^5",null,"^6",["^ "],"^7",["^ ","^8","Andrew Phillips <@theasp>","^9","Sente server adapter for Node.js with Express (http://expressjs.com/).\n\n  This adapter works differently that the others as Sente is\n  expecting Ring requests but Express uses http.IncomingMessage.\n  While most of this adapter could be used for similar\n  implementations there will be assumptions here that the following\n  express middleware (or equivalents) are in place:\n    - cookie-parser\n    - body-parser\n    - csurf\n    - express-session\n    - express-ws\n\n  See the example project at https://goo.gl/lnkiqS for an\n  implementation (it's a bit different than something built on Ring).","^:","taoensso/sente/server_adapters/express.cljs","^;",1,"^<",5,"^=",1,"^>",43],"^?",["^ ","^1K","^1L","^1M","^1L","^1N","^1L","^1O","^1L","^1P","^1L"],"^D",["^E",[]],"^F","~$taoensso.sente.server-adapters.express","^H",null,"^I",["^ ","~$taoensso.sente","^1S","^1=","^1S","^1I","^1I","^1J","^1I","^1L","^1L","^1Q","^1L","^L","^L","^M","^M"],"^S",["^E",["^T"]],"^U",null,"^X",["^ ","^1L","^1L","^1Q","^1L","^L","^L"],"^Y",false,"^Z",["^ ","^T",["^E",[]]],"^[",["^ "],"^10",["^M","^L","^1S","^1I","^1L"]],"^11","^1R","^12","taoensso.sente.server_adapters.express.js","^13",["^14","taoensso/sente/server_adapters/express.cljs"],"^15","taoensso/sente/server_adapters/express.cljs","^16","^17","^18",1537460969000,"^I",["^E",["^L","^M","^1S","^1I","^1L"]],"^19",["^ ","^1:","^1;","^1<","^1=","^1>","1.13.1","^F","sente","^1?","Realtime web comms for Clojure/Script","^1@","https://github.com/ptaoussanis/sente","^1A","^1B","^1C",["^1B","1.13.1"]],"^1D",["^E",["^L","^1L"]],"^1@",["^1E","jar:file:/home/ribelo/.m2/repository/com/taoensso/sente/1.13.1/sente-1.13.1.jar!/taoensso/sente/server_adapters/express.cljs"],"^1F",["^E",["^1R"]],"^1G",true,"^10",["^M","^L","^1S","^1I","^1L"]],["^ ","^3",[1537460969000],"^4",["^ ","^5",null,"^6",["^ "],"^7",["^ ","^8","Peter Taoussanis (@ptaoussanis)","^9","Channel sockets for Clojure/Script.\n\n      Protocol  | client>server | client>server ?+ ack/reply | server>user push\n    * WebSockets:       ✓              [1]                           ✓\n    * Ajax:            [2]              ✓                           [3]\n\n    [1] Emulate with cb-uuid wrapping\n    [2] Emulate with dummy-cb wrapping\n    [3] Emulate with long-polling\n\n  Abbreviations:\n    * chsk      - Channel socket (Sente's own pseudo \"socket\")\n    * server-ch - Underlying web server's async channel that implement\n                  Sente's server channel interface\n    * sch       - server-ch alias\n    * uid       - User-id. An application-level user identifier used for async\n                  push. May have semantic meaning (e.g. username, email address),\n                  may not (e.g. client/random id) - app's discretion.\n    * cb        - Callback\n    * tout      - Timeout\n    * ws        - WebSocket/s\n    * pstr      - Packed string. Arbitrary Clojure data serialized as a\n                  string (e.g. edn) for client<->server comms\n    * udt       - Unix timestamp (datetime long)\n\n  Special messages:\n    * Callback wrapping: [<clj> <?cb-uuid>] for [1], [2]\n    * Callback replies: :chsk/closed, :chsk/timeout, :chsk/error\n\n    * Client-side events:\n        [:chsk/handshake [<?uid> <?csrf-token> <?handshake-data> <first-handshake?>]]\n        [:chsk/state [<old-state-map> <new-state-map>]]\n        [:chsk/recv <ev-as-pushed-from-server>] ; Server>user push\n        [:chsk/ws-ping]\n\n    * Server-side events:\n        [:chsk/bad-package <packed-str>]\n        [:chsk/bad-event   <event>]\n        [:chsk/uidport-open  <uid>]\n        [:chsk/uidport-close <uid>]\n        [:chsk/ws-ping]\n\n  Channel socket state map:\n    :type               - e/o #{:auto :ws :ajax}\n    :open?              - Truthy iff chsk appears to be open (connected) now\n    :ever-opened?       - Truthy iff chsk handshake has ever completed successfully\n    :first-open?        - Truthy iff chsk just completed first successful handshake\n    :uid                - User id provided by server on handshake,    or nil\n    :csrf-token         - CSRF token provided by server on handshake, or nil\n    :handshake-data     - Arb user data provided by server on handshake\n    :last-ws-error      - ?{:udt _ :ev <WebSocket-on-error-event>}\n    :last-ws-close      - ?{:udt _ :ev <WebSocket-on-close-event>\n                            :clean? _ :code _ :reason _}\n    :last-close         - ?{:udt _ :reason _}, with reason e/o\n                            #{nil :requested-disconnect :requested-reconnect\n                             :downgrading-ws-to-ajax :unexpected}\n    :udt-next-reconnect - Approximate udt of next scheduled auto-reconnect attempt\n\n  Notable implementation details:\n    * core.async is used liberally where brute-force core.async allows for\n      significant implementation simplifications. We lean on core.async's\n      efficiency here.\n    * For WebSocket fallback we use long-polling rather than HTTP 1.1 streaming\n      (chunked transfer encoding). Http-kit _does_ support chunked transfer\n      encoding but a small minority of browsers &/or proxies do not. Instead of\n      implementing all 3 modes (WebSockets, streaming, long-polling) - it seemed\n      reasonable to focus on the two extremes (performance + compatibility).\n      In any case client support for WebSockets is growing rapidly so fallback\n      modes will become increasingly irrelevant while the extra simplicity will\n      continue to pay dividends.\n\n  General-use notes:\n    * Single HTTP req+session persists over entire chsk session but cannot\n      modify sessions! Use standard a/sync HTTP Ring req/resp for logins, etc.\n    * Easy to wrap standard HTTP Ring resps for transport over chsks. Prefer\n      this approach to modifying handlers (better portability).","^:","taoensso/sente.cljc","^;",1,"^<",5,"^=",1,"^>",19],"^?",["^ ","~$elide-require","^1S","^1O","^1L","~$go","~$cljs.core.async.macros","^@","^A","~$go-loop","^1V","^B","^A","^C","^A","^1M","^1L","^1K","^1L","^1N","^1L","^1P","^1L"],"^D",["^E",[]],"^F","^1S","^H",null,"^I",["^ ","^1Q","^1L","^J","^K","~$async","~$cljs.core.async","^L","^L","^M","^M","^K","^K","^1Y","^1Y","^O","^A","^1L","^1L","^Q","^R","^R","^R","^A","^A"],"^S",["^E",["^T","^X"]],"^U",["^ ","~$<!","^1Y","~$>!","^1Y","~$put!","^1Y","~$chan","^1Y","~$format","^A","~$swap-in!","^A","~$reset-in!","^A","~$swapped","^A"],"^X",["^ ","^A","^A","^O","^A","^1L","^1L","^1Q","^1L","^1V","^1V","~$asyncm","^1V","^1S","^1S","~$sente-macros","^1S","^L","^L"],"^Y",true,"^Z",["^ ","^T",["^E",[]],"^X",["^E",[]]],"^[",["^ "],"^10",["^M","^L","^R","^1Y","^A","^1L","^K"]],"^11","^1S","^12","taoensso.sente.js","^13",["^14","taoensso/sente.cljc"],"^15","taoensso/sente.cljc","^16","^17","^18",1537460969000,"^I",["^E",["^L","^M","^K","^1Y","^1L","^R","^A"]],"^19",["^ ","^1:","^1;","^1<","^1=","^1>","1.13.1","^F","sente","^1?","Realtime web comms for Clojure/Script","^1@","https://github.com/ptaoussanis/sente","^1A","^1B","^1C",["^1B","1.13.1"]],"^1D",["^E",["^1V","^L","^1S","^1L","^A"]],"^1@",["^1E","jar:file:/home/ribelo/.m2/repository/com/taoensso/sente/1.13.1/sente-1.13.1.jar!/taoensso/sente.cljc"],"^1F",["^E",["^1S"]],"^1G",true,"^10",["^M","^L","^R","^1Y","^A","^1L","^K"]]],"~:data-readers",null,"~:shadow.build.classpath/CACHE-TIMESTAMP",1537460974000]